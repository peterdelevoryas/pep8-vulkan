#ifndef VULKAN_CORE_H_
#define VULKAN_CORE_H_ 1

/*
** copyright (c) 2015-2020 the khronos group inc.
**
** SPDX-license-identifier: apache-2.0
*/

/*
** this header is generated from the khronos vulkan XML API registry.
**
*/

#ifdef __cplusplus
extern "C" {
#endif

#define VK_VERSION_1_0 1
#include "vk_platform.h"

#define VK_DEFINE_HANDLE(object) typedef struct object##_T* object;

#if !defined(VK_DEFINE_NON_DISPATCHABLE_HANDLE)
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__)) || defined(_M_X64)            \
    || defined(__ia64) || defined(_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
#define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T* object;
#else
#define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
#endif
#endif

#define VK_MAKE_VERSION(major, minor, patch)                                                                           \
    ((((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))

// DEPRECATED: this define has been removed. specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION
// macro, should be used instead.
//#define VK_API_VERSION VK_MAKE_VERSION(1, 0, 0) // patch version should always be set to 0

// vulkan 1.0 version number
#define VK_API_VERSION_1_0 VK_MAKE_VERSION(1, 0, 0) // patch version should always be set to 0

// version of this file
#define VK_HEADER_VERSION 154

// complete version of this file
#define VK_HEADER_VERSION_COMPLETE VK_MAKE_VERSION(1, 2, VK_HEADER_VERSION)

#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22)
#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3ff)
#define VK_VERSION_PATCH(version) ((uint32_t)(version) &0xfff)

#define VK_NULL_HANDLE 0

typedef uint32_t VkBool32;
typedef uint64_t VkDeviceAddress;
typedef uint64_t VkDeviceSize;
typedef uint32_t VkFlags;
typedef uint32_t VkSampleMask;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage)
VK_DEFINE_HANDLE(VkInstance)
VK_DEFINE_HANDLE(VkPhysicalDevice)
VK_DEFINE_HANDLE(VkDevice)
VK_DEFINE_HANDLE(VkQueue)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore)
VK_DEFINE_HANDLE(VkCommandBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool)
#define VK_ATTACHMENT_UNUSED (~0U)
#define VK_FALSE 0
#define VK_LOD_CLAMP_NONE 1000.0f
#define VK_QUEUE_FAMILY_IGNORED (~0U)
#define VK_REMAINING_ARRAY_LAYERS (~0U)
#define VK_REMAINING_MIP_LEVELS (~0U)
#define VK_SUBPASS_EXTERNAL (~0U)
#define VK_TRUE 1
#define VK_WHOLE_SIZE (~0ULL)
#define VK_MAX_MEMORY_TYPES 32
#define VK_MAX_MEMORY_HEAPS 16
#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256
#define VK_UUID_SIZE 16
#define VK_MAX_EXTENSION_NAME_SIZE 256
#define VK_MAX_DESCRIPTION_SIZE 256

typedef enum VkResult {
    VK_SUCCESS                                            = 0,
    VK_NOT_READY                                          = 1,
    VK_TIMEOUT                                            = 2,
    VK_EVENT_SET                                          = 3,
    VK_EVENT_RESET                                        = 4,
    VK_INCOMPLETE                                         = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY                           = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY                         = -2,
    VK_ERROR_INITIALIZATION_FAILED                        = -3,
    VK_ERROR_DEVICE_LOST                                  = -4,
    VK_ERROR_MEMORY_MAP_FAILED                            = -5,
    VK_ERROR_LAYER_NOT_PRESENT                            = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT                        = -7,
    VK_ERROR_FEATURE_NOT_PRESENT                          = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER                          = -9,
    VK_ERROR_TOO_MANY_OBJECTS                             = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED                         = -11,
    VK_ERROR_FRAGMENTED_POOL                              = -12,
    VK_ERROR_UNKNOWN                                      = -13,
    VK_ERROR_OUT_OF_POOL_MEMORY                           = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE                      = -1000072003,
    VK_ERROR_FRAGMENTATION                                = -1000161000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS               = -1000257000,
    VK_ERROR_SURFACE_LOST_KHR                             = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR                     = -1000000001,
    VK_SUBOPTIMAL_KHR                                     = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR                              = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR                     = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT                        = -1000011001,
    VK_ERROR_INVALID_SHADER_NV                            = -1000012000,
    VK_ERROR_INCOMPATIBLE_VERSION_KHR                     = -1000150000,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_NOT_PERMITTED_EXT                            = -1000174001,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT          = -1000255000,
    VK_THREAD_IDLE_KHR                                    = 1000268000,
    VK_THREAD_DONE_KHR                                    = 1000268001,
    VK_OPERATION_DEFERRED_KHR                             = 1000268002,
    VK_OPERATION_NOT_DEFERRED_KHR                         = 1000268003,
    VK_PIPELINE_COMPILE_REQUIRED_EXT                      = 1000297000,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR                       = VK_ERROR_OUT_OF_POOL_MEMORY,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR                  = VK_ERROR_INVALID_EXTERNAL_HANDLE,
    VK_ERROR_FRAGMENTATION_EXT                            = VK_ERROR_FRAGMENTATION,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT                   = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR           = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT                = VK_PIPELINE_COMPILE_REQUIRED_EXT,
    VK_RESULT_MAX_ENUM                                    = 0x7fffffff
} VkResult;

typedef enum VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO                                                = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO                                            = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO                                        = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO                                              = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO                                                     = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO                                            = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE                                             = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO                                                = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO                                               = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO                                           = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO                                               = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO                                          = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO                                              = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO                                         = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO                                               = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO                                          = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO                                       = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO                                      = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO                               = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                         = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO                       = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO                         = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO                             = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO                        = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                          = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                        = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                          = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO                              = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO                                   = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO                                    = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO                                     = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO                                             = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO                               = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO                                     = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO                                    = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET                                            = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET                                             = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO                                         = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO                                         = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO                                        = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO                                    = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO                                 = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO                                       = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO                                          = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER                                           = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER                                            = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER                                                  = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO                                     = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO                                       = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES                             = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO                                         = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO                                          = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES                          = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS                                   = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO                                  = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO                                      = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO                             = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO                          = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO                                        = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO                                   = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO                            = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO                             = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES                                = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO                                 = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2                               = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2                                = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2                         = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2                                           = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2                              = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2                                      = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2                                    = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2                                             = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2                                       = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2                             = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2                                       = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2                             = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2                                = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2                      = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES                       = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO                 = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO                                    = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO           = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO                               = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES                              = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES                            = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES                      = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO                                           = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES                       = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES                     = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2                                             = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO                            = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO                                   = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO                                    = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO                            = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES               = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES                = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO                          = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO                      = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES                                = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO                            = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES                                      = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES                                   = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO                              = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO                               = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO                                     = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO                             = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES                                       = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO                                        = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO                                    = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO                         = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES                                   = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES                        = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT                                   = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES                 = 1000063000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES                             = 49,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES                           = 50,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES                             = 51,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES                           = 52,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO                                   = 1000147000,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2                                        = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2                                          = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2                                           = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2                                            = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2                                       = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO                                              = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO                                                = 1000109006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES                           = 1000177000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES                               = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES                    = 1000180000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES                    = 1000082000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES                       = 1000197000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO                 = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES                    = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES                  = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO          = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT         = 1000161004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES                = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE                       = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES                    = 1000221000,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO                                 = 1000246000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES                = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO                              = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES                    = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES                  = 1000108000,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO                             = 1000108001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO                               = 1000108002,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO                               = 1000108003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES         = 1000253000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES         = 1000175000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES         = 1000241000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT                             = 1000241001,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT                           = 1000241002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES                       = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES                     = 1000207000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES                   = 1000207001,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO                                      = 1000207002,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO                                  = 1000207003,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO                                             = 1000207004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO                                           = 1000207005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES                  = 1000257000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO                                      = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO                       = 1000257002,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO                     = 1000257003,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO                       = 1000257004,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR                                       = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR                                                = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR                           = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR                                 = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR                            = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR                                     = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR                                   = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR                          = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR                                    = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR                                 = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR                                        = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR                                    = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR                                     = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR                                 = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR                                 = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR                                   = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT                           = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD            = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT                               = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT                                = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT                                    = 1000022002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV                       = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV                      = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV                    = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT                 = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT               = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT             = 1000028002,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX                                      = 1000030000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX                               = 1000030001,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD                        = 1000041000,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP                       = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV                = 1000050000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV                            = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV                                  = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV                              = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV                              = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV                       = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT                                            = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN                                       = 1000062000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT       = 1000066000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT                                 = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT                        = 1000067001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR                             = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR                             = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR                              = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR                                = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR                                       = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR                                        = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR                                          = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR                      = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                          = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                          = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR                                     = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR                             = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR                                    = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR                                       = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR                  = 1000080000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT       = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT              = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT                            = 1000081002,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR                                             = 1000084000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV                = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT                                      = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT                                          = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT                                           = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT                                          = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT                               = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE                                       = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX    = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV                  = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT                = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT                = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT       = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT       = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT                  = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT         = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT                                                = 1000105000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR                         = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR                              = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR                              = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR                                 = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR                                        = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR                                           = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR                  = 1000116000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR                = 1000116001,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR                          = 1000116002,
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR                               = 1000116003,
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR                                 = 1000116004,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR                                         = 1000116005,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR                             = 1000116006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR                              = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR                                      = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR                                            = 1000119002,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR                                        = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR                                  = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR                                   = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR                                        = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR                                = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK                                     = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK                                   = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT                                = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT                                 = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT                                           = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT                         = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT                           = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID                           = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID                      = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID               = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                     = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                 = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID                                         = 1000129005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT               = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT             = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT                   = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT            = 1000138003,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT                                       = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT                     = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT                 = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT                 = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT                                      = 1000143004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT           = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT         = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT             = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV                 = 1000149000,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR                     = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR                 = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR                  = 1000150000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR            = 1000150001,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR                  = 1000150002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR                  = 1000150003,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR              = 1000150004,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR              = 1000150005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR                             = 1000150006,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR             = 1000150008,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR                              = 1000150009,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR                            = 1000150010,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR                  = 1000150011,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR                  = 1000150012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR                        = 1000150013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR                      = 1000150014,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR                            = 1000150015,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR                        = 1000150016,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR                          = 1000150017,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR                  = 1000150018,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV               = 1000152000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV                  = 1000154000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV                = 1000154001,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT                         = 1000158000,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                              = 1000158001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT              = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT                  = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT              = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                        = 1000158005,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT                                = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT                  = 1000160001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR                 = 1000163000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR               = 1000163001,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV       = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV                  = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV                = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV      = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV                             = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV                           = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV                                                     = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV                                           = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV                                                = 1000165005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV              = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV                       = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV                         = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV                                  = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV        = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV      = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT                = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT             = 1000170001,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT                    = 1000174000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT                             = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT                              = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT             = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR                       = 1000181000,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD                       = 1000183000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT                                   = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD                      = 1000185000,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD                    = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT         = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT             = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT           = 1000190002,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP                                         = 1000191000,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT                      = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV          = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV                         = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV                       = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV         = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV              = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV        = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV                   = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV                                              = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV                           = 1000206001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL       = 1000209000,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL                  = 1000210000,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL                           = 1000210001,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL                                   = 1000210002,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL                            = 1000210003,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL                                 = 1000210004,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL                    = 1000210005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT                     = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD                     = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD                    = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA                           = 1000214000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT                                   = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT               = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT             = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT                = 1000218002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT            = 1000225000,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT    = 1000225001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT              = 1000225002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD                    = 1000227000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD                    = 1000229000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT                    = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT                    = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT                               = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR                              = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT              = 1000244000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT                           = 1000244002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT                             = 1000245000,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT                                         = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV                  = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV                                = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV                = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV             = 1000250000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV                = 1000250001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV                        = 1000250002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT          = 1000251000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT                 = 1000252000,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT                          = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT                  = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT                    = 1000255001,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT                                = 1000256000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT                 = 1000259000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT               = 1000259001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT               = 1000259002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT                = 1000260000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT                   = 1000265000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT             = 1000267000,
    VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR                                     = 1000268000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR     = 1000269000,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR                                               = 1000269001,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR                              = 1000269002,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR                                    = 1000269003,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR                               = 1000269004,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR                 = 1000269005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV         = 1000277000,
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV                            = 1000277001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV                  = 1000277002,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV                               = 1000277003,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV                         = 1000277004,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV                                      = 1000277005,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV                  = 1000277006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV           = 1000277007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT             = 1000281000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT           = 1000281001,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM      = 1000282000,
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM                           = 1000282001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT                       = 1000286000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT                     = 1000286001,
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT                     = 1000287000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT              = 1000287001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT                = 1000287002,
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR                                = 1000290000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT                       = 1000295000,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT                             = 1000295001,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT                               = 1000295002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT    = 1000297000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV                  = 1000300000,
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV                        = 1000300001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT             = 1000332000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT           = 1000332001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT                   = 1000335000,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR                                          = 1000337000,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR                                           = 1000337001,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR                                 = 1000337002,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR                                 = 1000337003,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR                                           = 1000337004,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR                                        = 1000337005,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR                                               = 1000337006,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR                                                = 1000337007,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR                                                = 1000337008,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR                                         = 1000337009,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR                                             = 1000337010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT                       = 1000340000,
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT                                = 1000346000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT           = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR  = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR           = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR         = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR                  = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR            = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR  = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR            = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR  = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR     = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR          = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR =
        VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR             = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR        = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR  = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR     = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR      = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR     = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR           = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR        = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR   = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR    = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR          = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR  = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR   = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR   = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR            = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR              = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR               = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR                = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR           = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR                  = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR                    = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR           = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR            = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR  = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR  = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR   = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR =
        VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR                = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR   = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR        = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR        = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR         = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR  = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT =
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT =
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT =
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV =
        VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV =
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR =
        VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR     = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR            = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR          = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR =
        VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT      = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR =
        VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR =
        VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7fffffff
} VkStructureType;

typedef enum VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED                                  = 0,
    VK_IMAGE_LAYOUT_GENERAL                                    = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL                   = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL           = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL            = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL                   = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL                       = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL                       = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED                             = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL                   = 1000241000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL                    = 1000241001,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL                 = 1000241002,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL                  = 1000241003,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR                            = 1000001002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR                         = 1000111000,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV                    = 1000164003,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT           = 1000218000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR =
        VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR =
        VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR   = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR    = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR  = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_MAX_ENUM                       = 0x7fffffff
} VkImageLayout;

typedef enum VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN                         = 0,
    VK_OBJECT_TYPE_INSTANCE                        = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE                 = 2,
    VK_OBJECT_TYPE_DEVICE                          = 3,
    VK_OBJECT_TYPE_QUEUE                           = 4,
    VK_OBJECT_TYPE_SEMAPHORE                       = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER                  = 6,
    VK_OBJECT_TYPE_FENCE                           = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY                   = 8,
    VK_OBJECT_TYPE_BUFFER                          = 9,
    VK_OBJECT_TYPE_IMAGE                           = 10,
    VK_OBJECT_TYPE_EVENT                           = 11,
    VK_OBJECT_TYPE_QUERY_POOL                      = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW                     = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW                      = 14,
    VK_OBJECT_TYPE_SHADER_MODULE                   = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE                  = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT                 = 17,
    VK_OBJECT_TYPE_RENDER_PASS                     = 18,
    VK_OBJECT_TYPE_PIPELINE                        = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT           = 20,
    VK_OBJECT_TYPE_SAMPLER                         = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL                 = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET                  = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER                     = 24,
    VK_OBJECT_TYPE_COMMAND_POOL                    = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION        = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE      = 1000085000,
    VK_OBJECT_TYPE_SURFACE_KHR                     = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR                   = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR                     = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR                = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT       = 1000011000,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT       = 1000128000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR      = 1000165000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT            = 1000160000,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR          = 1000268000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV     = 1000277000,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT           = 1000295000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR  = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR    = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV       = VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
    VK_OBJECT_TYPE_MAX_ENUM                        = 0x7fffffff
} VkObjectType;

typedef enum VkVendorId {
    VK_VENDOR_ID_VIV      = 0x10001,
    VK_VENDOR_ID_VSI      = 0x10002,
    VK_VENDOR_ID_KAZAN    = 0x10003,
    VK_VENDOR_ID_CODEPLAY = 0x10004,
    VK_VENDOR_ID_MESA     = 0x10005,
    VK_VENDOR_ID_MAX_ENUM = 0x7fffffff
} VkVendorId;

typedef enum VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE      = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7fffffff
} VkPipelineCacheHeaderVersion;

typedef enum VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND  = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT   = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE    = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE   = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7fffffff
} VkSystemAllocationScope;

typedef enum VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM   = 0x7fffffff
} VkInternalAllocationType;

typedef enum VkFormat {
    VK_FORMAT_UNDEFINED                                      = 0,
    VK_FORMAT_R4G4_UNORM_PACK8                               = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16                          = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16                          = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16                            = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16                            = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16                          = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16                          = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16                          = 8,
    VK_FORMAT_R8_UNORM                                       = 9,
    VK_FORMAT_R8_SNORM                                       = 10,
    VK_FORMAT_R8_USCALED                                     = 11,
    VK_FORMAT_R8_SSCALED                                     = 12,
    VK_FORMAT_R8_UINT                                        = 13,
    VK_FORMAT_R8_SINT                                        = 14,
    VK_FORMAT_R8_SRGB                                        = 15,
    VK_FORMAT_R8G8_UNORM                                     = 16,
    VK_FORMAT_R8G8_SNORM                                     = 17,
    VK_FORMAT_R8G8_USCALED                                   = 18,
    VK_FORMAT_R8G8_SSCALED                                   = 19,
    VK_FORMAT_R8G8_UINT                                      = 20,
    VK_FORMAT_R8G8_SINT                                      = 21,
    VK_FORMAT_R8G8_SRGB                                      = 22,
    VK_FORMAT_R8G8B8_UNORM                                   = 23,
    VK_FORMAT_R8G8B8_SNORM                                   = 24,
    VK_FORMAT_R8G8B8_USCALED                                 = 25,
    VK_FORMAT_R8G8B8_SSCALED                                 = 26,
    VK_FORMAT_R8G8B8_UINT                                    = 27,
    VK_FORMAT_R8G8B8_SINT                                    = 28,
    VK_FORMAT_R8G8B8_SRGB                                    = 29,
    VK_FORMAT_B8G8R8_UNORM                                   = 30,
    VK_FORMAT_B8G8R8_SNORM                                   = 31,
    VK_FORMAT_B8G8R8_USCALED                                 = 32,
    VK_FORMAT_B8G8R8_SSCALED                                 = 33,
    VK_FORMAT_B8G8R8_UINT                                    = 34,
    VK_FORMAT_B8G8R8_SINT                                    = 35,
    VK_FORMAT_B8G8R8_SRGB                                    = 36,
    VK_FORMAT_R8G8B8A8_UNORM                                 = 37,
    VK_FORMAT_R8G8B8A8_SNORM                                 = 38,
    VK_FORMAT_R8G8B8A8_USCALED                               = 39,
    VK_FORMAT_R8G8B8A8_SSCALED                               = 40,
    VK_FORMAT_R8G8B8A8_UINT                                  = 41,
    VK_FORMAT_R8G8B8A8_SINT                                  = 42,
    VK_FORMAT_R8G8B8A8_SRGB                                  = 43,
    VK_FORMAT_B8G8R8A8_UNORM                                 = 44,
    VK_FORMAT_B8G8R8A8_SNORM                                 = 45,
    VK_FORMAT_B8G8R8A8_USCALED                               = 46,
    VK_FORMAT_B8G8R8A8_SSCALED                               = 47,
    VK_FORMAT_B8G8R8A8_UINT                                  = 48,
    VK_FORMAT_B8G8R8A8_SINT                                  = 49,
    VK_FORMAT_B8G8R8A8_SRGB                                  = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32                          = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32                          = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32                        = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32                        = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32                           = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32                           = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32                           = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32                       = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32                       = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32                     = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32                     = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32                        = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32                        = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32                       = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32                       = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32                     = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32                     = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32                        = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32                        = 69,
    VK_FORMAT_R16_UNORM                                      = 70,
    VK_FORMAT_R16_SNORM                                      = 71,
    VK_FORMAT_R16_USCALED                                    = 72,
    VK_FORMAT_R16_SSCALED                                    = 73,
    VK_FORMAT_R16_UINT                                       = 74,
    VK_FORMAT_R16_SINT                                       = 75,
    VK_FORMAT_R16_SFLOAT                                     = 76,
    VK_FORMAT_R16G16_UNORM                                   = 77,
    VK_FORMAT_R16G16_SNORM                                   = 78,
    VK_FORMAT_R16G16_USCALED                                 = 79,
    VK_FORMAT_R16G16_SSCALED                                 = 80,
    VK_FORMAT_R16G16_UINT                                    = 81,
    VK_FORMAT_R16G16_SINT                                    = 82,
    VK_FORMAT_R16G16_SFLOAT                                  = 83,
    VK_FORMAT_R16G16B16_UNORM                                = 84,
    VK_FORMAT_R16G16B16_SNORM                                = 85,
    VK_FORMAT_R16G16B16_USCALED                              = 86,
    VK_FORMAT_R16G16B16_SSCALED                              = 87,
    VK_FORMAT_R16G16B16_UINT                                 = 88,
    VK_FORMAT_R16G16B16_SINT                                 = 89,
    VK_FORMAT_R16G16B16_SFLOAT                               = 90,
    VK_FORMAT_R16G16B16A16_UNORM                             = 91,
    VK_FORMAT_R16G16B16A16_SNORM                             = 92,
    VK_FORMAT_R16G16B16A16_USCALED                           = 93,
    VK_FORMAT_R16G16B16A16_SSCALED                           = 94,
    VK_FORMAT_R16G16B16A16_UINT                              = 95,
    VK_FORMAT_R16G16B16A16_SINT                              = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT                            = 97,
    VK_FORMAT_R32_UINT                                       = 98,
    VK_FORMAT_R32_SINT                                       = 99,
    VK_FORMAT_R32_SFLOAT                                     = 100,
    VK_FORMAT_R32G32_UINT                                    = 101,
    VK_FORMAT_R32G32_SINT                                    = 102,
    VK_FORMAT_R32G32_SFLOAT                                  = 103,
    VK_FORMAT_R32G32B32_UINT                                 = 104,
    VK_FORMAT_R32G32B32_SINT                                 = 105,
    VK_FORMAT_R32G32B32_SFLOAT                               = 106,
    VK_FORMAT_R32G32B32A32_UINT                              = 107,
    VK_FORMAT_R32G32B32A32_SINT                              = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT                            = 109,
    VK_FORMAT_R64_UINT                                       = 110,
    VK_FORMAT_R64_SINT                                       = 111,
    VK_FORMAT_R64_SFLOAT                                     = 112,
    VK_FORMAT_R64G64_UINT                                    = 113,
    VK_FORMAT_R64G64_SINT                                    = 114,
    VK_FORMAT_R64G64_SFLOAT                                  = 115,
    VK_FORMAT_R64G64B64_UINT                                 = 116,
    VK_FORMAT_R64G64B64_SINT                                 = 117,
    VK_FORMAT_R64G64B64_SFLOAT                               = 118,
    VK_FORMAT_R64G64B64A64_UINT                              = 119,
    VK_FORMAT_R64G64B64A64_SINT                              = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT                            = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32                        = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                         = 123,
    VK_FORMAT_D16_UNORM                                      = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32                            = 125,
    VK_FORMAT_D32_SFLOAT                                     = 126,
    VK_FORMAT_S8_UINT                                        = 127,
    VK_FORMAT_D16_UNORM_S8_UINT                              = 128,
    VK_FORMAT_D24_UNORM_S8_UINT                              = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT                             = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK                            = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK                             = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK                           = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK                            = 134,
    VK_FORMAT_BC2_UNORM_BLOCK                                = 135,
    VK_FORMAT_BC2_SRGB_BLOCK                                 = 136,
    VK_FORMAT_BC3_UNORM_BLOCK                                = 137,
    VK_FORMAT_BC3_SRGB_BLOCK                                 = 138,
    VK_FORMAT_BC4_UNORM_BLOCK                                = 139,
    VK_FORMAT_BC4_SNORM_BLOCK                                = 140,
    VK_FORMAT_BC5_UNORM_BLOCK                                = 141,
    VK_FORMAT_BC5_SNORM_BLOCK                                = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK                              = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK                              = 144,
    VK_FORMAT_BC7_UNORM_BLOCK                                = 145,
    VK_FORMAT_BC7_SRGB_BLOCK                                 = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                        = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                         = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                      = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                       = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                      = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                       = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK                            = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK                            = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK                         = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK                         = 156,
    vk_format_astc_4x4_unorm_block                           = 157,
    vk_format_astc_4x4_srgb_block                            = 158,
    vk_format_astc_5x4_unorm_block                           = 159,
    vk_format_astc_5x4_srgb_block                            = 160,
    vk_format_astc_5x5_unorm_block                           = 161,
    vk_format_astc_5x5_srgb_block                            = 162,
    vk_format_astc_6x5_unorm_block                           = 163,
    vk_format_astc_6x5_srgb_block                            = 164,
    vk_format_astc_6x6_unorm_block                           = 165,
    vk_format_astc_6x6_srgb_block                            = 166,
    vk_format_astc_8x5_unorm_block                           = 167,
    vk_format_astc_8x5_srgb_block                            = 168,
    vk_format_astc_8x6_unorm_block                           = 169,
    vk_format_astc_8x6_srgb_block                            = 170,
    vk_format_astc_8x8_unorm_block                           = 171,
    vk_format_astc_8x8_srgb_block                            = 172,
    vk_format_astc_10x5_unorm_block                          = 173,
    vk_format_astc_10x5_srgb_block                           = 174,
    vk_format_astc_10x6_unorm_block                          = 175,
    vk_format_astc_10x6_srgb_block                           = 176,
    vk_format_astc_10x8_unorm_block                          = 177,
    vk_format_astc_10x8_srgb_block                           = 178,
    vk_format_astc_10x10_unorm_block                         = 179,
    vk_format_astc_10x10_srgb_block                          = 180,
    vk_format_astc_12x10_unorm_block                         = 181,
    vk_format_astc_12x10_srgb_block                          = 182,
    vk_format_astc_12x12_unorm_block                         = 183,
    vk_format_astc_12x12_srgb_block                          = 184,
    VK_FORMAT_G8B8G8R8_422_UNORM                             = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM                             = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM                      = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM                       = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM                      = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM                       = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM                      = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16                             = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16                       = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16             = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16         = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16         = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16     = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16      = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16     = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16      = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16     = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16                             = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16                       = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16             = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16         = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16         = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16     = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16      = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16     = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16      = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16     = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM                         = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM                         = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM                   = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM                    = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM                   = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM                    = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM                   = 1000156033,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG                    = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG                    = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG                    = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG                    = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG                     = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG                     = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG                     = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG                     = 1000054007,
    vk_format_astc_4x4_sfloat_block_ext                      = 1000066000,
    vk_format_astc_5x4_sfloat_block_ext                      = 1000066001,
    vk_format_astc_5x5_sfloat_block_ext                      = 1000066002,
    vk_format_astc_6x5_sfloat_block_ext                      = 1000066003,
    vk_format_astc_6x6_sfloat_block_ext                      = 1000066004,
    vk_format_astc_8x5_sfloat_block_ext                      = 1000066005,
    vk_format_astc_8x6_sfloat_block_ext                      = 1000066006,
    vk_format_astc_8x8_sfloat_block_ext                      = 1000066007,
    vk_format_astc_10x5_sfloat_block_ext                     = 1000066008,
    vk_format_astc_10x6_sfloat_block_ext                     = 1000066009,
    vk_format_astc_10x8_sfloat_block_ext                     = 1000066010,
    vk_format_astc_10x10_sfloat_block_ext                    = 1000066011,
    vk_format_astc_12x10_sfloat_block_ext                    = 1000066012,
    vk_format_astc_12x12_sfloat_block_ext                    = 1000066013,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT                      = 1000340000,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT                      = 1000340001,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR                         = VK_FORMAT_G8B8G8R8_422_UNORM,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR                         = VK_FORMAT_B8G8R8G8_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR                  = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR                   = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR                  = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR                   = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR                  = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR                         = VK_FORMAT_R10X6_UNORM_PACK16,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR                   = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR         = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR     = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR     = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR  = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR  = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR                         = VK_FORMAT_R12X4_UNORM_PACK16,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR                   = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR         = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR     = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR     = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR  = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR  = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR                     = VK_FORMAT_G16B16G16R16_422_UNORM,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR                     = VK_FORMAT_B16G16R16G16_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR               = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR                = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR               = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR                = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR               = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    VK_FORMAT_MAX_ENUM                                       = 0x7fffffff
} VkFormat;

typedef enum VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL                 = 0,
    VK_IMAGE_TILING_LINEAR                  = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    VK_IMAGE_TILING_MAX_ENUM                = 0x7fffffff
} VkImageTiling;

typedef enum VkImageType {
    VK_IMAGE_TYPE_1D       = 0,
    VK_IMAGE_TYPE_2D       = 1,
    VK_IMAGE_TYPE_3D       = 2,
    VK_IMAGE_TYPE_MAX_ENUM = 0x7fffffff
} VkImageType;

typedef enum VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER          = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU            = 4,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM       = 0x7fffffff
} VkPhysicalDeviceType;

typedef enum VkQueryType {
    VK_QUERY_TYPE_OCCLUSION                                     = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS                           = 1,
    VK_QUERY_TYPE_TIMESTAMP                                     = 2,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT                 = 1000028004,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR                         = 1000116000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR     = 1000165000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL                       = 1000210000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR,
    VK_QUERY_TYPE_MAX_ENUM                                 = 0x7fffffff
} VkQueryType;

typedef enum VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE  = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_MAX_ENUM   = 0x7fffffff
} VkSharingMode;

typedef enum VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO     = 1,
    VK_COMPONENT_SWIZZLE_ONE      = 2,
    VK_COMPONENT_SWIZZLE_R        = 3,
    VK_COMPONENT_SWIZZLE_G        = 4,
    VK_COMPONENT_SWIZZLE_B        = 5,
    VK_COMPONENT_SWIZZLE_A        = 6,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7fffffff
} VkComponentSwizzle;

typedef enum VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D         = 0,
    VK_IMAGE_VIEW_TYPE_2D         = 1,
    VK_IMAGE_VIEW_TYPE_3D         = 2,
    VK_IMAGE_VIEW_TYPE_CUBE       = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY   = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY   = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM   = 0x7fffffff
} VkImageViewType;

typedef enum VkBlendFactor {
    VK_BLEND_FACTOR_ZERO                     = 0,
    VK_BLEND_FACTOR_ONE                      = 1,
    VK_BLEND_FACTOR_SRC_COLOR                = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR      = 3,
    VK_BLEND_FACTOR_DST_COLOR                = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR      = 5,
    VK_BLEND_FACTOR_SRC_ALPHA                = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA      = 7,
    VK_BLEND_FACTOR_DST_ALPHA                = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA      = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR           = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA           = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE       = 14,
    VK_BLEND_FACTOR_SRC1_COLOR               = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR     = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA               = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA     = 18,
    VK_BLEND_FACTOR_MAX_ENUM                 = 0x7fffffff
} VkBlendFactor;

typedef enum VkBlendOp {
    VK_BLEND_OP_ADD                    = 0,
    VK_BLEND_OP_SUBTRACT               = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT       = 2,
    VK_BLEND_OP_MIN                    = 3,
    VK_BLEND_OP_MAX                    = 4,
    VK_BLEND_OP_ZERO_EXT               = 1000148000,
    VK_BLEND_OP_SRC_EXT                = 1000148001,
    VK_BLEND_OP_DST_EXT                = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT           = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT           = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT             = 1000148005,
    VK_BLEND_OP_DST_IN_EXT             = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT            = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT            = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT           = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT           = 1000148010,
    VK_BLEND_OP_XOR_EXT                = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT           = 1000148012,
    VK_BLEND_OP_SCREEN_EXT             = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT            = 1000148014,
    VK_BLEND_OP_DARKEN_EXT             = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT            = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT         = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT          = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT          = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT          = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT         = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT          = 1000148022,
    VK_BLEND_OP_INVERT_EXT             = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT         = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT        = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT         = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT         = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT        = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT           = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT            = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT            = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT     = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT          = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT     = 1000148034,
    VK_BLEND_OP_PLUS_EXT               = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT       = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT        = 1000148038,
    VK_BLEND_OP_MINUS_EXT              = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT      = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT           = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT         = 1000148042,
    VK_BLEND_OP_RED_EXT                = 1000148043,
    VK_BLEND_OP_GREEN_EXT              = 1000148044,
    VK_BLEND_OP_BLUE_EXT               = 1000148045,
    VK_BLEND_OP_MAX_ENUM               = 0x7fffffff
} VkBlendOp;

typedef enum VkCompareOp {
    VK_COMPARE_OP_NEVER            = 0,
    VK_COMPARE_OP_LESS             = 1,
    VK_COMPARE_OP_EQUAL            = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL    = 3,
    VK_COMPARE_OP_GREATER          = 4,
    VK_COMPARE_OP_NOT_EQUAL        = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS           = 7,
    VK_COMPARE_OP_MAX_ENUM         = 0x7fffffff
} VkCompareOp;

typedef enum VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT                         = 0,
    VK_DYNAMIC_STATE_SCISSOR                          = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH                       = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS                       = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS                  = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS                     = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK             = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK               = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE                = 8,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV            = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT            = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT             = 1000143000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV  = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV             = 1000205001,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT                 = 1000259000,
    VK_DYNAMIC_STATE_CULL_MODE_EXT                    = 1000267000,
    VK_DYNAMIC_STATE_FRONT_FACE_EXT                   = 1000267001,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT           = 1000267002,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT          = 1000267003,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT           = 1000267004,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT  = 1000267005,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT            = 1000267006,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT           = 1000267007,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT             = 1000267008,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT     = 1000267009,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT          = 1000267010,
    VK_DYNAMIC_STATE_STENCIL_OP_EXT                   = 1000267011,
    VK_DYNAMIC_STATE_MAX_ENUM                         = 0x7fffffff
} VkDynamicState;

typedef enum VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE         = 1,
    VK_FRONT_FACE_MAX_ENUM          = 0x7fffffff
} VkFrontFace;

typedef enum VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX   = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7fffffff
} VkVertexInputRate;

typedef enum VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST                    = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST                     = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP                    = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST                 = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP                = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN                  = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY      = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY     = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY  = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST                    = 10,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM                      = 0x7fffffff
} VkPrimitiveTopology;

typedef enum VkPolygonMode {
    VK_POLYGON_MODE_FILL              = 0,
    VK_POLYGON_MODE_LINE              = 1,
    VK_POLYGON_MODE_POINT             = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_MAX_ENUM          = 0x7fffffff
} VkPolygonMode;

typedef enum VkStencilOp {
    VK_STENCIL_OP_KEEP                = 0,
    VK_STENCIL_OP_ZERO                = 1,
    VK_STENCIL_OP_REPLACE             = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT              = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP  = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP  = 7,
    VK_STENCIL_OP_MAX_ENUM            = 0x7fffffff
} VkStencilOp;

typedef enum VkLogicOp {
    VK_LOGIC_OP_CLEAR         = 0,
    VK_LOGIC_OP_AND           = 1,
    VK_LOGIC_OP_AND_REVERSE   = 2,
    VK_LOGIC_OP_COPY          = 3,
    VK_LOGIC_OP_AND_INVERTED  = 4,
    VK_LOGIC_OP_NO_OP         = 5,
    VK_LOGIC_OP_XOR           = 6,
    VK_LOGIC_OP_OR            = 7,
    VK_LOGIC_OP_NOR           = 8,
    VK_LOGIC_OP_EQUIVALENT    = 9,
    VK_LOGIC_OP_INVERT        = 10,
    VK_LOGIC_OP_OR_REVERSE    = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED   = 13,
    VK_LOGIC_OP_NAND          = 14,
    VK_LOGIC_OP_SET           = 15,
    VK_LOGIC_OP_MAX_ENUM      = 0x7fffffff
} VkLogicOp;

typedef enum VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK   = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK      = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK        = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE      = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE        = 5,
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT        = 1000287003,
    VK_BORDER_COLOR_INT_CUSTOM_EXT          = 1000287004,
    VK_BORDER_COLOR_MAX_ENUM                = 0x7fffffff
} VkBorderColor;

typedef enum VkFilter {
    VK_FILTER_NEAREST   = 0,
    VK_FILTER_LINEAR    = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
    VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
    VK_FILTER_MAX_ENUM  = 0x7fffffff
} VkFilter;

typedef enum VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT                   = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT          = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE            = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER          = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE     = 4,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM                 = 0x7fffffff
} VkSamplerAddressMode;

typedef enum VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST  = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR   = 1,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7fffffff
} VkSamplerMipmapMode;

typedef enum VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER                    = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER     = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE              = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE              = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER       = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER       = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER             = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER             = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC     = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC     = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT           = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT   = 1000138000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV  = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,
    VK_DESCRIPTOR_TYPE_MAX_ENUM                   = 0x7fffffff
} VkDescriptorType;

typedef enum VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD      = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR     = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM  = 0x7fffffff
} VkAttachmentLoadOp;

typedef enum VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE     = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM  = 0x7fffffff
} VkAttachmentStoreOp;

typedef enum VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS        = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE         = 1,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV  = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
    VK_PIPELINE_BIND_POINT_MAX_ENUM        = 0x7fffffff
} VkPipelineBindPoint;

typedef enum VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY   = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM  = 0x7fffffff
} VkCommandBufferLevel;

typedef enum VkIndexType {
    VK_INDEX_TYPE_UINT16    = 0,
    VK_INDEX_TYPE_UINT32    = 1,
    VK_INDEX_TYPE_NONE_KHR  = 1000165000,
    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
    VK_INDEX_TYPE_NONE_NV   = VK_INDEX_TYPE_NONE_KHR,
    VK_INDEX_TYPE_MAX_ENUM  = 0x7fffffff
} VkIndexType;

typedef enum VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE                    = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_MAX_ENUM                  = 0x7fffffff
} VkSubpassContents;

typedef enum VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT                 = 0x00000001,
    VK_ACCESS_INDEX_READ_BIT                            = 0x00000002,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT                 = 0x00000004,
    VK_ACCESS_UNIFORM_READ_BIT                          = 0x00000008,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT                 = 0x00000010,
    VK_ACCESS_SHADER_READ_BIT                           = 0x00000020,
    VK_ACCESS_SHADER_WRITE_BIT                          = 0x00000040,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT                 = 0x00000080,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT                = 0x00000100,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT         = 0x00000200,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT        = 0x00000400,
    VK_ACCESS_TRANSFER_READ_BIT                         = 0x00000800,
    VK_ACCESS_TRANSFER_WRITE_BIT                        = 0x00001000,
    VK_ACCESS_HOST_READ_BIT                             = 0x00002000,
    VK_ACCESS_HOST_WRITE_BIT                            = 0x00004000,
    VK_ACCESS_MEMORY_READ_BIT                           = 0x00008000,
    VK_ACCESS_MEMORY_WRITE_BIT                          = 0x00010000,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT          = 0x02000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT   = 0x04000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT  = 0x08000000,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT        = 0x00100000,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR       = 0x00200000,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR      = 0x00400000,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV            = 0x00800000,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT         = 0x01000000,
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV            = 0x00020000,
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV           = 0x00040000,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV        = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV       = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
    VK_ACCESS_FLAG_BITS_MAX_ENUM                        = 0x7fffffff
} VkAccessFlagBits;
typedef VkFlags VkAccessFlags;

typedef enum VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT              = 0x00000001,
    VK_IMAGE_ASPECT_DEPTH_BIT              = 0x00000002,
    VK_IMAGE_ASPECT_STENCIL_BIT            = 0x00000004,
    VK_IMAGE_ASPECT_METADATA_BIT           = 0x00000008,
    VK_IMAGE_ASPECT_PLANE_0_BIT            = 0x00000010,
    VK_IMAGE_ASPECT_PLANE_1_BIT            = 0x00000020,
    VK_IMAGE_ASPECT_PLANE_2_BIT            = 0x00000040,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR        = VK_IMAGE_ASPECT_PLANE_0_BIT,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR        = VK_IMAGE_ASPECT_PLANE_1_BIT,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR        = VK_IMAGE_ASPECT_PLANE_2_BIT,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM     = 0x7fffffff
} VkImageAspectFlagBits;
typedef VkFlags VkImageAspectFlags;

typedef enum VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT                                                           = 0x00000001,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT                                                           = 0x00000002,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT                                                    = 0x00000004,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT                                                    = 0x00000008,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT                                                    = 0x00000010,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT                                             = 0x00000020,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT                                                           = 0x00000040,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT                                                        = 0x00000080,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT                                                  = 0x00000100,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT                                                = 0x00000200,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT                                                                = 0x00000400,
    VK_FORMAT_FEATURE_BLIT_DST_BIT                                                                = 0x00000800,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT                                             = 0x00001000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT                                                            = 0x00004000,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT                                                            = 0x00008000,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT                                                 = 0x00020000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT                            = 0x00040000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT           = 0x00080000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT           = 0x00100000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
    VK_FORMAT_FEATURE_DISJOINT_BIT                                                                = 0x00400000,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT                                                  = 0x00800000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT                                             = 0x00010000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG                                          = 0x00002000,
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR                                = 0x20000000,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT                                                = 0x01000000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR                = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR                = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR     = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR                   = VK_FORMAT_FEATURE_DISJOINT_BIT,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR     = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM                 = 0x7fffffff
} VkFormatFeatureFlagBits;
typedef VkFlags VkFormatFeatureFlags;

typedef enum VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT                        = 0x00000001,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT                      = 0x00000002,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT                        = 0x00000004,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT                        = 0x00000008,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT                       = 0x00000010,
    VK_IMAGE_CREATE_ALIAS_BIT                                 = 0x00000400,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT           = 0x00000040,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT                   = 0x00000020,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT           = 0x00000080,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT                        = 0x00000100,
    VK_IMAGE_CREATE_PROTECTED_BIT                             = 0x00000800,
    VK_IMAGE_CREATE_DISJOINT_BIT                              = 0x00000200,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV                     = 0x00002000,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT                        = 0x00004000,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR       = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR               = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR       = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR                    = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR                          = VK_IMAGE_CREATE_DISJOINT_BIT,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR                             = VK_IMAGE_CREATE_ALIAS_BIT,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM                        = 0x7fffffff
} VkImageCreateFlagBits;
typedef VkFlags VkImageCreateFlags;

typedef enum VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT              = 0x00000001,
    VK_SAMPLE_COUNT_2_BIT              = 0x00000002,
    VK_SAMPLE_COUNT_4_BIT              = 0x00000004,
    VK_SAMPLE_COUNT_8_BIT              = 0x00000008,
    VK_SAMPLE_COUNT_16_BIT             = 0x00000010,
    VK_SAMPLE_COUNT_32_BIT             = 0x00000020,
    VK_SAMPLE_COUNT_64_BIT             = 0x00000040,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkSampleCountFlagBits;
typedef VkFlags VkSampleCountFlags;

typedef enum VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT             = 0x00000001,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT             = 0x00000002,
    VK_IMAGE_USAGE_SAMPLED_BIT                  = 0x00000004,
    VK_IMAGE_USAGE_STORAGE_BIT                  = 0x00000008,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT         = 0x00000010,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT     = 0x00000040,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT         = 0x00000080,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV    = 0x00000100,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM           = 0x7fffffff
} VkImageUsageFlagBits;
typedef VkFlags VkImageUsageFlags;
typedef VkFlags VkInstanceCreateFlags;

typedef enum VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT       = 0x00000001,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT     = 0x00000002,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM     = 0x7fffffff
} VkMemoryHeapFlagBits;
typedef VkFlags VkMemoryHeapFlags;

typedef enum VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT        = 0x00000001,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT        = 0x00000002,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT       = 0x00000004,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT         = 0x00000008,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT    = 0x00000010,
    VK_MEMORY_PROPERTY_PROTECTED_BIT           = 0x00000020,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM      = 0x7fffffff
} VkMemoryPropertyFlagBits;
typedef VkFlags VkMemoryPropertyFlags;

typedef enum VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT       = 0x00000001,
    VK_QUEUE_COMPUTE_BIT        = 0x00000002,
    VK_QUEUE_TRANSFER_BIT       = 0x00000004,
    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
    VK_QUEUE_PROTECTED_BIT      = 0x00000010,
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkQueueFlagBits;
typedef VkFlags VkQueueFlags;
typedef VkFlags VkDeviceCreateFlags;

typedef enum VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT      = 0x00000001,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkDeviceQueueCreateFlagBits;
typedef VkFlags VkDeviceQueueCreateFlags;

typedef enum VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT                      = 0x00000001,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT                    = 0x00000002,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT                     = 0x00000004,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT                    = 0x00000008,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT      = 0x00000010,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT   = 0x00000020,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT                  = 0x00000040,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT                  = 0x00000080,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT             = 0x00000100,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT              = 0x00000200,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT          = 0x00000400,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT                   = 0x00000800,
    VK_PIPELINE_STAGE_TRANSFER_BIT                         = 0x00001000,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT                   = 0x00002000,
    VK_PIPELINE_STAGE_HOST_BIT                             = 0x00004000,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT                     = 0x00008000,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT                     = 0x00010000,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT           = 0x01000000,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT        = 0x00040000,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR           = 0x00200000,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV            = 0x00400000,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV                   = 0x00080000,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV                   = 0x00100000,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT     = 0x00800000,
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV            = 0x00020000,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV            = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV  = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM                   = 0x7fffffff
} VkPipelineStageFlagBits;
typedef VkFlags VkPipelineStageFlags;
typedef VkFlags VkMemoryMapFlags;

typedef enum VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT       = 0x00000001,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkSparseMemoryBindFlagBits;
typedef VkFlags VkSparseMemoryBindFlags;

typedef enum VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT         = 0x00000001,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT       = 0x00000002,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM         = 0x7fffffff
} VkSparseImageFormatFlagBits;
typedef VkFlags VkSparseImageFormatFlags;

typedef enum VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT       = 0x00000001,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkFenceCreateFlagBits;
typedef VkFlags VkFenceCreateFlags;
typedef VkFlags VkSemaphoreCreateFlags;
typedef VkFlags VkEventCreateFlags;

typedef enum VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT                    = 0x00000001,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT                  = 0x00000002,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT                  = 0x00000004,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT                = 0x00000008,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT                 = 0x00000010,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT                       = 0x00000020,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT                        = 0x00000040,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT                = 0x00000080,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT        = 0x00000100,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT                 = 0x00000400,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM                             = 0x7fffffff
} VkQueryPipelineStatisticFlagBits;
typedef VkFlags VkQueryPipelineStatisticFlags;
typedef VkFlags VkQueryPoolCreateFlags;

typedef enum VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT                = 0x00000001,
    VK_QUERY_RESULT_WAIT_BIT              = 0x00000002,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
    VK_QUERY_RESULT_PARTIAL_BIT           = 0x00000008,
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM    = 0x7fffffff
} VkQueryResultFlagBits;
typedef VkFlags VkQueryResultFlags;

typedef enum VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT                    = 0x00000001,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT                  = 0x00000002,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT                    = 0x00000004,
    VK_BUFFER_CREATE_PROTECTED_BIT                         = 0x00000008,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT     = 0x00000010,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM                    = 0x7fffffff
} VkBufferCreateFlagBits;
typedef VkFlags VkBufferCreateFlags;

typedef enum VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT                          = 0x00000001,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT                          = 0x00000002,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT                  = 0x00000004,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT                  = 0x00000008,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT                        = 0x00000010,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT                        = 0x00000020,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT                          = 0x00000040,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT                         = 0x00000080,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT                       = 0x00000100,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT                 = 0x00020000,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT         = 0x00000800,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT             = 0x00000200,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR                       = 0x00000400,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV                        = VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT             = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR             = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM                        = 0x7fffffff
} VkBufferUsageFlagBits;
typedef VkFlags VkBufferUsageFlags;
typedef VkFlags VkBufferViewCreateFlags;

typedef enum VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT  = 0x00000001,
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 0x00000002,
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM                    = 0x7fffffff
} VkImageViewCreateFlagBits;
typedef VkFlags VkImageViewCreateFlags;

typedef enum VkShaderModuleCreateFlagBits {
    VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkShaderModuleCreateFlagBits;
typedef VkFlags VkShaderModuleCreateFlags;

typedef enum VkPipelineCacheCreateFlagBits {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 0x00000001,
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM              = 0x7fffffff
} VkPipelineCacheCreateFlagBits;
typedef VkFlags VkPipelineCacheCreateFlags;

typedef enum VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT              = 0x00000001,
    VK_COLOR_COMPONENT_G_BIT              = 0x00000002,
    VK_COLOR_COMPONENT_B_BIT              = 0x00000004,
    VK_COLOR_COMPONENT_A_BIT              = 0x00000008,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkColorComponentFlagBits;
typedef VkFlags VkColorComponentFlags;

typedef enum VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT                         = 0x00000001,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT                            = 0x00000002,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT                                   = 0x00000004,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT                 = 0x00000008,
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT                                = 0x00000010,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR      = 0x00004000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR  = 0x00008000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR         = 0x00010000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR               = 0x00001000,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR                   = 0x00002000,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV                             = 0x00000020,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR                       = 0x00000040,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR         = 0x00000080,
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV                         = 0x00040000,
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR                                  = 0x00000800,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT        = 0x00000100,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT                  = 0x00000200,
    VK_PIPELINE_CREATE_DISPATCH_BASE                                    = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR                    = VK_PIPELINE_CREATE_DISPATCH_BASE,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM                   = 0x7fffffff
} VkPipelineCreateFlagBits;
typedef VkFlags VkPipelineCreateFlags;

typedef enum VkPipelineShaderStageCreateFlagBits {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000001,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT      = 0x00000002,
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM                  = 0x7fffffff
} VkPipelineShaderStageCreateFlagBits;
typedef VkFlags VkPipelineShaderStageCreateFlags;

typedef enum VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT                  = 0x00000001,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT    = 0x00000002,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    VK_SHADER_STAGE_GEOMETRY_BIT                = 0x00000008,
    VK_SHADER_STAGE_FRAGMENT_BIT                = 0x00000010,
    VK_SHADER_STAGE_COMPUTE_BIT                 = 0x00000020,
    VK_SHADER_STAGE_ALL_GRAPHICS                = 0x0000001f,
    VK_SHADER_STAGE_ALL                         = 0x7fffffff,
    VK_SHADER_STAGE_RAYGEN_BIT_KHR              = 0x00000100,
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR             = 0x00000200,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR         = 0x00000400,
    VK_SHADER_STAGE_MISS_BIT_KHR                = 0x00000800,
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR        = 0x00001000,
    VK_SHADER_STAGE_CALLABLE_BIT_KHR            = 0x00002000,
    VK_SHADER_STAGE_TASK_BIT_NV                 = 0x00000040,
    VK_SHADER_STAGE_MESH_BIT_NV                 = 0x00000080,
    VK_SHADER_STAGE_RAYGEN_BIT_NV               = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
    VK_SHADER_STAGE_ANY_HIT_BIT_NV              = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV          = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
    VK_SHADER_STAGE_MISS_BIT_NV                 = VK_SHADER_STAGE_MISS_BIT_KHR,
    VK_SHADER_STAGE_INTERSECTION_BIT_NV         = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
    VK_SHADER_STAGE_CALLABLE_BIT_NV             = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM          = 0x7fffffff
} VkShaderStageFlagBits;

typedef enum VkCullModeFlagBits {
    VK_CULL_MODE_NONE               = 0,
    VK_CULL_MODE_FRONT_BIT          = 0x00000001,
    VK_CULL_MODE_BACK_BIT           = 0x00000002,
    VK_CULL_MODE_FRONT_AND_BACK     = 0x00000003,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkCullModeFlagBits;
typedef VkFlags VkCullModeFlags;
typedef VkFlags VkPipelineVertexInputStateCreateFlags;
typedef VkFlags VkPipelineInputAssemblyStateCreateFlags;
typedef VkFlags VkPipelineTessellationStateCreateFlags;
typedef VkFlags VkPipelineViewportStateCreateFlags;
typedef VkFlags VkPipelineRasterizationStateCreateFlags;
typedef VkFlags VkPipelineMultisampleStateCreateFlags;
typedef VkFlags VkPipelineDepthStencilStateCreateFlags;
typedef VkFlags VkPipelineColorBlendStateCreateFlags;
typedef VkFlags VkPipelineDynamicStateCreateFlags;
typedef VkFlags VkPipelineLayoutCreateFlags;
typedef VkFlags VkShaderStageFlags;

typedef enum VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT                       = 0x00000001,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002,
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM                       = 0x7fffffff
} VkSamplerCreateFlagBits;
typedef VkFlags VkSamplerCreateFlags;

typedef enum VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT   = 0x00000001,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT     = 0x00000002,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM        = 0x7fffffff
} VkDescriptorPoolCreateFlagBits;
typedef VkFlags VkDescriptorPoolCreateFlags;
typedef VkFlags VkDescriptorPoolResetFlags;

typedef enum VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR    = 0x00000001,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT =
        VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkDescriptorSetLayoutCreateFlagBits;
typedef VkFlags VkDescriptorSetLayoutCreateFlags;

typedef enum VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT      = 0x00000001,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkAttachmentDescriptionFlagBits;
typedef VkFlags VkAttachmentDescriptionFlags;

typedef enum VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT        = 0x00000001,
    VK_DEPENDENCY_DEVICE_GROUP_BIT     = 0x00000004,
    VK_DEPENDENCY_VIEW_LOCAL_BIT       = 0x00000002,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR   = VK_DEPENDENCY_VIEW_LOCAL_BIT,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM   = 0x7fffffff
} VkDependencyFlagBits;
typedef VkFlags VkDependencyFlags;

typedef enum VkFramebufferCreateFlagBits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT      = 0x00000001,
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR  = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkFramebufferCreateFlagBits;
typedef VkFlags VkFramebufferCreateFlags;

typedef enum VkRenderPassCreateFlagBits {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002,
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkRenderPassCreateFlagBits;
typedef VkFlags VkRenderPassCreateFlags;

typedef enum VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX      = 0x00000001,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM         = 0x00000004,
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM          = 0x00000008,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM               = 0x7fffffff
} VkSubpassDescriptionFlagBits;
typedef VkFlags VkSubpassDescriptionFlags;

typedef enum VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT            = 0x00000001,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT            = 0x00000004,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} VkCommandPoolCreateFlagBits;
typedef VkFlags VkCommandPoolCreateFlags;

typedef enum VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM    = 0x7fffffff
} VkCommandPoolResetFlagBits;
typedef VkFlags VkCommandPoolResetFlags;

typedef enum VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT      = 0x00000001,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT     = 0x00000004,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} VkCommandBufferUsageFlagBits;
typedef VkFlags VkCommandBufferUsageFlags;

typedef enum VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT        = 0x00000001,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkQueryControlFlagBits;
typedef VkFlags VkQueryControlFlags;

typedef enum VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM    = 0x7fffffff
} VkCommandBufferResetFlagBits;
typedef VkFlags VkCommandBufferResetFlags;

typedef enum VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT          = 0x00000001,
    VK_STENCIL_FACE_BACK_BIT           = 0x00000002,
    VK_STENCIL_FACE_FRONT_AND_BACK     = 0x00000003,
    VK_STENCIL_FRONT_AND_BACK          = VK_STENCIL_FACE_FRONT_AND_BACK,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkStencilFaceFlagBits;
typedef VkFlags VkStencilFaceFlags;
typedef struct VkExtent2D {
    uint32_t width;
    uint32_t height;
} VkExtent2D;

typedef struct VkExtent3D {
    uint32_t width;
    uint32_t height;
    uint32_t depth;
} VkExtent3D;

typedef struct VkOffset2D {
    int32_t x;
    int32_t y;
} VkOffset2D;

typedef struct VkOffset3D {
    int32_t x;
    int32_t y;
    int32_t z;
} VkOffset3D;

typedef struct VkRect2D {
    VkOffset2D offset;
    VkExtent2D extent;
} VkRect2D;

typedef struct VkBaseInStructure {
    VkStructureType                 s_type;
    const struct VkBaseInStructure* p_next;
} VkBaseInStructure;

typedef struct VkBaseOutStructure {
    VkStructureType            s_type;
    struct VkBaseOutStructure* p_next;
} VkBaseOutStructure;

typedef struct VkBufferMemoryBarrier {
    VkStructureType s_type;
    const void*     p_next;
    VkAccessFlags   src_access_mask;
    VkAccessFlags   dst_access_mask;
    uint32_t        src_queue_family_index;
    uint32_t        dst_queue_family_index;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkDeviceSize    size;
} VkBufferMemoryBarrier;

typedef struct VkDispatchIndirectCommand {
    uint32_t x;
    uint32_t y;
    uint32_t z;
} VkDispatchIndirectCommand;

typedef struct VkDrawIndexedIndirectCommand {
    uint32_t index_count;
    uint32_t instance_count;
    uint32_t first_index;
    int32_t  vertex_offset;
    uint32_t first_instance;
} VkDrawIndexedIndirectCommand;

typedef struct VkDrawIndirectCommand {
    uint32_t vertex_count;
    uint32_t instance_count;
    uint32_t first_vertex;
    uint32_t first_instance;
} VkDrawIndirectCommand;

typedef struct VkImageSubresourceRange {
    VkImageAspectFlags aspect_mask;
    uint32_t           base_mip_level;
    uint32_t           level_count;
    uint32_t           base_array_layer;
    uint32_t           layer_count;
} VkImageSubresourceRange;

typedef struct VkImageMemoryBarrier {
    VkStructureType         s_type;
    const void*             p_next;
    VkAccessFlags           src_access_mask;
    VkAccessFlags           dst_access_mask;
    VkImageLayout           old_layout;
    VkImageLayout           new_layout;
    uint32_t                src_queue_family_index;
    uint32_t                dst_queue_family_index;
    VkImage                 image;
    VkImageSubresourceRange subresource_range;
} VkImageMemoryBarrier;

typedef struct VkMemoryBarrier {
    VkStructureType s_type;
    const void*     p_next;
    VkAccessFlags   src_access_mask;
    VkAccessFlags   dst_access_mask;
} VkMemoryBarrier;

typedef void*(VKAPI_PTR* pfn_vk_allocation_function)(void* p_user_data, size_t size, size_t alignment,
                                                     VkSystemAllocationScope allocation_scope);

typedef void(VKAPI_PTR* pfn_vk_free_function)(void* p_user_data, void* p_memory);

typedef void(VKAPI_PTR* pfn_vk_internal_allocation_notification)(void* p_user_data, size_t size,
                                                                 VkInternalAllocationType allocation_type,
                                                                 VkSystemAllocationScope  allocation_scope);

typedef void(VKAPI_PTR* pfn_vk_internal_free_notification)(void* p_user_data, size_t size,
                                                           VkInternalAllocationType allocation_type,
                                                           VkSystemAllocationScope  allocation_scope);

typedef void*(VKAPI_PTR* pfn_vk_reallocation_function)(void* p_user_data, void* p_original, size_t size,
                                                       size_t alignment, VkSystemAllocationScope allocation_scope);

typedef void(VKAPI_PTR* pfn_vk_void_function)(void);
typedef struct VkAllocationCallbacks {
    void*                                   p_user_data;
    pfn_vk_allocation_function              pfn_allocation;
    pfn_vk_reallocation_function            pfn_reallocation;
    pfn_vk_free_function                    pfn_free;
    pfn_vk_internal_allocation_notification pfn_internal_allocation;
    pfn_vk_internal_free_notification       pfn_internal_free;
} VkAllocationCallbacks;

typedef struct VkApplicationInfo {
    VkStructureType s_type;
    const void*     p_next;
    const char*     p_application_name;
    uint32_t        application_version;
    const char*     p_engine_name;
    uint32_t        engine_version;
    uint32_t        api_version;
} VkApplicationInfo;

typedef struct VkFormatProperties {
    VkFormatFeatureFlags linear_tiling_features;
    VkFormatFeatureFlags optimal_tiling_features;
    VkFormatFeatureFlags buffer_features;
} VkFormatProperties;

typedef struct VkImageFormatProperties {
    VkExtent3D         max_extent;
    uint32_t           max_mip_levels;
    uint32_t           max_array_layers;
    VkSampleCountFlags sample_counts;
    VkDeviceSize       max_resource_size;
} VkImageFormatProperties;

typedef struct VkInstanceCreateInfo {
    VkStructureType          s_type;
    const void*              p_next;
    VkInstanceCreateFlags    flags;
    const VkApplicationInfo* p_application_info;
    uint32_t                 enabled_layer_count;
    const char* const*       pp_enabled_layer_names;
    uint32_t                 enabled_extension_count;
    const char* const*       pp_enabled_extension_names;
} VkInstanceCreateInfo;

typedef struct VkMemoryHeap {
    VkDeviceSize      size;
    VkMemoryHeapFlags flags;
} VkMemoryHeap;

typedef struct VkMemoryType {
    VkMemoryPropertyFlags property_flags;
    uint32_t              heap_index;
} VkMemoryType;

typedef struct VkPhysicalDeviceFeatures {
    VkBool32 robust_buffer_access;
    VkBool32 full_draw_index_uint32;
    VkBool32 image_cube_array;
    VkBool32 independent_blend;
    VkBool32 geometry_shader;
    VkBool32 tessellation_shader;
    VkBool32 sample_rate_shading;
    VkBool32 dual_src_blend;
    VkBool32 logic_op;
    VkBool32 multi_draw_indirect;
    VkBool32 draw_indirect_first_instance;
    VkBool32 depth_clamp;
    VkBool32 depth_bias_clamp;
    VkBool32 fill_mode_non_solid;
    VkBool32 depth_bounds;
    VkBool32 wide_lines;
    VkBool32 large_points;
    VkBool32 alpha_to_one;
    VkBool32 multi_viewport;
    VkBool32 sampler_anisotropy;
    VkBool32 texture_compression_etc2;
    VkBool32 texture_compression_astc_ldr;
    VkBool32 texture_compression_bc;
    VkBool32 occlusion_query_precise;
    VkBool32 pipeline_statistics_query;
    VkBool32 vertex_pipeline_stores_and_atomics;
    VkBool32 fragment_stores_and_atomics;
    VkBool32 shader_tessellation_and_geometry_point_size;
    VkBool32 shader_image_gather_extended;
    VkBool32 shader_storage_image_extended_formats;
    VkBool32 shader_storage_image_multisample;
    VkBool32 shader_storage_image_read_without_format;
    VkBool32 shader_storage_image_write_without_format;
    VkBool32 shader_uniform_buffer_array_dynamic_indexing;
    VkBool32 shader_sampled_image_array_dynamic_indexing;
    VkBool32 shader_storage_buffer_array_dynamic_indexing;
    VkBool32 shader_storage_image_array_dynamic_indexing;
    VkBool32 shader_clip_distance;
    VkBool32 shader_cull_distance;
    VkBool32 shader_float64;
    VkBool32 shader_int64;
    VkBool32 shader_int16;
    VkBool32 shader_resource_residency;
    VkBool32 shader_resource_min_lod;
    VkBool32 sparse_binding;
    VkBool32 sparse_residency_buffer;
    VkBool32 sparse_residency_image2d;
    VkBool32 sparse_residency_image3d;
    VkBool32 sparse_residency2samples;
    VkBool32 sparse_residency4samples;
    VkBool32 sparse_residency8samples;
    VkBool32 sparse_residency16samples;
    VkBool32 sparse_residency_aliased;
    VkBool32 variable_multisample_rate;
    VkBool32 inherited_queries;
} VkPhysicalDeviceFeatures;

typedef struct VkPhysicalDeviceLimits {
    uint32_t           max_image_dimension1d;
    uint32_t           max_image_dimension2d;
    uint32_t           max_image_dimension3d;
    uint32_t           max_image_dimension_cube;
    uint32_t           max_image_array_layers;
    uint32_t           max_texel_buffer_elements;
    uint32_t           max_uniform_buffer_range;
    uint32_t           max_storage_buffer_range;
    uint32_t           max_push_constants_size;
    uint32_t           max_memory_allocation_count;
    uint32_t           max_sampler_allocation_count;
    VkDeviceSize       buffer_image_granularity;
    VkDeviceSize       sparse_address_space_size;
    uint32_t           max_bound_descriptor_sets;
    uint32_t           max_per_stage_descriptor_samplers;
    uint32_t           max_per_stage_descriptor_uniform_buffers;
    uint32_t           max_per_stage_descriptor_storage_buffers;
    uint32_t           max_per_stage_descriptor_sampled_images;
    uint32_t           max_per_stage_descriptor_storage_images;
    uint32_t           max_per_stage_descriptor_input_attachments;
    uint32_t           max_per_stage_resources;
    uint32_t           max_descriptor_set_samplers;
    uint32_t           max_descriptor_set_uniform_buffers;
    uint32_t           max_descriptor_set_uniform_buffers_dynamic;
    uint32_t           max_descriptor_set_storage_buffers;
    uint32_t           max_descriptor_set_storage_buffers_dynamic;
    uint32_t           max_descriptor_set_sampled_images;
    uint32_t           max_descriptor_set_storage_images;
    uint32_t           max_descriptor_set_input_attachments;
    uint32_t           max_vertex_input_attributes;
    uint32_t           max_vertex_input_bindings;
    uint32_t           max_vertex_input_attribute_offset;
    uint32_t           max_vertex_input_binding_stride;
    uint32_t           max_vertex_output_components;
    uint32_t           max_tessellation_generation_level;
    uint32_t           max_tessellation_patch_size;
    uint32_t           max_tessellation_control_per_vertex_input_components;
    uint32_t           max_tessellation_control_per_vertex_output_components;
    uint32_t           max_tessellation_control_per_patch_output_components;
    uint32_t           max_tessellation_control_total_output_components;
    uint32_t           max_tessellation_evaluation_input_components;
    uint32_t           max_tessellation_evaluation_output_components;
    uint32_t           max_geometry_shader_invocations;
    uint32_t           max_geometry_input_components;
    uint32_t           max_geometry_output_components;
    uint32_t           max_geometry_output_vertices;
    uint32_t           max_geometry_total_output_components;
    uint32_t           max_fragment_input_components;
    uint32_t           max_fragment_output_attachments;
    uint32_t           max_fragment_dual_src_attachments;
    uint32_t           max_fragment_combined_output_resources;
    uint32_t           max_compute_shared_memory_size;
    uint32_t           max_compute_work_group_count[3];
    uint32_t           max_compute_work_group_invocations;
    uint32_t           max_compute_work_group_size[3];
    uint32_t           sub_pixel_precision_bits;
    uint32_t           sub_texel_precision_bits;
    uint32_t           mipmap_precision_bits;
    uint32_t           max_draw_indexed_index_value;
    uint32_t           max_draw_indirect_count;
    float              max_sampler_lod_bias;
    float              max_sampler_anisotropy;
    uint32_t           max_viewports;
    uint32_t           max_viewport_dimensions[2];
    float              viewport_bounds_range[2];
    uint32_t           viewport_sub_pixel_bits;
    size_t             min_memory_map_alignment;
    VkDeviceSize       min_texel_buffer_offset_alignment;
    VkDeviceSize       min_uniform_buffer_offset_alignment;
    VkDeviceSize       min_storage_buffer_offset_alignment;
    int32_t            min_texel_offset;
    uint32_t           max_texel_offset;
    int32_t            min_texel_gather_offset;
    uint32_t           max_texel_gather_offset;
    float              min_interpolation_offset;
    float              max_interpolation_offset;
    uint32_t           sub_pixel_interpolation_offset_bits;
    uint32_t           max_framebuffer_width;
    uint32_t           max_framebuffer_height;
    uint32_t           max_framebuffer_layers;
    VkSampleCountFlags framebuffer_color_sample_counts;
    VkSampleCountFlags framebuffer_depth_sample_counts;
    VkSampleCountFlags framebuffer_stencil_sample_counts;
    VkSampleCountFlags framebuffer_no_attachments_sample_counts;
    uint32_t           max_color_attachments;
    VkSampleCountFlags sampled_image_color_sample_counts;
    VkSampleCountFlags sampled_image_integer_sample_counts;
    VkSampleCountFlags sampled_image_depth_sample_counts;
    VkSampleCountFlags sampled_image_stencil_sample_counts;
    VkSampleCountFlags storage_image_sample_counts;
    uint32_t           max_sample_mask_words;
    VkBool32           timestamp_compute_and_graphics;
    float              timestamp_period;
    uint32_t           max_clip_distances;
    uint32_t           max_cull_distances;
    uint32_t           max_combined_clip_and_cull_distances;
    uint32_t           discrete_queue_priorities;
    float              point_size_range[2];
    float              line_width_range[2];
    float              point_size_granularity;
    float              line_width_granularity;
    VkBool32           strict_lines;
    VkBool32           standard_sample_locations;
    VkDeviceSize       optimal_buffer_copy_offset_alignment;
    VkDeviceSize       optimal_buffer_copy_row_pitch_alignment;
    VkDeviceSize       non_coherent_atom_size;
} VkPhysicalDeviceLimits;

typedef struct VkPhysicalDeviceMemoryProperties {
    uint32_t     memory_type_count;
    VkMemoryType memory_types[VK_MAX_MEMORY_TYPES];
    uint32_t     memory_heap_count;
    VkMemoryHeap memory_heaps[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryProperties;

typedef struct VkPhysicalDeviceSparseProperties {
    VkBool32 residency_standard2dblock_shape;
    VkBool32 residency_standard2dmultisample_block_shape;
    VkBool32 residency_standard3dblock_shape;
    VkBool32 residency_aligned_mip_size;
    VkBool32 residency_non_resident_strict;
} VkPhysicalDeviceSparseProperties;

typedef struct VkPhysicalDeviceProperties {
    uint32_t                         api_version;
    uint32_t                         driver_version;
    uint32_t                         vendor_id;
    uint32_t                         device_id;
    VkPhysicalDeviceType             device_type;
    char                             device_name[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
    uint8_t                          pipeline_cache_uuid[VK_UUID_SIZE];
    VkPhysicalDeviceLimits           limits;
    VkPhysicalDeviceSparseProperties sparse_properties;
} VkPhysicalDeviceProperties;

typedef struct VkQueueFamilyProperties {
    VkQueueFlags queue_flags;
    uint32_t     queue_count;
    uint32_t     timestamp_valid_bits;
    VkExtent3D   min_image_transfer_granularity;
} VkQueueFamilyProperties;

typedef struct VkDeviceQueueCreateInfo {
    VkStructureType          s_type;
    const void*              p_next;
    VkDeviceQueueCreateFlags flags;
    uint32_t                 queue_family_index;
    uint32_t                 queue_count;
    const float*             p_queue_priorities;
} VkDeviceQueueCreateInfo;

typedef struct VkDeviceCreateInfo {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkDeviceCreateFlags             flags;
    uint32_t                        queue_create_info_count;
    const VkDeviceQueueCreateInfo*  p_queue_create_infos;
    uint32_t                        enabled_layer_count;
    const char* const*              pp_enabled_layer_names;
    uint32_t                        enabled_extension_count;
    const char* const*              pp_enabled_extension_names;
    const VkPhysicalDeviceFeatures* p_enabled_features;
} VkDeviceCreateInfo;

typedef struct VkExtensionProperties {
    char     extension_name[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t spec_version;
} VkExtensionProperties;

typedef struct VkLayerProperties {
    char     layer_name[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t spec_version;
    uint32_t implementation_version;
    char     description[VK_MAX_DESCRIPTION_SIZE];
} VkLayerProperties;

typedef struct VkSubmitInfo {
    VkStructureType             s_type;
    const void*                 p_next;
    uint32_t                    wait_semaphore_count;
    const VkSemaphore*          p_wait_semaphores;
    const VkPipelineStageFlags* p_wait_dst_stage_mask;
    uint32_t                    command_buffer_count;
    const VkCommandBuffer*      p_command_buffers;
    uint32_t                    signal_semaphore_count;
    const VkSemaphore*          p_signal_semaphores;
} VkSubmitInfo;

typedef struct VkMappedMemoryRange {
    VkStructureType s_type;
    const void*     p_next;
    VkDeviceMemory  memory;
    VkDeviceSize    offset;
    VkDeviceSize    size;
} VkMappedMemoryRange;

typedef struct VkMemoryAllocateInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkDeviceSize    allocation_size;
    uint32_t        memory_type_index;
} VkMemoryAllocateInfo;

typedef struct VkMemoryRequirements {
    VkDeviceSize size;
    VkDeviceSize alignment;
    uint32_t     memory_type_bits;
} VkMemoryRequirements;

typedef struct VkSparseMemoryBind {
    VkDeviceSize            resource_offset;
    VkDeviceSize            size;
    VkDeviceMemory          memory;
    VkDeviceSize            memory_offset;
    VkSparseMemoryBindFlags flags;
} VkSparseMemoryBind;

typedef struct VkSparseBufferMemoryBindInfo {
    VkBuffer                  buffer;
    uint32_t                  bind_count;
    const VkSparseMemoryBind* p_binds;
} VkSparseBufferMemoryBindInfo;

typedef struct VkSparseImageOpaqueMemoryBindInfo {
    VkImage                   image;
    uint32_t                  bind_count;
    const VkSparseMemoryBind* p_binds;
} VkSparseImageOpaqueMemoryBindInfo;

typedef struct VkImageSubresource {
    VkImageAspectFlags aspect_mask;
    uint32_t           mip_level;
    uint32_t           array_layer;
} VkImageSubresource;

typedef struct VkSparseImageMemoryBind {
    VkImageSubresource      subresource;
    VkOffset3D              offset;
    VkExtent3D              extent;
    VkDeviceMemory          memory;
    VkDeviceSize            memory_offset;
    VkSparseMemoryBindFlags flags;
} VkSparseImageMemoryBind;

typedef struct VkSparseImageMemoryBindInfo {
    VkImage                        image;
    uint32_t                       bind_count;
    const VkSparseImageMemoryBind* p_binds;
} VkSparseImageMemoryBindInfo;

typedef struct VkBindSparseInfo {
    VkStructureType                          s_type;
    const void*                              p_next;
    uint32_t                                 wait_semaphore_count;
    const VkSemaphore*                       p_wait_semaphores;
    uint32_t                                 buffer_bind_count;
    const VkSparseBufferMemoryBindInfo*      p_buffer_binds;
    uint32_t                                 image_opaque_bind_count;
    const VkSparseImageOpaqueMemoryBindInfo* p_image_opaque_binds;
    uint32_t                                 image_bind_count;
    const VkSparseImageMemoryBindInfo*       p_image_binds;
    uint32_t                                 signal_semaphore_count;
    const VkSemaphore*                       p_signal_semaphores;
} VkBindSparseInfo;

typedef struct VkSparseImageFormatProperties {
    VkImageAspectFlags       aspect_mask;
    VkExtent3D               image_granularity;
    VkSparseImageFormatFlags flags;
} VkSparseImageFormatProperties;

typedef struct VkSparseImageMemoryRequirements {
    VkSparseImageFormatProperties format_properties;
    uint32_t                      image_mip_tail_first_lod;
    VkDeviceSize                  image_mip_tail_size;
    VkDeviceSize                  image_mip_tail_offset;
    VkDeviceSize                  image_mip_tail_stride;
} VkSparseImageMemoryRequirements;

typedef struct VkFenceCreateInfo {
    VkStructureType    s_type;
    const void*        p_next;
    VkFenceCreateFlags flags;
} VkFenceCreateInfo;

typedef struct VkSemaphoreCreateInfo {
    VkStructureType        s_type;
    const void*            p_next;
    VkSemaphoreCreateFlags flags;
} VkSemaphoreCreateInfo;

typedef struct VkEventCreateInfo {
    VkStructureType    s_type;
    const void*        p_next;
    VkEventCreateFlags flags;
} VkEventCreateInfo;

typedef struct VkQueryPoolCreateInfo {
    VkStructureType               s_type;
    const void*                   p_next;
    VkQueryPoolCreateFlags        flags;
    VkQueryType                   query_type;
    uint32_t                      query_count;
    VkQueryPipelineStatisticFlags pipeline_statistics;
} VkQueryPoolCreateInfo;

typedef struct VkBufferCreateInfo {
    VkStructureType     s_type;
    const void*         p_next;
    VkBufferCreateFlags flags;
    VkDeviceSize        size;
    VkBufferUsageFlags  usage;
    VkSharingMode       sharing_mode;
    uint32_t            queue_family_index_count;
    const uint32_t*     p_queue_family_indices;
} VkBufferCreateInfo;

typedef struct VkBufferViewCreateInfo {
    VkStructureType         s_type;
    const void*             p_next;
    VkBufferViewCreateFlags flags;
    VkBuffer                buffer;
    VkFormat                format;
    VkDeviceSize            offset;
    VkDeviceSize            range;
} VkBufferViewCreateInfo;

typedef struct VkImageCreateInfo {
    VkStructureType       s_type;
    const void*           p_next;
    VkImageCreateFlags    flags;
    VkImageType           image_type;
    VkFormat              format;
    VkExtent3D            extent;
    uint32_t              mip_levels;
    uint32_t              array_layers;
    VkSampleCountFlagBits samples;
    VkImageTiling         tiling;
    VkImageUsageFlags     usage;
    VkSharingMode         sharing_mode;
    uint32_t              queue_family_index_count;
    const uint32_t*       p_queue_family_indices;
    VkImageLayout         initial_layout;
} VkImageCreateInfo;

typedef struct VkSubresourceLayout {
    VkDeviceSize offset;
    VkDeviceSize size;
    VkDeviceSize row_pitch;
    VkDeviceSize array_pitch;
    VkDeviceSize depth_pitch;
} VkSubresourceLayout;

typedef struct VkComponentMapping {
    VkComponentSwizzle r;
    VkComponentSwizzle g;
    VkComponentSwizzle b;
    VkComponentSwizzle a;
} VkComponentMapping;

typedef struct VkImageViewCreateInfo {
    VkStructureType         s_type;
    const void*             p_next;
    VkImageViewCreateFlags  flags;
    VkImage                 image;
    VkImageViewType         view_type;
    VkFormat                format;
    VkComponentMapping      components;
    VkImageSubresourceRange subresource_range;
} VkImageViewCreateInfo;

typedef struct VkShaderModuleCreateInfo {
    VkStructureType           s_type;
    const void*               p_next;
    VkShaderModuleCreateFlags flags;
    size_t                    code_size;
    const uint32_t*           p_code;
} VkShaderModuleCreateInfo;

typedef struct VkPipelineCacheCreateInfo {
    VkStructureType            s_type;
    const void*                p_next;
    VkPipelineCacheCreateFlags flags;
    size_t                     initial_data_size;
    const void*                p_initial_data;
} VkPipelineCacheCreateInfo;

typedef struct VkSpecializationMapEntry {
    uint32_t constant_id;
    uint32_t offset;
    size_t   size;
} VkSpecializationMapEntry;

typedef struct VkSpecializationInfo {
    uint32_t                        map_entry_count;
    const VkSpecializationMapEntry* p_map_entries;
    size_t                          data_size;
    const void*                     p_data;
} VkSpecializationInfo;

typedef struct VkPipelineShaderStageCreateInfo {
    VkStructureType                  s_type;
    const void*                      p_next;
    VkPipelineShaderStageCreateFlags flags;
    VkShaderStageFlagBits            stage;
    VkShaderModule                   module;
    const char*                      p_name;
    const VkSpecializationInfo*      p_specialization_info;
} VkPipelineShaderStageCreateInfo;

typedef struct VkComputePipelineCreateInfo {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkPipelineCreateFlags           flags;
    VkPipelineShaderStageCreateInfo stage;
    VkPipelineLayout                layout;
    VkPipeline                      base_pipeline_handle;
    int32_t                         base_pipeline_index;
} VkComputePipelineCreateInfo;

typedef struct VkVertexInputBindingDescription {
    uint32_t          binding;
    uint32_t          stride;
    VkVertexInputRate input_rate;
} VkVertexInputBindingDescription;

typedef struct VkVertexInputAttributeDescription {
    uint32_t location;
    uint32_t binding;
    VkFormat format;
    uint32_t offset;
} VkVertexInputAttributeDescription;

typedef struct VkPipelineVertexInputStateCreateInfo {
    VkStructureType                          s_type;
    const void*                              p_next;
    VkPipelineVertexInputStateCreateFlags    flags;
    uint32_t                                 vertex_binding_description_count;
    const VkVertexInputBindingDescription*   p_vertex_binding_descriptions;
    uint32_t                                 vertex_attribute_description_count;
    const VkVertexInputAttributeDescription* p_vertex_attribute_descriptions;
} VkPipelineVertexInputStateCreateInfo;

typedef struct VkPipelineInputAssemblyStateCreateInfo {
    VkStructureType                         s_type;
    const void*                             p_next;
    VkPipelineInputAssemblyStateCreateFlags flags;
    VkPrimitiveTopology                     topology;
    VkBool32                                primitive_restart_enable;
} VkPipelineInputAssemblyStateCreateInfo;

typedef struct VkPipelineTessellationStateCreateInfo {
    VkStructureType                        s_type;
    const void*                            p_next;
    VkPipelineTessellationStateCreateFlags flags;
    uint32_t                               patch_control_points;
} VkPipelineTessellationStateCreateInfo;

typedef struct VkViewport {
    float x;
    float y;
    float width;
    float height;
    float min_depth;
    float max_depth;
} VkViewport;

typedef struct VkPipelineViewportStateCreateInfo {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkPipelineViewportStateCreateFlags flags;
    uint32_t                           viewport_count;
    const VkViewport*                  p_viewports;
    uint32_t                           scissor_count;
    const VkRect2D*                    p_scissors;
} VkPipelineViewportStateCreateInfo;

typedef struct VkPipelineRasterizationStateCreateInfo {
    VkStructureType                         s_type;
    const void*                             p_next;
    VkPipelineRasterizationStateCreateFlags flags;
    VkBool32                                depth_clamp_enable;
    VkBool32                                rasterizer_discard_enable;
    VkPolygonMode                           polygon_mode;
    VkCullModeFlags                         cull_mode;
    VkFrontFace                             front_face;
    VkBool32                                depth_bias_enable;
    float                                   depth_bias_constant_factor;
    float                                   depth_bias_clamp;
    float                                   depth_bias_slope_factor;
    float                                   line_width;
} VkPipelineRasterizationStateCreateInfo;

typedef struct VkPipelineMultisampleStateCreateInfo {
    VkStructureType                       s_type;
    const void*                           p_next;
    VkPipelineMultisampleStateCreateFlags flags;
    VkSampleCountFlagBits                 rasterization_samples;
    VkBool32                              sample_shading_enable;
    float                                 min_sample_shading;
    const VkSampleMask*                   p_sample_mask;
    VkBool32                              alpha_to_coverage_enable;
    VkBool32                              alpha_to_one_enable;
} VkPipelineMultisampleStateCreateInfo;

typedef struct VkStencilOpState {
    VkStencilOp fail_op;
    VkStencilOp pass_op;
    VkStencilOp depth_fail_op;
    VkCompareOp compare_op;
    uint32_t    compare_mask;
    uint32_t    write_mask;
    uint32_t    reference;
} VkStencilOpState;

typedef struct VkPipelineDepthStencilStateCreateInfo {
    VkStructureType                        s_type;
    const void*                            p_next;
    VkPipelineDepthStencilStateCreateFlags flags;
    VkBool32                               depth_test_enable;
    VkBool32                               depth_write_enable;
    VkCompareOp                            depth_compare_op;
    VkBool32                               depth_bounds_test_enable;
    VkBool32                               stencil_test_enable;
    VkStencilOpState                       front;
    VkStencilOpState                       back;
    float                                  min_depth_bounds;
    float                                  max_depth_bounds;
} VkPipelineDepthStencilStateCreateInfo;

typedef struct VkPipelineColorBlendAttachmentState {
    VkBool32              blend_enable;
    VkBlendFactor         src_color_blend_factor;
    VkBlendFactor         dst_color_blend_factor;
    VkBlendOp             color_blend_op;
    VkBlendFactor         src_alpha_blend_factor;
    VkBlendFactor         dst_alpha_blend_factor;
    VkBlendOp             alpha_blend_op;
    VkColorComponentFlags color_write_mask;
} VkPipelineColorBlendAttachmentState;

typedef struct VkPipelineColorBlendStateCreateInfo {
    VkStructureType                            s_type;
    const void*                                p_next;
    VkPipelineColorBlendStateCreateFlags       flags;
    VkBool32                                   logic_op_enable;
    VkLogicOp                                  logic_op;
    uint32_t                                   attachment_count;
    const VkPipelineColorBlendAttachmentState* p_attachments;
    float                                      blend_constants[4];
} VkPipelineColorBlendStateCreateInfo;

typedef struct VkPipelineDynamicStateCreateInfo {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkPipelineDynamicStateCreateFlags flags;
    uint32_t                          dynamic_state_count;
    const VkDynamicState*             p_dynamic_states;
} VkPipelineDynamicStateCreateInfo;

typedef struct VkGraphicsPipelineCreateInfo {
    VkStructureType                               s_type;
    const void*                                   p_next;
    VkPipelineCreateFlags                         flags;
    uint32_t                                      stage_count;
    const VkPipelineShaderStageCreateInfo*        p_stages;
    const VkPipelineVertexInputStateCreateInfo*   p_vertex_input_state;
    const VkPipelineInputAssemblyStateCreateInfo* p_input_assembly_state;
    const VkPipelineTessellationStateCreateInfo*  p_tessellation_state;
    const VkPipelineViewportStateCreateInfo*      p_viewport_state;
    const VkPipelineRasterizationStateCreateInfo* p_rasterization_state;
    const VkPipelineMultisampleStateCreateInfo*   p_multisample_state;
    const VkPipelineDepthStencilStateCreateInfo*  p_depth_stencil_state;
    const VkPipelineColorBlendStateCreateInfo*    p_color_blend_state;
    const VkPipelineDynamicStateCreateInfo*       p_dynamic_state;
    VkPipelineLayout                              layout;
    VkRenderPass                                  render_pass;
    uint32_t                                      subpass;
    VkPipeline                                    base_pipeline_handle;
    int32_t                                       base_pipeline_index;
} VkGraphicsPipelineCreateInfo;

typedef struct VkPushConstantRange {
    VkShaderStageFlags stage_flags;
    uint32_t           offset;
    uint32_t           size;
} VkPushConstantRange;

typedef struct VkPipelineLayoutCreateInfo {
    VkStructureType              s_type;
    const void*                  p_next;
    VkPipelineLayoutCreateFlags  flags;
    uint32_t                     set_layout_count;
    const VkDescriptorSetLayout* p_set_layouts;
    uint32_t                     push_constant_range_count;
    const VkPushConstantRange*   p_push_constant_ranges;
} VkPipelineLayoutCreateInfo;

typedef struct VkSamplerCreateInfo {
    VkStructureType      s_type;
    const void*          p_next;
    VkSamplerCreateFlags flags;
    VkFilter             mag_filter;
    VkFilter             min_filter;
    VkSamplerMipmapMode  mipmap_mode;
    VkSamplerAddressMode address_mode_u;
    VkSamplerAddressMode address_mode_v;
    VkSamplerAddressMode address_mode_w;
    float                mip_lod_bias;
    VkBool32             anisotropy_enable;
    float                max_anisotropy;
    VkBool32             compare_enable;
    VkCompareOp          compare_op;
    float                min_lod;
    float                max_lod;
    VkBorderColor        border_color;
    VkBool32             unnormalized_coordinates;
} VkSamplerCreateInfo;

typedef struct VkCopyDescriptorSet {
    VkStructureType s_type;
    const void*     p_next;
    VkDescriptorSet src_set;
    uint32_t        src_binding;
    uint32_t        src_array_element;
    VkDescriptorSet dst_set;
    uint32_t        dst_binding;
    uint32_t        dst_array_element;
    uint32_t        descriptor_count;
} VkCopyDescriptorSet;

typedef struct VkDescriptorBufferInfo {
    VkBuffer     buffer;
    VkDeviceSize offset;
    VkDeviceSize range;
} VkDescriptorBufferInfo;

typedef struct VkDescriptorImageInfo {
    VkSampler     sampler;
    VkImageView   image_view;
    VkImageLayout image_layout;
} VkDescriptorImageInfo;

typedef struct VkDescriptorPoolSize {
    VkDescriptorType type;
    uint32_t         descriptor_count;
} VkDescriptorPoolSize;

typedef struct VkDescriptorPoolCreateInfo {
    VkStructureType             s_type;
    const void*                 p_next;
    VkDescriptorPoolCreateFlags flags;
    uint32_t                    max_sets;
    uint32_t                    pool_size_count;
    const VkDescriptorPoolSize* p_pool_sizes;
} VkDescriptorPoolCreateInfo;

typedef struct VkDescriptorSetAllocateInfo {
    VkStructureType              s_type;
    const void*                  p_next;
    VkDescriptorPool             descriptor_pool;
    uint32_t                     descriptor_set_count;
    const VkDescriptorSetLayout* p_set_layouts;
} VkDescriptorSetAllocateInfo;

typedef struct VkDescriptorSetLayoutBinding {
    uint32_t           binding;
    VkDescriptorType   descriptor_type;
    uint32_t           descriptor_count;
    VkShaderStageFlags stage_flags;
    const VkSampler*   p_immutable_samplers;
} VkDescriptorSetLayoutBinding;

typedef struct VkDescriptorSetLayoutCreateInfo {
    VkStructureType                     s_type;
    const void*                         p_next;
    VkDescriptorSetLayoutCreateFlags    flags;
    uint32_t                            binding_count;
    const VkDescriptorSetLayoutBinding* p_bindings;
} VkDescriptorSetLayoutCreateInfo;

typedef struct VkWriteDescriptorSet {
    VkStructureType               s_type;
    const void*                   p_next;
    VkDescriptorSet               dst_set;
    uint32_t                      dst_binding;
    uint32_t                      dst_array_element;
    uint32_t                      descriptor_count;
    VkDescriptorType              descriptor_type;
    const VkDescriptorImageInfo*  p_image_info;
    const VkDescriptorBufferInfo* p_buffer_info;
    const VkBufferView*           p_texel_buffer_view;
} VkWriteDescriptorSet;

typedef struct VkAttachmentDescription {
    VkAttachmentDescriptionFlags flags;
    VkFormat                     format;
    VkSampleCountFlagBits        samples;
    VkAttachmentLoadOp           load_op;
    VkAttachmentStoreOp          store_op;
    VkAttachmentLoadOp           stencil_load_op;
    VkAttachmentStoreOp          stencil_store_op;
    VkImageLayout                initial_layout;
    VkImageLayout                final_layout;
} VkAttachmentDescription;

typedef struct VkAttachmentReference {
    uint32_t      attachment;
    VkImageLayout layout;
} VkAttachmentReference;

typedef struct VkFramebufferCreateInfo {
    VkStructureType          s_type;
    const void*              p_next;
    VkFramebufferCreateFlags flags;
    VkRenderPass             render_pass;
    uint32_t                 attachment_count;
    const VkImageView*       p_attachments;
    uint32_t                 width;
    uint32_t                 height;
    uint32_t                 layers;
} VkFramebufferCreateInfo;

typedef struct VkSubpassDescription {
    VkSubpassDescriptionFlags    flags;
    VkPipelineBindPoint          pipeline_bind_point;
    uint32_t                     input_attachment_count;
    const VkAttachmentReference* p_input_attachments;
    uint32_t                     color_attachment_count;
    const VkAttachmentReference* p_color_attachments;
    const VkAttachmentReference* p_resolve_attachments;
    const VkAttachmentReference* p_depth_stencil_attachment;
    uint32_t                     preserve_attachment_count;
    const uint32_t*              p_preserve_attachments;
} VkSubpassDescription;

typedef struct VkSubpassDependency {
    uint32_t             src_subpass;
    uint32_t             dst_subpass;
    VkPipelineStageFlags src_stage_mask;
    VkPipelineStageFlags dst_stage_mask;
    VkAccessFlags        src_access_mask;
    VkAccessFlags        dst_access_mask;
    VkDependencyFlags    dependency_flags;
} VkSubpassDependency;

typedef struct VkRenderPassCreateInfo {
    VkStructureType                s_type;
    const void*                    p_next;
    VkRenderPassCreateFlags        flags;
    uint32_t                       attachment_count;
    const VkAttachmentDescription* p_attachments;
    uint32_t                       subpass_count;
    const VkSubpassDescription*    p_subpasses;
    uint32_t                       dependency_count;
    const VkSubpassDependency*     p_dependencies;
} VkRenderPassCreateInfo;

typedef struct VkCommandPoolCreateInfo {
    VkStructureType          s_type;
    const void*              p_next;
    VkCommandPoolCreateFlags flags;
    uint32_t                 queue_family_index;
} VkCommandPoolCreateInfo;

typedef struct VkCommandBufferAllocateInfo {
    VkStructureType      s_type;
    const void*          p_next;
    VkCommandPool        command_pool;
    VkCommandBufferLevel level;
    uint32_t             command_buffer_count;
} VkCommandBufferAllocateInfo;

typedef struct VkCommandBufferInheritanceInfo {
    VkStructureType               s_type;
    const void*                   p_next;
    VkRenderPass                  render_pass;
    uint32_t                      subpass;
    VkFramebuffer                 framebuffer;
    VkBool32                      occlusion_query_enable;
    VkQueryControlFlags           query_flags;
    VkQueryPipelineStatisticFlags pipeline_statistics;
} VkCommandBufferInheritanceInfo;

typedef struct VkCommandBufferBeginInfo {
    VkStructureType                       s_type;
    const void*                           p_next;
    VkCommandBufferUsageFlags             flags;
    const VkCommandBufferInheritanceInfo* p_inheritance_info;
} VkCommandBufferBeginInfo;

typedef struct VkBufferCopy {
    VkDeviceSize src_offset;
    VkDeviceSize dst_offset;
    VkDeviceSize size;
} VkBufferCopy;

typedef struct VkImageSubresourceLayers {
    VkImageAspectFlags aspect_mask;
    uint32_t           mip_level;
    uint32_t           base_array_layer;
    uint32_t           layer_count;
} VkImageSubresourceLayers;

typedef struct VkBufferImageCopy {
    VkDeviceSize             buffer_offset;
    uint32_t                 buffer_row_length;
    uint32_t                 buffer_image_height;
    VkImageSubresourceLayers image_subresource;
    VkOffset3D               image_offset;
    VkExtent3D               image_extent;
} VkBufferImageCopy;

typedef union VkClearColorValue {
    float    float32[4];
    int32_t  int32[4];
    uint32_t uint32[4];
} VkClearColorValue;

typedef struct VkClearDepthStencilValue {
    float    depth;
    uint32_t stencil;
} VkClearDepthStencilValue;

typedef union VkClearValue {
    VkClearColorValue        color;
    VkClearDepthStencilValue depth_stencil;
} VkClearValue;

typedef struct VkClearAttachment {
    VkImageAspectFlags aspect_mask;
    uint32_t           color_attachment;
    VkClearValue       clear_value;
} VkClearAttachment;

typedef struct VkClearRect {
    VkRect2D rect;
    uint32_t base_array_layer;
    uint32_t layer_count;
} VkClearRect;

typedef struct VkImageBlit {
    VkImageSubresourceLayers src_subresource;
    VkOffset3D               src_offsets[2];
    VkImageSubresourceLayers dst_subresource;
    VkOffset3D               dst_offsets[2];
} VkImageBlit;

typedef struct VkImageCopy {
    VkImageSubresourceLayers src_subresource;
    VkOffset3D               src_offset;
    VkImageSubresourceLayers dst_subresource;
    VkOffset3D               dst_offset;
    VkExtent3D               extent;
} VkImageCopy;

typedef struct VkImageResolve {
    VkImageSubresourceLayers src_subresource;
    VkOffset3D               src_offset;
    VkImageSubresourceLayers dst_subresource;
    VkOffset3D               dst_offset;
    VkExtent3D               extent;
} VkImageResolve;

typedef struct VkRenderPassBeginInfo {
    VkStructureType     s_type;
    const void*         p_next;
    VkRenderPass        render_pass;
    VkFramebuffer       framebuffer;
    VkRect2D            render_area;
    uint32_t            clear_value_count;
    const VkClearValue* p_clear_values;
} VkRenderPassBeginInfo;

typedef VkResult(VKAPI_PTR* pfn_vk_create_instance)(const VkInstanceCreateInfo*  p_create_info,
                                                    const VkAllocationCallbacks* p_allocator, VkInstance* p_instance);
typedef void(VKAPI_PTR* pfn_vk_destroy_instance)(VkInstance instance, const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_physical_devices)(VkInstance instance, uint32_t* p_physical_device_count,
                                                               VkPhysicalDevice* p_physical_devices);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_features)(VkPhysicalDevice          physical_device,
                                                             VkPhysicalDeviceFeatures* p_features);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_format_properties)(VkPhysicalDevice physical_device, VkFormat format,
                                                                      VkFormatProperties* p_format_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_image_format_properties)(
    VkPhysicalDevice physical_device, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage,
    VkImageCreateFlags flags, VkImageFormatProperties* p_image_format_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_properties)(VkPhysicalDevice            physical_device,
                                                               VkPhysicalDeviceProperties* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_properties)(
    VkPhysicalDevice physical_device, uint32_t* p_queue_family_property_count,
    VkQueueFamilyProperties* p_queue_family_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_memory_properties)(
    VkPhysicalDevice physical_device, VkPhysicalDeviceMemoryProperties* p_memory_properties);
typedef pfn_vk_void_function(VKAPI_PTR* pfn_vk_get_instance_proc_addr)(VkInstance instance, const char* p_name);
typedef pfn_vk_void_function(VKAPI_PTR* pfn_vk_get_device_proc_addr)(VkDevice device, const char* p_name);
typedef VkResult(VKAPI_PTR* pfn_vk_create_device)(VkPhysicalDevice             physical_device,
                                                  const VkDeviceCreateInfo*    p_create_info,
                                                  const VkAllocationCallbacks* p_allocator, VkDevice* p_device);
typedef void(VKAPI_PTR* pfn_vk_destroy_device)(VkDevice device, const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_instance_extension_properties)(const char*            p_layer_name,
                                                                            uint32_t*              p_property_count,
                                                                            VkExtensionProperties* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_device_extension_properties)(VkPhysicalDevice       physical_device,
                                                                          const char*            p_layer_name,
                                                                          uint32_t*              p_property_count,
                                                                          VkExtensionProperties* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_instance_layer_properties)(uint32_t*          p_property_count,
                                                                        VkLayerProperties* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_device_layer_properties)(VkPhysicalDevice   physical_device,
                                                                      uint32_t*          p_property_count,
                                                                      VkLayerProperties* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_device_queue)(VkDevice device, uint32_t queue_family_index, uint32_t queue_index,
                                                 VkQueue* p_queue);
typedef VkResult(VKAPI_PTR* pfn_vk_queue_submit)(VkQueue queue, uint32_t submit_count, const VkSubmitInfo* p_submits,
                                                 VkFence fence);
typedef VkResult(VKAPI_PTR* pfn_vk_queue_wait_idle)(VkQueue queue);
typedef VkResult(VKAPI_PTR* pfn_vk_device_wait_idle)(VkDevice device);
typedef VkResult(VKAPI_PTR* pfn_vk_allocate_memory)(VkDevice device, const VkMemoryAllocateInfo* p_allocate_info,
                                                    const VkAllocationCallbacks* p_allocator, VkDeviceMemory* p_memory);
typedef void(VKAPI_PTR* pfn_vk_free_memory)(VkDevice device, VkDeviceMemory memory,
                                            const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_map_memory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset,
                                               VkDeviceSize size, VkMemoryMapFlags flags, void** pp_data);
typedef void(VKAPI_PTR* pfn_vk_unmap_memory)(VkDevice device, VkDeviceMemory memory);
typedef VkResult(VKAPI_PTR* pfn_vk_flush_mapped_memory_ranges)(VkDevice device, uint32_t memory_range_count,
                                                               const VkMappedMemoryRange* p_memory_ranges);
typedef VkResult(VKAPI_PTR* pfn_vk_invalidate_mapped_memory_ranges)(VkDevice device, uint32_t memory_range_count,
                                                                    const VkMappedMemoryRange* p_memory_ranges);
typedef void(VKAPI_PTR* pfn_vk_get_device_memory_commitment)(VkDevice device, VkDeviceMemory memory,
                                                             VkDeviceSize* p_committed_memory_in_bytes);
typedef VkResult(VKAPI_PTR* pfn_vk_bind_buffer_memory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory,
                                                       VkDeviceSize memory_offset);
typedef VkResult(VKAPI_PTR* pfn_vk_bind_image_memory)(VkDevice device, VkImage image, VkDeviceMemory memory,
                                                      VkDeviceSize memory_offset);
typedef void(VKAPI_PTR* pfn_vk_get_buffer_memory_requirements)(VkDevice device, VkBuffer buffer,
                                                               VkMemoryRequirements* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_memory_requirements)(VkDevice device, VkImage image,
                                                              VkMemoryRequirements* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_sparse_memory_requirements)(
    VkDevice device, VkImage image, uint32_t* p_sparse_memory_requirement_count,
    VkSparseImageMemoryRequirements* p_sparse_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_sparse_image_format_properties)(
    VkPhysicalDevice physical_device, VkFormat format, VkImageType type, VkSampleCountFlagBits samples,
    VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* p_property_count,
    VkSparseImageFormatProperties* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_queue_bind_sparse)(VkQueue queue, uint32_t bind_info_count,
                                                      const VkBindSparseInfo* p_bind_info, VkFence fence);
typedef VkResult(VKAPI_PTR* pfn_vk_create_fence)(VkDevice device, const VkFenceCreateInfo* p_create_info,
                                                 const VkAllocationCallbacks* p_allocator, VkFence* p_fence);
typedef void(VKAPI_PTR* pfn_vk_destroy_fence)(VkDevice device, VkFence fence, const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_reset_fences)(VkDevice device, uint32_t fence_count, const VkFence* p_fences);
typedef VkResult(VKAPI_PTR* pfn_vk_get_fence_status)(VkDevice device, VkFence fence);
typedef VkResult(VKAPI_PTR* pfn_vk_wait_for_fences)(VkDevice device, uint32_t fence_count, const VkFence* p_fences,
                                                    VkBool32 wait_all, uint64_t timeout);
typedef VkResult(VKAPI_PTR* pfn_vk_create_semaphore)(VkDevice device, const VkSemaphoreCreateInfo* p_create_info,
                                                     const VkAllocationCallbacks* p_allocator,
                                                     VkSemaphore*                 p_semaphore);
typedef void(VKAPI_PTR* pfn_vk_destroy_semaphore)(VkDevice device, VkSemaphore semaphore,
                                                  const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_event)(VkDevice device, const VkEventCreateInfo* p_create_info,
                                                 const VkAllocationCallbacks* p_allocator, VkEvent* p_event);
typedef void(VKAPI_PTR* pfn_vk_destroy_event)(VkDevice device, VkEvent event, const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_get_event_status)(VkDevice device, VkEvent event);
typedef VkResult(VKAPI_PTR* pfn_vk_set_event)(VkDevice device, VkEvent event);
typedef VkResult(VKAPI_PTR* pfn_vk_reset_event)(VkDevice device, VkEvent event);
typedef VkResult(VKAPI_PTR* pfn_vk_create_query_pool)(VkDevice device, const VkQueryPoolCreateInfo* p_create_info,
                                                      const VkAllocationCallbacks* p_allocator,
                                                      VkQueryPool*                 p_query_pool);
typedef void(VKAPI_PTR* pfn_vk_destroy_query_pool)(VkDevice device, VkQueryPool query_pool,
                                                   const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_get_query_pool_results)(VkDevice device, VkQueryPool query_pool,
                                                           uint32_t first_query, uint32_t query_count, size_t data_size,
                                                           void* p_data, VkDeviceSize stride, VkQueryResultFlags flags);
typedef VkResult(VKAPI_PTR* pfn_vk_create_buffer)(VkDevice device, const VkBufferCreateInfo* p_create_info,
                                                  const VkAllocationCallbacks* p_allocator, VkBuffer* p_buffer);
typedef void(VKAPI_PTR* pfn_vk_destroy_buffer)(VkDevice device, VkBuffer buffer,
                                               const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_buffer_view)(VkDevice device, const VkBufferViewCreateInfo* p_create_info,
                                                       const VkAllocationCallbacks* p_allocator, VkBufferView* p_view);
typedef void(VKAPI_PTR* pfn_vk_destroy_buffer_view)(VkDevice device, VkBufferView buffer_view,
                                                    const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_image)(VkDevice device, const VkImageCreateInfo* p_create_info,
                                                 const VkAllocationCallbacks* p_allocator, VkImage* p_image);
typedef void(VKAPI_PTR* pfn_vk_destroy_image)(VkDevice device, VkImage image, const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_get_image_subresource_layout)(VkDevice device, VkImage image,
                                                             const VkImageSubresource* p_subresource,
                                                             VkSubresourceLayout*      p_layout);
typedef VkResult(VKAPI_PTR* pfn_vk_create_image_view)(VkDevice device, const VkImageViewCreateInfo* p_create_info,
                                                      const VkAllocationCallbacks* p_allocator, VkImageView* p_view);
typedef void(VKAPI_PTR* pfn_vk_destroy_image_view)(VkDevice device, VkImageView image_view,
                                                   const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_shader_module)(VkDevice device, const VkShaderModuleCreateInfo* p_create_info,
                                                         const VkAllocationCallbacks* p_allocator,
                                                         VkShaderModule*              p_shader_module);
typedef void(VKAPI_PTR* pfn_vk_destroy_shader_module)(VkDevice device, VkShaderModule shader_module,
                                                      const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_pipeline_cache)(VkDevice                         device,
                                                          const VkPipelineCacheCreateInfo* p_create_info,
                                                          const VkAllocationCallbacks*     p_allocator,
                                                          VkPipelineCache*                 p_pipeline_cache);
typedef void(VKAPI_PTR* pfn_vk_destroy_pipeline_cache)(VkDevice device, VkPipelineCache pipeline_cache,
                                                       const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_get_pipeline_cache_data)(VkDevice device, VkPipelineCache pipeline_cache,
                                                            size_t* p_data_size, void* p_data);
typedef VkResult(VKAPI_PTR* pfn_vk_merge_pipeline_caches)(VkDevice device, VkPipelineCache dst_cache,
                                                          uint32_t               src_cache_count,
                                                          const VkPipelineCache* p_src_caches);
typedef VkResult(VKAPI_PTR* pfn_vk_create_graphics_pipelines)(VkDevice device, VkPipelineCache pipeline_cache,
                                                              uint32_t                            create_info_count,
                                                              const VkGraphicsPipelineCreateInfo* p_create_infos,
                                                              const VkAllocationCallbacks*        p_allocator,
                                                              VkPipeline*                         p_pipelines);
typedef VkResult(VKAPI_PTR* pfn_vk_create_compute_pipelines)(VkDevice device, VkPipelineCache pipeline_cache,
                                                             uint32_t                           create_info_count,
                                                             const VkComputePipelineCreateInfo* p_create_infos,
                                                             const VkAllocationCallbacks*       p_allocator,
                                                             VkPipeline*                        p_pipelines);
typedef void(VKAPI_PTR* pfn_vk_destroy_pipeline)(VkDevice device, VkPipeline pipeline,
                                                 const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_pipeline_layout)(VkDevice                          device,
                                                           const VkPipelineLayoutCreateInfo* p_create_info,
                                                           const VkAllocationCallbacks*      p_allocator,
                                                           VkPipelineLayout*                 p_pipeline_layout);
typedef void(VKAPI_PTR* pfn_vk_destroy_pipeline_layout)(VkDevice device, VkPipelineLayout pipeline_layout,
                                                        const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_sampler)(VkDevice device, const VkSamplerCreateInfo* p_create_info,
                                                   const VkAllocationCallbacks* p_allocator, VkSampler* p_sampler);
typedef void(VKAPI_PTR* pfn_vk_destroy_sampler)(VkDevice device, VkSampler sampler,
                                                const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_descriptor_set_layout)(VkDevice                               device,
                                                                 const VkDescriptorSetLayoutCreateInfo* p_create_info,
                                                                 const VkAllocationCallbacks*           p_allocator,
                                                                 VkDescriptorSetLayout*                 p_set_layout);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_set_layout)(VkDevice                     device,
                                                              VkDescriptorSetLayout        descriptor_set_layout,
                                                              const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_descriptor_pool)(VkDevice                          device,
                                                           const VkDescriptorPoolCreateInfo* p_create_info,
                                                           const VkAllocationCallbacks*      p_allocator,
                                                           VkDescriptorPool*                 p_descriptor_pool);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_pool)(VkDevice device, VkDescriptorPool descriptor_pool,
                                                        const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_reset_descriptor_pool)(VkDevice device, VkDescriptorPool descriptor_pool,
                                                          VkDescriptorPoolResetFlags flags);
typedef VkResult(VKAPI_PTR* pfn_vk_allocate_descriptor_sets)(VkDevice                           device,
                                                             const VkDescriptorSetAllocateInfo* p_allocate_info,
                                                             VkDescriptorSet*                   p_descriptor_sets);
typedef VkResult(VKAPI_PTR* pfn_vk_free_descriptor_sets)(VkDevice device, VkDescriptorPool descriptor_pool,
                                                         uint32_t               descriptor_set_count,
                                                         const VkDescriptorSet* p_descriptor_sets);
typedef void(VKAPI_PTR* pfn_vk_update_descriptor_sets)(VkDevice device, uint32_t descriptor_write_count,
                                                       const VkWriteDescriptorSet* p_descriptor_writes,
                                                       uint32_t                    descriptor_copy_count,
                                                       const VkCopyDescriptorSet*  p_descriptor_copies);
typedef VkResult(VKAPI_PTR* pfn_vk_create_framebuffer)(VkDevice device, const VkFramebufferCreateInfo* p_create_info,
                                                       const VkAllocationCallbacks* p_allocator,
                                                       VkFramebuffer*               p_framebuffer);
typedef void(VKAPI_PTR* pfn_vk_destroy_framebuffer)(VkDevice device, VkFramebuffer framebuffer,
                                                    const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_render_pass)(VkDevice device, const VkRenderPassCreateInfo* p_create_info,
                                                       const VkAllocationCallbacks* p_allocator,
                                                       VkRenderPass*                p_render_pass);
typedef void(VKAPI_PTR* pfn_vk_destroy_render_pass)(VkDevice device, VkRenderPass render_pass,
                                                    const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_get_render_area_granularity)(VkDevice device, VkRenderPass render_pass,
                                                            VkExtent2D* p_granularity);
typedef VkResult(VKAPI_PTR* pfn_vk_create_command_pool)(VkDevice device, const VkCommandPoolCreateInfo* p_create_info,
                                                        const VkAllocationCallbacks* p_allocator,
                                                        VkCommandPool*               p_command_pool);
typedef void(VKAPI_PTR* pfn_vk_destroy_command_pool)(VkDevice device, VkCommandPool command_pool,
                                                     const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_reset_command_pool)(VkDevice device, VkCommandPool command_pool,
                                                       VkCommandPoolResetFlags flags);
typedef VkResult(VKAPI_PTR* pfn_vk_allocate_command_buffers)(VkDevice                           device,
                                                             const VkCommandBufferAllocateInfo* p_allocate_info,
                                                             VkCommandBuffer*                   p_command_buffers);
typedef void(VKAPI_PTR* pfn_vk_free_command_buffers)(VkDevice device, VkCommandPool command_pool,
                                                     uint32_t               command_buffer_count,
                                                     const VkCommandBuffer* p_command_buffers);
typedef VkResult(VKAPI_PTR* pfn_vk_begin_command_buffer)(VkCommandBuffer                 command_buffer,
                                                         const VkCommandBufferBeginInfo* p_begin_info);
typedef VkResult(VKAPI_PTR* pfn_vk_end_command_buffer)(VkCommandBuffer command_buffer);
typedef VkResult(VKAPI_PTR* pfn_vk_reset_command_buffer)(VkCommandBuffer           command_buffer,
                                                         VkCommandBufferResetFlags flags);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_pipeline)(VkCommandBuffer     command_buffer,
                                                  VkPipelineBindPoint pipeline_bind_point, VkPipeline pipeline);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport)(VkCommandBuffer command_buffer, uint32_t first_viewport,
                                                 uint32_t viewport_count, const VkViewport* p_viewports);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_scissor)(VkCommandBuffer command_buffer, uint32_t first_scissor,
                                                uint32_t scissor_count, const VkRect2D* p_scissors);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_line_width)(VkCommandBuffer command_buffer, float line_width);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_bias)(VkCommandBuffer command_buffer, float depth_bias_constant_factor,
                                                   float depth_bias_clamp, float depth_bias_slope_factor);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_blend_constants)(VkCommandBuffer command_buffer, const float blend_constants[4]);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_bounds)(VkCommandBuffer command_buffer, float min_depth_bounds,
                                                     float max_depth_bounds);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_compare_mask)(VkCommandBuffer    command_buffer,
                                                             VkStencilFaceFlags face_mask, uint32_t compare_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_write_mask)(VkCommandBuffer command_buffer, VkStencilFaceFlags face_mask,
                                                           uint32_t write_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_reference)(VkCommandBuffer command_buffer, VkStencilFaceFlags face_mask,
                                                          uint32_t reference);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_descriptor_sets)(
    VkCommandBuffer command_buffer, VkPipelineBindPoint pipeline_bind_point, VkPipelineLayout layout,
    uint32_t first_set, uint32_t descriptor_set_count, const VkDescriptorSet* p_descriptor_sets,
    uint32_t dynamic_offset_count, const uint32_t* p_dynamic_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_index_buffer)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                      VkDeviceSize offset, VkIndexType index_type);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_vertex_buffers)(VkCommandBuffer command_buffer, uint32_t first_binding,
                                                        uint32_t binding_count, const VkBuffer* p_buffers,
                                                        const VkDeviceSize* p_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw)(VkCommandBuffer command_buffer, uint32_t vertex_count, uint32_t instance_count,
                                         uint32_t first_vertex, uint32_t first_instance);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed)(VkCommandBuffer command_buffer, uint32_t index_count,
                                                 uint32_t instance_count, uint32_t first_index, int32_t vertex_offset,
                                                 uint32_t first_instance);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect)(VkCommandBuffer command_buffer, VkBuffer buffer, VkDeviceSize offset,
                                                  uint32_t draw_count, uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                          VkDeviceSize offset, uint32_t draw_count, uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch)(VkCommandBuffer command_buffer, uint32_t group_count_x,
                                             uint32_t group_count_y, uint32_t group_count_z);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch_indirect)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                      VkDeviceSize offset);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer)(VkCommandBuffer command_buffer, VkBuffer src_buffer,
                                                VkBuffer dst_buffer, uint32_t region_count,
                                                const VkBufferCopy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image)(VkCommandBuffer command_buffer, VkImage src_image,
                                               VkImageLayout src_image_layout, VkImage dst_image,
                                               VkImageLayout dst_image_layout, uint32_t region_count,
                                               const VkImageCopy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_blit_image)(VkCommandBuffer command_buffer, VkImage src_image,
                                               VkImageLayout src_image_layout, VkImage dst_image,
                                               VkImageLayout dst_image_layout, uint32_t region_count,
                                               const VkImageBlit* p_regions, VkFilter filter);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer_to_image)(VkCommandBuffer command_buffer, VkBuffer src_buffer,
                                                         VkImage dst_image, VkImageLayout dst_image_layout,
                                                         uint32_t region_count, const VkBufferImageCopy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image_to_buffer)(VkCommandBuffer command_buffer, VkImage src_image,
                                                         VkImageLayout src_image_layout, VkBuffer dst_buffer,
                                                         uint32_t region_count, const VkBufferImageCopy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_update_buffer)(VkCommandBuffer command_buffer, VkBuffer dst_buffer,
                                                  VkDeviceSize dst_offset, VkDeviceSize data_size, const void* p_data);
typedef void(VKAPI_PTR* pfn_vk_cmd_fill_buffer)(VkCommandBuffer command_buffer, VkBuffer dst_buffer,
                                                VkDeviceSize dst_offset, VkDeviceSize size, uint32_t data);
typedef void(VKAPI_PTR* pfn_vk_cmd_clear_color_image)(VkCommandBuffer command_buffer, VkImage image,
                                                      VkImageLayout image_layout, const VkClearColorValue* p_color,
                                                      uint32_t range_count, const VkImageSubresourceRange* p_ranges);
typedef void(VKAPI_PTR* pfn_vk_cmd_clear_depth_stencil_image)(VkCommandBuffer command_buffer, VkImage image,
                                                              VkImageLayout                   image_layout,
                                                              const VkClearDepthStencilValue* p_depth_stencil,
                                                              uint32_t                        range_count,
                                                              const VkImageSubresourceRange*  p_ranges);
typedef void(VKAPI_PTR* pfn_vk_cmd_clear_attachments)(VkCommandBuffer command_buffer, uint32_t attachment_count,
                                                      const VkClearAttachment* p_attachments, uint32_t rect_count,
                                                      const VkClearRect* p_rects);
typedef void(VKAPI_PTR* pfn_vk_cmd_resolve_image)(VkCommandBuffer command_buffer, VkImage src_image,
                                                  VkImageLayout src_image_layout, VkImage dst_image,
                                                  VkImageLayout dst_image_layout, uint32_t region_count,
                                                  const VkImageResolve* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_event)(VkCommandBuffer command_buffer, VkEvent event,
                                              VkPipelineStageFlags stage_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_reset_event)(VkCommandBuffer command_buffer, VkEvent event,
                                                VkPipelineStageFlags stage_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_wait_events)(
    VkCommandBuffer command_buffer, uint32_t event_count, const VkEvent* p_events, VkPipelineStageFlags src_stage_mask,
    VkPipelineStageFlags dst_stage_mask, uint32_t memory_barrier_count, const VkMemoryBarrier* p_memory_barriers,
    uint32_t buffer_memory_barrier_count, const VkBufferMemoryBarrier* p_buffer_memory_barriers,
    uint32_t image_memory_barrier_count, const VkImageMemoryBarrier* p_image_memory_barriers);
typedef void(VKAPI_PTR* pfn_vk_cmd_pipeline_barrier)(
    VkCommandBuffer command_buffer, VkPipelineStageFlags src_stage_mask, VkPipelineStageFlags dst_stage_mask,
    VkDependencyFlags dependency_flags, uint32_t memory_barrier_count, const VkMemoryBarrier* p_memory_barriers,
    uint32_t buffer_memory_barrier_count, const VkBufferMemoryBarrier* p_buffer_memory_barriers,
    uint32_t image_memory_barrier_count, const VkImageMemoryBarrier* p_image_memory_barriers);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_query)(VkCommandBuffer command_buffer, VkQueryPool query_pool, uint32_t query,
                                                VkQueryControlFlags flags);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_query)(VkCommandBuffer command_buffer, VkQueryPool query_pool, uint32_t query);
typedef void(VKAPI_PTR* pfn_vk_cmd_reset_query_pool)(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                     uint32_t first_query, uint32_t query_count);
typedef void(VKAPI_PTR* pfn_vk_cmd_write_timestamp)(VkCommandBuffer         command_buffer,
                                                    VkPipelineStageFlagBits pipeline_stage, VkQueryPool query_pool,
                                                    uint32_t query);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_query_pool_results)(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                            uint32_t first_query, uint32_t query_count,
                                                            VkBuffer dst_buffer, VkDeviceSize dst_offset,
                                                            VkDeviceSize stride, VkQueryResultFlags flags);
typedef void(VKAPI_PTR* pfn_vk_cmd_push_constants)(VkCommandBuffer command_buffer, VkPipelineLayout layout,
                                                   VkShaderStageFlags stage_flags, uint32_t offset, uint32_t size,
                                                   const void* p_values);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_render_pass)(VkCommandBuffer              command_buffer,
                                                      const VkRenderPassBeginInfo* p_render_pass_begin,
                                                      VkSubpassContents            contents);
typedef void(VKAPI_PTR* pfn_vk_cmd_next_subpass)(VkCommandBuffer command_buffer, VkSubpassContents contents);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_render_pass)(VkCommandBuffer command_buffer);
typedef void(VKAPI_PTR* pfn_vk_cmd_execute_commands)(VkCommandBuffer command_buffer, uint32_t command_buffer_count,
                                                     const VkCommandBuffer* p_command_buffers);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_instance(const VkInstanceCreateInfo*  p_create_info,
                                                  const VkAllocationCallbacks* p_allocator,
                                                  VkInstance*                  p_instance) __asm("vkCreateInstance");

VKAPI_ATTR void VKAPI_CALL vk_destroy_instance(VkInstance                   instance,
                                               const VkAllocationCallbacks* p_allocator) __asm("vkDestroyInstance");

VKAPI_ATTR VkResult VKAPI_CALL
vk_enumerate_physical_devices(VkInstance instance, uint32_t* p_physical_device_count,
                              VkPhysicalDevice* p_physical_devices) __asm("vkEnumeratePhysicalDevices");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_features(
    VkPhysicalDevice physical_device, VkPhysicalDeviceFeatures* p_features) __asm("vkGetPhysicalDeviceFeatures");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_format_properties(
    VkPhysicalDevice physical_device, VkFormat format,
    VkFormatProperties* p_format_properties) __asm("vkGetPhysicalDeviceFormatProperties");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_image_format_properties(
    VkPhysicalDevice physical_device, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage,
    VkImageCreateFlags       flags,
    VkImageFormatProperties* p_image_format_properties) __asm("vkGetPhysicalDeviceImageFormatProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_properties(
    VkPhysicalDevice physical_device, VkPhysicalDeviceProperties* p_properties) __asm("vkGetPhysicalDeviceProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_properties(
    VkPhysicalDevice physical_device, uint32_t* p_queue_family_property_count,
    VkQueueFamilyProperties* p_queue_family_properties) __asm("vkGetPhysicalDeviceQueueFamilyProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_memory_properties(
    VkPhysicalDevice                  physical_device,
    VkPhysicalDeviceMemoryProperties* p_memory_properties) __asm("vkGetPhysicalDeviceMemoryProperties");

VKAPI_ATTR pfn_vk_void_function VKAPI_CALL vk_get_instance_proc_addr(VkInstance  instance,
                                                                     const char* p_name) __asm("vkGetInstanceProcAddr");

VKAPI_ATTR pfn_vk_void_function VKAPI_CALL vk_get_device_proc_addr(VkDevice    device,
                                                                   const char* p_name) __asm("vkGetDeviceProcAddr");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_device(VkPhysicalDevice             physical_device,
                                                const VkDeviceCreateInfo*    p_create_info,
                                                const VkAllocationCallbacks* p_allocator,
                                                VkDevice*                    p_device) __asm("vkCreateDevice");

VKAPI_ATTR void VKAPI_CALL vk_destroy_device(VkDevice                     device,
                                             const VkAllocationCallbacks* p_allocator) __asm("vkDestroyDevice");

VKAPI_ATTR VkResult VKAPI_CALL vk_enumerate_instance_extension_properties(
    const char* p_layer_name, uint32_t* p_property_count,
    VkExtensionProperties* p_properties) __asm("vkEnumerateInstanceExtensionProperties");

VKAPI_ATTR VkResult VKAPI_CALL vk_enumerate_device_extension_properties(
    VkPhysicalDevice physical_device, const char* p_layer_name, uint32_t* p_property_count,
    VkExtensionProperties* p_properties) __asm("vkEnumerateDeviceExtensionProperties");

VKAPI_ATTR VkResult VKAPI_CALL vk_enumerate_instance_layer_properties(
    uint32_t* p_property_count, VkLayerProperties* p_properties) __asm("vkEnumerateInstanceLayerProperties");

VKAPI_ATTR VkResult VKAPI_CALL
vk_enumerate_device_layer_properties(VkPhysicalDevice physical_device, uint32_t* p_property_count,
                                     VkLayerProperties* p_properties) __asm("vkEnumerateDeviceLayerProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_device_queue(VkDevice device, uint32_t queue_family_index, uint32_t queue_index,
                                               VkQueue* p_queue) __asm("vkGetDeviceQueue");

VKAPI_ATTR VkResult VKAPI_CALL vk_queue_submit(VkQueue queue, uint32_t submit_count, const VkSubmitInfo* p_submits,
                                               VkFence fence) __asm("vkQueueSubmit");

VKAPI_ATTR VkResult VKAPI_CALL vk_queue_wait_idle(VkQueue queue) __asm("vkQueueWaitIdle");

VKAPI_ATTR VkResult VKAPI_CALL vk_device_wait_idle(VkDevice device) __asm("vkDeviceWaitIdle");

VKAPI_ATTR VkResult VKAPI_CALL vk_allocate_memory(VkDevice device, const VkMemoryAllocateInfo* p_allocate_info,
                                                  const VkAllocationCallbacks* p_allocator,
                                                  VkDeviceMemory*              p_memory) __asm("vkAllocateMemory");

VKAPI_ATTR void VKAPI_CALL vk_free_memory(VkDevice device, VkDeviceMemory memory,
                                          const VkAllocationCallbacks* p_allocator) __asm("vkFreeMemory");

VKAPI_ATTR VkResult VKAPI_CALL vk_map_memory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset,
                                             VkDeviceSize size, VkMemoryMapFlags flags,
                                             void** pp_data) __asm("vkMapMemory");

VKAPI_ATTR void VKAPI_CALL vk_unmap_memory(VkDevice device, VkDeviceMemory memory) __asm("vkUnmapMemory");

VKAPI_ATTR VkResult VKAPI_CALL
vk_flush_mapped_memory_ranges(VkDevice device, uint32_t memory_range_count,
                              const VkMappedMemoryRange* p_memory_ranges) __asm("vkFlushMappedMemoryRanges");

VKAPI_ATTR VkResult VKAPI_CALL
vk_invalidate_mapped_memory_ranges(VkDevice device, uint32_t memory_range_count,
                                   const VkMappedMemoryRange* p_memory_ranges) __asm("vkInvalidateMappedMemoryRanges");

VKAPI_ATTR void VKAPI_CALL
vk_get_device_memory_commitment(VkDevice device, VkDeviceMemory memory,
                                VkDeviceSize* p_committed_memory_in_bytes) __asm("vkGetDeviceMemoryCommitment");

VKAPI_ATTR VkResult VKAPI_CALL vk_bind_buffer_memory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory,
                                                     VkDeviceSize memory_offset) __asm("vkBindBufferMemory");

VKAPI_ATTR VkResult VKAPI_CALL vk_bind_image_memory(VkDevice device, VkImage image, VkDeviceMemory memory,
                                                    VkDeviceSize memory_offset) __asm("vkBindImageMemory");

VKAPI_ATTR void VKAPI_CALL
vk_get_buffer_memory_requirements(VkDevice device, VkBuffer buffer,
                                  VkMemoryRequirements* p_memory_requirements) __asm("vkGetBufferMemoryRequirements");

VKAPI_ATTR void VKAPI_CALL vk_get_image_memory_requirements(
    VkDevice device, VkImage image, VkMemoryRequirements* p_memory_requirements) __asm("vkGetImageMemoryRequirements");

VKAPI_ATTR void VKAPI_CALL vk_get_image_sparse_memory_requirements(
    VkDevice device, VkImage image, uint32_t* p_sparse_memory_requirement_count,
    VkSparseImageMemoryRequirements* p_sparse_memory_requirements) __asm("vkGetImageSparseMemoryRequirements");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_sparse_image_format_properties(
    VkPhysicalDevice physical_device, VkFormat format, VkImageType type, VkSampleCountFlagBits samples,
    VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* p_property_count,
    VkSparseImageFormatProperties* p_properties) __asm("vkGetPhysicalDeviceSparseImageFormatProperties");

VKAPI_ATTR VkResult VKAPI_CALL vk_queue_bind_sparse(VkQueue queue, uint32_t bind_info_count,
                                                    const VkBindSparseInfo* p_bind_info,
                                                    VkFence                 fence) __asm("vkQueueBindSparse");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_fence(VkDevice device, const VkFenceCreateInfo* p_create_info,
                                               const VkAllocationCallbacks* p_allocator,
                                               VkFence*                     p_fence) __asm("vkCreateFence");

VKAPI_ATTR void VKAPI_CALL vk_destroy_fence(VkDevice device, VkFence fence,
                                            const VkAllocationCallbacks* p_allocator) __asm("vkDestroyFence");

VKAPI_ATTR VkResult VKAPI_CALL vk_reset_fences(VkDevice device, uint32_t fence_count,
                                               const VkFence* p_fences) __asm("vkResetFences");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_fence_status(VkDevice device, VkFence fence) __asm("vkGetFenceStatus");

VKAPI_ATTR VkResult VKAPI_CALL vk_wait_for_fences(VkDevice device, uint32_t fence_count, const VkFence* p_fences,
                                                  VkBool32 wait_all, uint64_t timeout) __asm("vkWaitForFences");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_semaphore(VkDevice device, const VkSemaphoreCreateInfo* p_create_info,
                                                   const VkAllocationCallbacks* p_allocator,
                                                   VkSemaphore*                 p_semaphore) __asm("vkCreateSemaphore");

VKAPI_ATTR void VKAPI_CALL vk_destroy_semaphore(VkDevice device, VkSemaphore semaphore,
                                                const VkAllocationCallbacks* p_allocator) __asm("vkDestroySemaphore");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_event(VkDevice device, const VkEventCreateInfo* p_create_info,
                                               const VkAllocationCallbacks* p_allocator,
                                               VkEvent*                     p_event) __asm("vkCreateEvent");

VKAPI_ATTR void VKAPI_CALL vk_destroy_event(VkDevice device, VkEvent event,
                                            const VkAllocationCallbacks* p_allocator) __asm("vkDestroyEvent");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_event_status(VkDevice device, VkEvent event) __asm("vkGetEventStatus");

VKAPI_ATTR VkResult VKAPI_CALL vk_set_event(VkDevice device, VkEvent event) __asm("vkSetEvent");

VKAPI_ATTR VkResult VKAPI_CALL vk_reset_event(VkDevice device, VkEvent event) __asm("vkResetEvent");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_query_pool(VkDevice device, const VkQueryPoolCreateInfo* p_create_info,
                                                    const VkAllocationCallbacks* p_allocator,
                                                    VkQueryPool* p_query_pool) __asm("vkCreateQueryPool");

VKAPI_ATTR void VKAPI_CALL vk_destroy_query_pool(VkDevice device, VkQueryPool query_pool,
                                                 const VkAllocationCallbacks* p_allocator) __asm("vkDestroyQueryPool");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_query_pool_results(VkDevice device, VkQueryPool query_pool, uint32_t first_query,
                                                         uint32_t query_count, size_t data_size, void* p_data,
                                                         VkDeviceSize       stride,
                                                         VkQueryResultFlags flags) __asm("vkGetQueryPoolResults");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_buffer(VkDevice device, const VkBufferCreateInfo* p_create_info,
                                                const VkAllocationCallbacks* p_allocator,
                                                VkBuffer*                    p_buffer) __asm("vkCreateBuffer");

VKAPI_ATTR void VKAPI_CALL vk_destroy_buffer(VkDevice device, VkBuffer buffer,
                                             const VkAllocationCallbacks* p_allocator) __asm("vkDestroyBuffer");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_buffer_view(VkDevice device, const VkBufferViewCreateInfo* p_create_info,
                                                     const VkAllocationCallbacks* p_allocator,
                                                     VkBufferView*                p_view) __asm("vkCreateBufferView");

VKAPI_ATTR void VKAPI_CALL vk_destroy_buffer_view(
    VkDevice device, VkBufferView buffer_view, const VkAllocationCallbacks* p_allocator) __asm("vkDestroyBufferView");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_image(VkDevice device, const VkImageCreateInfo* p_create_info,
                                               const VkAllocationCallbacks* p_allocator,
                                               VkImage*                     p_image) __asm("vkCreateImage");

VKAPI_ATTR void VKAPI_CALL vk_destroy_image(VkDevice device, VkImage image,
                                            const VkAllocationCallbacks* p_allocator) __asm("vkDestroyImage");

VKAPI_ATTR void VKAPI_CALL
vk_get_image_subresource_layout(VkDevice device, VkImage image, const VkImageSubresource* p_subresource,
                                VkSubresourceLayout* p_layout) __asm("vkGetImageSubresourceLayout");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_image_view(VkDevice device, const VkImageViewCreateInfo* p_create_info,
                                                    const VkAllocationCallbacks* p_allocator,
                                                    VkImageView*                 p_view) __asm("vkCreateImageView");

VKAPI_ATTR void VKAPI_CALL vk_destroy_image_view(VkDevice device, VkImageView image_view,
                                                 const VkAllocationCallbacks* p_allocator) __asm("vkDestroyImageView");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_shader_module(VkDevice device, const VkShaderModuleCreateInfo* p_create_info,
                                                       const VkAllocationCallbacks* p_allocator,
                                                       VkShaderModule* p_shader_module) __asm("vkCreateShaderModule");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_shader_module(VkDevice device, VkShaderModule shader_module,
                         const VkAllocationCallbacks* p_allocator) __asm("vkDestroyShaderModule");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_pipeline_cache(
    VkDevice device, const VkPipelineCacheCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkPipelineCache* p_pipeline_cache) __asm("vkCreatePipelineCache");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_pipeline_cache(VkDevice device, VkPipelineCache pipeline_cache,
                          const VkAllocationCallbacks* p_allocator) __asm("vkDestroyPipelineCache");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_pipeline_cache_data(VkDevice device, VkPipelineCache pipeline_cache,
                                                          size_t* p_data_size,
                                                          void*   p_data) __asm("vkGetPipelineCacheData");

VKAPI_ATTR VkResult VKAPI_CALL
vk_merge_pipeline_caches(VkDevice device, VkPipelineCache dst_cache, uint32_t src_cache_count,
                         const VkPipelineCache* p_src_caches) __asm("vkMergePipelineCaches");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_graphics_pipelines(VkDevice device, VkPipelineCache pipeline_cache,
                                                            uint32_t                            create_info_count,
                                                            const VkGraphicsPipelineCreateInfo* p_create_infos,
                                                            const VkAllocationCallbacks*        p_allocator,
                                                            VkPipeline* p_pipelines) __asm("vkCreateGraphicsPipelines");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_compute_pipelines(VkDevice device, VkPipelineCache pipeline_cache,
                                                           uint32_t                           create_info_count,
                                                           const VkComputePipelineCreateInfo* p_create_infos,
                                                           const VkAllocationCallbacks*       p_allocator,
                                                           VkPipeline* p_pipelines) __asm("vkCreateComputePipelines");

VKAPI_ATTR void VKAPI_CALL vk_destroy_pipeline(VkDevice device, VkPipeline pipeline,
                                               const VkAllocationCallbacks* p_allocator) __asm("vkDestroyPipeline");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_pipeline_layout(
    VkDevice device, const VkPipelineLayoutCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkPipelineLayout* p_pipeline_layout) __asm("vkCreatePipelineLayout");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_pipeline_layout(VkDevice device, VkPipelineLayout pipeline_layout,
                           const VkAllocationCallbacks* p_allocator) __asm("vkDestroyPipelineLayout");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_sampler(VkDevice device, const VkSamplerCreateInfo* p_create_info,
                                                 const VkAllocationCallbacks* p_allocator,
                                                 VkSampler*                   p_sampler) __asm("vkCreateSampler");

VKAPI_ATTR void VKAPI_CALL vk_destroy_sampler(VkDevice device, VkSampler sampler,
                                              const VkAllocationCallbacks* p_allocator) __asm("vkDestroySampler");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_descriptor_set_layout(
    VkDevice device, const VkDescriptorSetLayoutCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkDescriptorSetLayout* p_set_layout) __asm("vkCreateDescriptorSetLayout");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_descriptor_set_layout(VkDevice device, VkDescriptorSetLayout descriptor_set_layout,
                                 const VkAllocationCallbacks* p_allocator) __asm("vkDestroyDescriptorSetLayout");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_descriptor_pool(
    VkDevice device, const VkDescriptorPoolCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkDescriptorPool* p_descriptor_pool) __asm("vkCreateDescriptorPool");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_descriptor_pool(VkDevice device, VkDescriptorPool descriptor_pool,
                           const VkAllocationCallbacks* p_allocator) __asm("vkDestroyDescriptorPool");

VKAPI_ATTR VkResult VKAPI_CALL vk_reset_descriptor_pool(
    VkDevice device, VkDescriptorPool descriptor_pool, VkDescriptorPoolResetFlags flags) __asm("vkResetDescriptorPool");

VKAPI_ATTR VkResult VKAPI_CALL
vk_allocate_descriptor_sets(VkDevice device, const VkDescriptorSetAllocateInfo* p_allocate_info,
                            VkDescriptorSet* p_descriptor_sets) __asm("vkAllocateDescriptorSets");

VKAPI_ATTR VkResult VKAPI_CALL
vk_free_descriptor_sets(VkDevice device, VkDescriptorPool descriptor_pool, uint32_t descriptor_set_count,
                        const VkDescriptorSet* p_descriptor_sets) __asm("vkFreeDescriptorSets");

VKAPI_ATTR void VKAPI_CALL vk_update_descriptor_sets(
    VkDevice device, uint32_t descriptor_write_count, const VkWriteDescriptorSet* p_descriptor_writes,
    uint32_t descriptor_copy_count, const VkCopyDescriptorSet* p_descriptor_copies) __asm("vkUpdateDescriptorSets");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_framebuffer(VkDevice device, const VkFramebufferCreateInfo* p_create_info,
                                                     const VkAllocationCallbacks* p_allocator,
                                                     VkFramebuffer* p_framebuffer) __asm("vkCreateFramebuffer");

VKAPI_ATTR void VKAPI_CALL vk_destroy_framebuffer(
    VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* p_allocator) __asm("vkDestroyFramebuffer");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_render_pass(VkDevice device, const VkRenderPassCreateInfo* p_create_info,
                                                     const VkAllocationCallbacks* p_allocator,
                                                     VkRenderPass* p_render_pass) __asm("vkCreateRenderPass");

VKAPI_ATTR void VKAPI_CALL vk_destroy_render_pass(
    VkDevice device, VkRenderPass render_pass, const VkAllocationCallbacks* p_allocator) __asm("vkDestroyRenderPass");

VKAPI_ATTR void VKAPI_CALL vk_get_render_area_granularity(
    VkDevice device, VkRenderPass render_pass, VkExtent2D* p_granularity) __asm("vkGetRenderAreaGranularity");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_command_pool(VkDevice device, const VkCommandPoolCreateInfo* p_create_info,
                                                      const VkAllocationCallbacks* p_allocator,
                                                      VkCommandPool* p_command_pool) __asm("vkCreateCommandPool");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_command_pool(VkDevice device, VkCommandPool command_pool,
                        const VkAllocationCallbacks* p_allocator) __asm("vkDestroyCommandPool");

VKAPI_ATTR VkResult VKAPI_CALL vk_reset_command_pool(VkDevice device, VkCommandPool command_pool,
                                                     VkCommandPoolResetFlags flags) __asm("vkResetCommandPool");

VKAPI_ATTR VkResult VKAPI_CALL
vk_allocate_command_buffers(VkDevice device, const VkCommandBufferAllocateInfo* p_allocate_info,
                            VkCommandBuffer* p_command_buffers) __asm("vkAllocateCommandBuffers");

VKAPI_ATTR void VKAPI_CALL
vk_free_command_buffers(VkDevice device, VkCommandPool command_pool, uint32_t command_buffer_count,
                        const VkCommandBuffer* p_command_buffers) __asm("vkFreeCommandBuffers");

VKAPI_ATTR VkResult VKAPI_CALL vk_begin_command_buffer(
    VkCommandBuffer command_buffer, const VkCommandBufferBeginInfo* p_begin_info) __asm("vkBeginCommandBuffer");

VKAPI_ATTR VkResult VKAPI_CALL vk_end_command_buffer(VkCommandBuffer command_buffer) __asm("vkEndCommandBuffer");

VKAPI_ATTR VkResult VKAPI_CALL vk_reset_command_buffer(VkCommandBuffer           command_buffer,
                                                       VkCommandBufferResetFlags flags) __asm("vkResetCommandBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_pipeline(VkCommandBuffer command_buffer, VkPipelineBindPoint pipeline_bind_point,
                                                VkPipeline pipeline) __asm("vkCmdBindPipeline");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_viewport(VkCommandBuffer command_buffer, uint32_t first_viewport,
                                               uint32_t          viewport_count,
                                               const VkViewport* p_viewports) __asm("vkCmdSetViewport");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_scissor(VkCommandBuffer command_buffer, uint32_t first_scissor,
                                              uint32_t        scissor_count,
                                              const VkRect2D* p_scissors) __asm("vkCmdSetScissor");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_line_width(VkCommandBuffer command_buffer,
                                                 float           line_width) __asm("vkCmdSetLineWidth");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_bias(VkCommandBuffer command_buffer, float depth_bias_constant_factor,
                                                 float depth_bias_clamp,
                                                 float depth_bias_slope_factor) __asm("vkCmdSetDepthBias");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_blend_constants(VkCommandBuffer command_buffer,
                                                      const float blend_constants[4]) __asm("vkCmdSetBlendConstants");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_bounds(VkCommandBuffer command_buffer, float min_depth_bounds,
                                                   float max_depth_bounds) __asm("vkCmdSetDepthBounds");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_compare_mask(VkCommandBuffer command_buffer, VkStencilFaceFlags face_mask,
                                                           uint32_t compare_mask) __asm("vkCmdSetStencilCompareMask");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_write_mask(VkCommandBuffer command_buffer, VkStencilFaceFlags face_mask,
                                                         uint32_t write_mask) __asm("vkCmdSetStencilWriteMask");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_reference(VkCommandBuffer command_buffer, VkStencilFaceFlags face_mask,
                                                        uint32_t reference) __asm("vkCmdSetStencilReference");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_descriptor_sets(
    VkCommandBuffer command_buffer, VkPipelineBindPoint pipeline_bind_point, VkPipelineLayout layout,
    uint32_t first_set, uint32_t descriptor_set_count, const VkDescriptorSet* p_descriptor_sets,
    uint32_t dynamic_offset_count, const uint32_t* p_dynamic_offsets) __asm("vkCmdBindDescriptorSets");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_index_buffer(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                    VkDeviceSize offset,
                                                    VkIndexType  index_type) __asm("vkCmdBindIndexBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_vertex_buffers(VkCommandBuffer command_buffer, uint32_t first_binding,
                                                      uint32_t binding_count, const VkBuffer* p_buffers,
                                                      const VkDeviceSize* p_offsets) __asm("vkCmdBindVertexBuffers");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw(VkCommandBuffer command_buffer, uint32_t vertex_count, uint32_t instance_count,
                                       uint32_t first_vertex, uint32_t first_instance) __asm("vkCmdDraw");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed(VkCommandBuffer command_buffer, uint32_t index_count,
                                               uint32_t instance_count, uint32_t first_index, int32_t vertex_offset,
                                               uint32_t first_instance) __asm("vkCmdDrawIndexed");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect(VkCommandBuffer command_buffer, VkBuffer buffer, VkDeviceSize offset,
                                                uint32_t draw_count, uint32_t stride) __asm("vkCmdDrawIndirect");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed_indirect(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                        VkDeviceSize offset, uint32_t draw_count,
                                                        uint32_t stride) __asm("vkCmdDrawIndexedIndirect");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch(VkCommandBuffer command_buffer, uint32_t group_count_x,
                                           uint32_t group_count_y, uint32_t group_count_z) __asm("vkCmdDispatch");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch_indirect(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                    VkDeviceSize offset) __asm("vkCmdDispatchIndirect");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer(VkCommandBuffer command_buffer, VkBuffer src_buffer, VkBuffer dst_buffer,
                                              uint32_t            region_count,
                                              const VkBufferCopy* p_regions) __asm("vkCmdCopyBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image(VkCommandBuffer command_buffer, VkImage src_image,
                                             VkImageLayout src_image_layout, VkImage dst_image,
                                             VkImageLayout dst_image_layout, uint32_t region_count,
                                             const VkImageCopy* p_regions) __asm("vkCmdCopyImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_blit_image(VkCommandBuffer command_buffer, VkImage src_image,
                                             VkImageLayout src_image_layout, VkImage dst_image,
                                             VkImageLayout dst_image_layout, uint32_t region_count,
                                             const VkImageBlit* p_regions, VkFilter filter) __asm("vkCmdBlitImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer_to_image(
    VkCommandBuffer command_buffer, VkBuffer src_buffer, VkImage dst_image, VkImageLayout dst_image_layout,
    uint32_t region_count, const VkBufferImageCopy* p_regions) __asm("vkCmdCopyBufferToImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image_to_buffer(
    VkCommandBuffer command_buffer, VkImage src_image, VkImageLayout src_image_layout, VkBuffer dst_buffer,
    uint32_t region_count, const VkBufferImageCopy* p_regions) __asm("vkCmdCopyImageToBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_update_buffer(VkCommandBuffer command_buffer, VkBuffer dst_buffer,
                                                VkDeviceSize dst_offset, VkDeviceSize data_size,
                                                const void* p_data) __asm("vkCmdUpdateBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_fill_buffer(VkCommandBuffer command_buffer, VkBuffer dst_buffer,
                                              VkDeviceSize dst_offset, VkDeviceSize size,
                                              uint32_t data) __asm("vkCmdFillBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_clear_color_image(
    VkCommandBuffer command_buffer, VkImage image, VkImageLayout image_layout, const VkClearColorValue* p_color,
    uint32_t range_count, const VkImageSubresourceRange* p_ranges) __asm("vkCmdClearColorImage");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_clear_depth_stencil_image(VkCommandBuffer command_buffer, VkImage image, VkImageLayout image_layout,
                                 const VkClearDepthStencilValue* p_depth_stencil, uint32_t range_count,
                                 const VkImageSubresourceRange* p_ranges) __asm("vkCmdClearDepthStencilImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_clear_attachments(VkCommandBuffer command_buffer, uint32_t attachment_count,
                                                    const VkClearAttachment* p_attachments, uint32_t rect_count,
                                                    const VkClearRect* p_rects) __asm("vkCmdClearAttachments");

VKAPI_ATTR void VKAPI_CALL vk_cmd_resolve_image(VkCommandBuffer command_buffer, VkImage src_image,
                                                VkImageLayout src_image_layout, VkImage dst_image,
                                                VkImageLayout dst_image_layout, uint32_t region_count,
                                                const VkImageResolve* p_regions) __asm("vkCmdResolveImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_event(VkCommandBuffer command_buffer, VkEvent event,
                                            VkPipelineStageFlags stage_mask) __asm("vkCmdSetEvent");

VKAPI_ATTR void VKAPI_CALL vk_cmd_reset_event(VkCommandBuffer command_buffer, VkEvent event,
                                              VkPipelineStageFlags stage_mask) __asm("vkCmdResetEvent");

VKAPI_ATTR void VKAPI_CALL vk_cmd_wait_events(
    VkCommandBuffer command_buffer, uint32_t event_count, const VkEvent* p_events, VkPipelineStageFlags src_stage_mask,
    VkPipelineStageFlags dst_stage_mask, uint32_t memory_barrier_count, const VkMemoryBarrier* p_memory_barriers,
    uint32_t buffer_memory_barrier_count, const VkBufferMemoryBarrier* p_buffer_memory_barriers,
    uint32_t image_memory_barrier_count, const VkImageMemoryBarrier* p_image_memory_barriers) __asm("vkCmdWaitEvents");

VKAPI_ATTR void VKAPI_CALL vk_cmd_pipeline_barrier(
    VkCommandBuffer command_buffer, VkPipelineStageFlags src_stage_mask, VkPipelineStageFlags dst_stage_mask,
    VkDependencyFlags dependency_flags, uint32_t memory_barrier_count, const VkMemoryBarrier* p_memory_barriers,
    uint32_t buffer_memory_barrier_count, const VkBufferMemoryBarrier* p_buffer_memory_barriers,
    uint32_t                    image_memory_barrier_count,
    const VkImageMemoryBarrier* p_image_memory_barriers) __asm("vkCmdPipelineBarrier");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_query(VkCommandBuffer command_buffer, VkQueryPool query_pool, uint32_t query,
                                              VkQueryControlFlags flags) __asm("vkCmdBeginQuery");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_query(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                            uint32_t query) __asm("vkCmdEndQuery");

VKAPI_ATTR void VKAPI_CALL vk_cmd_reset_query_pool(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                   uint32_t first_query,
                                                   uint32_t query_count) __asm("vkCmdResetQueryPool");

VKAPI_ATTR void VKAPI_CALL vk_cmd_write_timestamp(VkCommandBuffer         command_buffer,
                                                  VkPipelineStageFlagBits pipeline_stage, VkQueryPool query_pool,
                                                  uint32_t query) __asm("vkCmdWriteTimestamp");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_query_pool_results(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                          uint32_t first_query, uint32_t query_count,
                                                          VkBuffer dst_buffer, VkDeviceSize dst_offset,
                                                          VkDeviceSize       stride,
                                                          VkQueryResultFlags flags) __asm("vkCmdCopyQueryPoolResults");

VKAPI_ATTR void VKAPI_CALL vk_cmd_push_constants(VkCommandBuffer command_buffer, VkPipelineLayout layout,
                                                 VkShaderStageFlags stage_flags, uint32_t offset, uint32_t size,
                                                 const void* p_values) __asm("vkCmdPushConstants");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_render_pass(VkCommandBuffer              command_buffer,
                                                    const VkRenderPassBeginInfo* p_render_pass_begin,
                                                    VkSubpassContents contents) __asm("vkCmdBeginRenderPass");

VKAPI_ATTR void VKAPI_CALL vk_cmd_next_subpass(VkCommandBuffer   command_buffer,
                                               VkSubpassContents contents) __asm("vkCmdNextSubpass");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_render_pass(VkCommandBuffer command_buffer) __asm("vkCmdEndRenderPass");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_execute_commands(VkCommandBuffer command_buffer, uint32_t command_buffer_count,
                        const VkCommandBuffer* p_command_buffers) __asm("vkCmdExecuteCommands");
#endif

#define VK_VERSION_1_1 1
// vulkan 1.1 version number
#define VK_API_VERSION_1_1 VK_MAKE_VERSION(1, 1, 0) // patch version should always be set to 0

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSamplerYcbcrConversion)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorUpdateTemplate)
#define VK_MAX_DEVICE_GROUP_SIZE 32
#define VK_LUID_SIZE 8
#define VK_QUEUE_FAMILY_EXTERNAL (~0U - 1)

typedef enum VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES           = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY     = 1,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR       = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM                  = 0x7fffffff
} VkPointClippingBehavior;

typedef enum VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT     = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT     = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM       = 0x7fffffff
} VkTessellationDomainOrigin;

typedef enum VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY       = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY     = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709          = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601          = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020         = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR   = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR      = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR      = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR     = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM           = 0x7fffffff
} VkSamplerYcbcrModelConversion;

typedef enum VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL       = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW     = 1,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR   = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM       = 0x7fffffff
} VkSamplerYcbcrRange;

typedef enum VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN     = 0,
    VK_CHROMA_LOCATION_MIDPOINT         = 1,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
    VK_CHROMA_LOCATION_MIDPOINT_KHR     = VK_CHROMA_LOCATION_MIDPOINT,
    VK_CHROMA_LOCATION_MAX_ENUM         = 0x7fffffff
} VkChromaLocation;

typedef enum VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET       = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR   = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM             = 0x7fffffff
} VkDescriptorUpdateTemplateType;

typedef enum VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT            = 0x00000001,
    VK_SUBGROUP_FEATURE_VOTE_BIT             = 0x00000002,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT       = 0x00000004,
    VK_SUBGROUP_FEATURE_BALLOT_BIT           = 0x00000008,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT          = 0x00000010,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT        = 0x00000040,
    VK_SUBGROUP_FEATURE_QUAD_BIT             = 0x00000080,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV   = 0x00000100,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM   = 0x7fffffff
} VkSubgroupFeatureFlagBits;
typedef VkFlags VkSubgroupFeatureFlags;

typedef enum VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT        = 0x00000001,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT        = 0x00000002,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT     = 0x00000004,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT     = 0x00000008,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR    = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR    = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM  = 0x7fffffff
} VkPeerMemoryFeatureFlagBits;
typedef VkFlags VkPeerMemoryFeatureFlags;

typedef enum VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT                       = 0x00000001,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT                    = 0x00000002,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT     = 0x00000004,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR                   = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR                = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM                    = 0x7fffffff
} VkMemoryAllocateFlagBits;
typedef VkFlags VkMemoryAllocateFlags;
typedef VkFlags VkCommandPoolTrimFlags;
typedef VkFlags VkDescriptorUpdateTemplateCreateFlags;

typedef enum VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT                       = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT                    = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT                = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT                   = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT               = 0x00000010,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT                      = 0x00000020,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT                  = 0x00000040,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT                     = 0x00000200,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT             = 0x00000080,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT  = 0x00000100,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR                   = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR      = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR  = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR     = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR        = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR    = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM        = 0x7fffffff
} VkExternalMemoryHandleTypeFlagBits;
typedef VkFlags VkExternalMemoryHandleTypeFlags;

typedef enum VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT     = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT         = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT         = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR     = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR     = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM     = 0x7fffffff
} VkExternalMemoryFeatureFlagBits;
typedef VkFlags VkExternalMemoryFeatureFlags;

typedef enum VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT            = 0x00000001,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT         = 0x00000002,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT     = 0x00000004,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT              = 0x00000008,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR        = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR     = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR          = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} VkExternalFenceHandleTypeFlagBits;
typedef VkFlags VkExternalFenceHandleTypeFlags;

typedef enum VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT     = 0x00000001,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT     = 0x00000002,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkExternalFenceFeatureFlagBits;
typedef VkFlags VkExternalFenceFeatureFlags;

typedef enum VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT      = 0x00000001,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR  = VK_FENCE_IMPORT_TEMPORARY_BIT,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkFenceImportFlagBits;
typedef VkFlags VkFenceImportFlags;

typedef enum VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT      = 0x00000001,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR  = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkSemaphoreImportFlagBits;
typedef VkFlags VkSemaphoreImportFlags;

typedef enum VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT            = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT         = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT     = 0x00000004,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT          = 0x00000008,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT              = 0x00000010,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT          = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR        = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR     = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR      = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR          = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} VkExternalSemaphoreHandleTypeFlagBits;
typedef VkFlags VkExternalSemaphoreHandleTypeFlags;

typedef enum VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT     = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT     = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkExternalSemaphoreFeatureFlagBits;
typedef VkFlags VkExternalSemaphoreFeatureFlags;
typedef struct VkPhysicalDeviceSubgroupProperties {
    VkStructureType        s_type;
    void*                  p_next;
    uint32_t               subgroup_size;
    VkShaderStageFlags     supported_stages;
    VkSubgroupFeatureFlags supported_operations;
    VkBool32               quad_operations_in_all_stages;
} VkPhysicalDeviceSubgroupProperties;

typedef struct VkBindBufferMemoryInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkBuffer        buffer;
    VkDeviceMemory  memory;
    VkDeviceSize    memory_offset;
} VkBindBufferMemoryInfo;

typedef struct VkBindImageMemoryInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkImage         image;
    VkDeviceMemory  memory;
    VkDeviceSize    memory_offset;
} VkBindImageMemoryInfo;

typedef struct VkPhysicalDevice16BitStorageFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        storage_buffer16bit_access;
    VkBool32        uniform_and_storage_buffer16bit_access;
    VkBool32        storage_push_constant16;
    VkBool32        storage_input_output16;
} VkPhysicalDevice16BitStorageFeatures;

typedef struct VkMemoryDedicatedRequirements {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        prefers_dedicated_allocation;
    VkBool32        requires_dedicated_allocation;
} VkMemoryDedicatedRequirements;

typedef struct VkMemoryDedicatedAllocateInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkImage         image;
    VkBuffer        buffer;
} VkMemoryDedicatedAllocateInfo;

typedef struct VkMemoryAllocateFlagsInfo {
    VkStructureType       s_type;
    const void*           p_next;
    VkMemoryAllocateFlags flags;
    uint32_t              device_mask;
} VkMemoryAllocateFlagsInfo;

typedef struct VkDeviceGroupRenderPassBeginInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        device_mask;
    uint32_t        device_render_area_count;
    const VkRect2D* p_device_render_areas;
} VkDeviceGroupRenderPassBeginInfo;

typedef struct VkDeviceGroupCommandBufferBeginInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        device_mask;
} VkDeviceGroupCommandBufferBeginInfo;

typedef struct VkDeviceGroupSubmitInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        wait_semaphore_count;
    const uint32_t* p_wait_semaphore_device_indices;
    uint32_t        command_buffer_count;
    const uint32_t* p_command_buffer_device_masks;
    uint32_t        signal_semaphore_count;
    const uint32_t* p_signal_semaphore_device_indices;
} VkDeviceGroupSubmitInfo;

typedef struct VkDeviceGroupBindSparseInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        resource_device_index;
    uint32_t        memory_device_index;
} VkDeviceGroupBindSparseInfo;

typedef struct VkBindBufferMemoryDeviceGroupInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        device_index_count;
    const uint32_t* p_device_indices;
} VkBindBufferMemoryDeviceGroupInfo;

typedef struct VkBindImageMemoryDeviceGroupInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        device_index_count;
    const uint32_t* p_device_indices;
    uint32_t        split_instance_bind_region_count;
    const VkRect2D* p_split_instance_bind_regions;
} VkBindImageMemoryDeviceGroupInfo;

typedef struct VkPhysicalDeviceGroupProperties {
    VkStructureType  s_type;
    void*            p_next;
    uint32_t         physical_device_count;
    VkPhysicalDevice physical_devices[VK_MAX_DEVICE_GROUP_SIZE];
    VkBool32         subset_allocation;
} VkPhysicalDeviceGroupProperties;

typedef struct VkDeviceGroupDeviceCreateInfo {
    VkStructureType         s_type;
    const void*             p_next;
    uint32_t                physical_device_count;
    const VkPhysicalDevice* p_physical_devices;
} VkDeviceGroupDeviceCreateInfo;

typedef struct VkBufferMemoryRequirementsInfo2 {
    VkStructureType s_type;
    const void*     p_next;
    VkBuffer        buffer;
} VkBufferMemoryRequirementsInfo2;

typedef struct VkImageMemoryRequirementsInfo2 {
    VkStructureType s_type;
    const void*     p_next;
    VkImage         image;
} VkImageMemoryRequirementsInfo2;

typedef struct VkImageSparseMemoryRequirementsInfo2 {
    VkStructureType s_type;
    const void*     p_next;
    VkImage         image;
} VkImageSparseMemoryRequirementsInfo2;

typedef struct VkMemoryRequirements2 {
    VkStructureType      s_type;
    void*                p_next;
    VkMemoryRequirements memory_requirements;
} VkMemoryRequirements2;

typedef struct VkSparseImageMemoryRequirements2 {
    VkStructureType                 s_type;
    void*                           p_next;
    VkSparseImageMemoryRequirements memory_requirements;
} VkSparseImageMemoryRequirements2;

typedef struct VkPhysicalDeviceFeatures2 {
    VkStructureType          s_type;
    void*                    p_next;
    VkPhysicalDeviceFeatures features;
} VkPhysicalDeviceFeatures2;

typedef struct VkPhysicalDeviceProperties2 {
    VkStructureType            s_type;
    void*                      p_next;
    VkPhysicalDeviceProperties properties;
} VkPhysicalDeviceProperties2;

typedef struct VkFormatProperties2 {
    VkStructureType    s_type;
    void*              p_next;
    VkFormatProperties format_properties;
} VkFormatProperties2;

typedef struct VkImageFormatProperties2 {
    VkStructureType         s_type;
    void*                   p_next;
    VkImageFormatProperties image_format_properties;
} VkImageFormatProperties2;

typedef struct VkPhysicalDeviceImageFormatInfo2 {
    VkStructureType    s_type;
    const void*        p_next;
    VkFormat           format;
    VkImageType        type;
    VkImageTiling      tiling;
    VkImageUsageFlags  usage;
    VkImageCreateFlags flags;
} VkPhysicalDeviceImageFormatInfo2;

typedef struct VkQueueFamilyProperties2 {
    VkStructureType         s_type;
    void*                   p_next;
    VkQueueFamilyProperties queue_family_properties;
} VkQueueFamilyProperties2;

typedef struct VkPhysicalDeviceMemoryProperties2 {
    VkStructureType                  s_type;
    void*                            p_next;
    VkPhysicalDeviceMemoryProperties memory_properties;
} VkPhysicalDeviceMemoryProperties2;

typedef struct VkSparseImageFormatProperties2 {
    VkStructureType               s_type;
    void*                         p_next;
    VkSparseImageFormatProperties properties;
} VkSparseImageFormatProperties2;

typedef struct VkPhysicalDeviceSparseImageFormatInfo2 {
    VkStructureType       s_type;
    const void*           p_next;
    VkFormat              format;
    VkImageType           type;
    VkSampleCountFlagBits samples;
    VkImageUsageFlags     usage;
    VkImageTiling         tiling;
} VkPhysicalDeviceSparseImageFormatInfo2;

typedef struct VkPhysicalDevicePointClippingProperties {
    VkStructureType         s_type;
    void*                   p_next;
    VkPointClippingBehavior point_clipping_behavior;
} VkPhysicalDevicePointClippingProperties;

typedef struct VkInputAttachmentAspectReference {
    uint32_t           subpass;
    uint32_t           input_attachment_index;
    VkImageAspectFlags aspect_mask;
} VkInputAttachmentAspectReference;

typedef struct VkRenderPassInputAttachmentAspectCreateInfo {
    VkStructureType                         s_type;
    const void*                             p_next;
    uint32_t                                aspect_reference_count;
    const VkInputAttachmentAspectReference* p_aspect_references;
} VkRenderPassInputAttachmentAspectCreateInfo;

typedef struct VkImageViewUsageCreateInfo {
    VkStructureType   s_type;
    const void*       p_next;
    VkImageUsageFlags usage;
} VkImageViewUsageCreateInfo;

typedef struct VkPipelineTessellationDomainOriginStateCreateInfo {
    VkStructureType            s_type;
    const void*                p_next;
    VkTessellationDomainOrigin domain_origin;
} VkPipelineTessellationDomainOriginStateCreateInfo;

typedef struct VkRenderPassMultiviewCreateInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        subpass_count;
    const uint32_t* p_view_masks;
    uint32_t        dependency_count;
    const int32_t*  p_view_offsets;
    uint32_t        correlation_mask_count;
    const uint32_t* p_correlation_masks;
} VkRenderPassMultiviewCreateInfo;

typedef struct VkPhysicalDeviceMultiviewFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        multiview;
    VkBool32        multiview_geometry_shader;
    VkBool32        multiview_tessellation_shader;
} VkPhysicalDeviceMultiviewFeatures;

typedef struct VkPhysicalDeviceMultiviewProperties {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_multiview_view_count;
    uint32_t        max_multiview_instance_index;
} VkPhysicalDeviceMultiviewProperties;

typedef struct VkPhysicalDeviceVariablePointersFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        variable_pointers_storage_buffer;
    VkBool32        variable_pointers;
} VkPhysicalDeviceVariablePointersFeatures;

typedef VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointerFeatures;

typedef struct VkPhysicalDeviceProtectedMemoryFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        protected_memory;
} VkPhysicalDeviceProtectedMemoryFeatures;

typedef struct VkPhysicalDeviceProtectedMemoryProperties {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        protected_no_fault;
} VkPhysicalDeviceProtectedMemoryProperties;

typedef struct VkDeviceQueueInfo2 {
    VkStructureType          s_type;
    const void*              p_next;
    VkDeviceQueueCreateFlags flags;
    uint32_t                 queue_family_index;
    uint32_t                 queue_index;
} VkDeviceQueueInfo2;

typedef struct VkProtectedSubmitInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkBool32        protected_submit;
} VkProtectedSubmitInfo;

typedef struct VkSamplerYcbcrConversionCreateInfo {
    VkStructureType               s_type;
    const void*                   p_next;
    VkFormat                      format;
    VkSamplerYcbcrModelConversion ycbcr_model;
    VkSamplerYcbcrRange           ycbcr_range;
    VkComponentMapping            components;
    VkChromaLocation              x_chroma_offset;
    VkChromaLocation              y_chroma_offset;
    VkFilter                      chroma_filter;
    VkBool32                      force_explicit_reconstruction;
} VkSamplerYcbcrConversionCreateInfo;

typedef struct VkSamplerYcbcrConversionInfo {
    VkStructureType          s_type;
    const void*              p_next;
    VkSamplerYcbcrConversion conversion;
} VkSamplerYcbcrConversionInfo;

typedef struct VkBindImagePlaneMemoryInfo {
    VkStructureType       s_type;
    const void*           p_next;
    VkImageAspectFlagBits plane_aspect;
} VkBindImagePlaneMemoryInfo;

typedef struct VkImagePlaneMemoryRequirementsInfo {
    VkStructureType       s_type;
    const void*           p_next;
    VkImageAspectFlagBits plane_aspect;
} VkImagePlaneMemoryRequirementsInfo;

typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        sampler_ycbcr_conversion;
} VkPhysicalDeviceSamplerYcbcrConversionFeatures;

typedef struct VkSamplerYcbcrConversionImageFormatProperties {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        combined_image_sampler_descriptor_count;
} VkSamplerYcbcrConversionImageFormatProperties;

typedef struct VkDescriptorUpdateTemplateEntry {
    uint32_t         dst_binding;
    uint32_t         dst_array_element;
    uint32_t         descriptor_count;
    VkDescriptorType descriptor_type;
    size_t           offset;
    size_t           stride;
} VkDescriptorUpdateTemplateEntry;

typedef struct VkDescriptorUpdateTemplateCreateInfo {
    VkStructureType                        s_type;
    const void*                            p_next;
    VkDescriptorUpdateTemplateCreateFlags  flags;
    uint32_t                               descriptor_update_entry_count;
    const VkDescriptorUpdateTemplateEntry* p_descriptor_update_entries;
    VkDescriptorUpdateTemplateType         template_type;
    VkDescriptorSetLayout                  descriptor_set_layout;
    VkPipelineBindPoint                    pipeline_bind_point;
    VkPipelineLayout                       pipeline_layout;
    uint32_t                               set;
} VkDescriptorUpdateTemplateCreateInfo;

typedef struct VkExternalMemoryProperties {
    VkExternalMemoryFeatureFlags    external_memory_features;
    VkExternalMemoryHandleTypeFlags export_from_imported_handle_types;
    VkExternalMemoryHandleTypeFlags compatible_handle_types;
} VkExternalMemoryProperties;

typedef struct VkPhysicalDeviceExternalImageFormatInfo {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkExternalMemoryHandleTypeFlagBits handle_type;
} VkPhysicalDeviceExternalImageFormatInfo;

typedef struct VkExternalImageFormatProperties {
    VkStructureType            s_type;
    void*                      p_next;
    VkExternalMemoryProperties external_memory_properties;
} VkExternalImageFormatProperties;

typedef struct VkPhysicalDeviceExternalBufferInfo {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkBufferCreateFlags                flags;
    VkBufferUsageFlags                 usage;
    VkExternalMemoryHandleTypeFlagBits handle_type;
} VkPhysicalDeviceExternalBufferInfo;

typedef struct VkExternalBufferProperties {
    VkStructureType            s_type;
    void*                      p_next;
    VkExternalMemoryProperties external_memory_properties;
} VkExternalBufferProperties;

typedef struct VkPhysicalDeviceIDProperties {
    VkStructureType s_type;
    void*           p_next;
    uint8_t         device_uuid[VK_UUID_SIZE];
    uint8_t         driver_uuid[VK_UUID_SIZE];
    uint8_t         device_luid[VK_LUID_SIZE];
    uint32_t        device_node_mask;
    VkBool32        device_luidvalid;
} VkPhysicalDeviceIDProperties;

typedef struct VkExternalMemoryImageCreateInfo {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkExternalMemoryHandleTypeFlags handle_types;
} VkExternalMemoryImageCreateInfo;

typedef struct VkExternalMemoryBufferCreateInfo {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkExternalMemoryHandleTypeFlags handle_types;
} VkExternalMemoryBufferCreateInfo;

typedef struct VkExportMemoryAllocateInfo {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkExternalMemoryHandleTypeFlags handle_types;
} VkExportMemoryAllocateInfo;

typedef struct VkPhysicalDeviceExternalFenceInfo {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkExternalFenceHandleTypeFlagBits handle_type;
} VkPhysicalDeviceExternalFenceInfo;

typedef struct VkExternalFenceProperties {
    VkStructureType                s_type;
    void*                          p_next;
    VkExternalFenceHandleTypeFlags export_from_imported_handle_types;
    VkExternalFenceHandleTypeFlags compatible_handle_types;
    VkExternalFenceFeatureFlags    external_fence_features;
} VkExternalFenceProperties;

typedef struct VkExportFenceCreateInfo {
    VkStructureType                s_type;
    const void*                    p_next;
    VkExternalFenceHandleTypeFlags handle_types;
} VkExportFenceCreateInfo;

typedef struct VkExportSemaphoreCreateInfo {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkExternalSemaphoreHandleTypeFlags handle_types;
} VkExportSemaphoreCreateInfo;

typedef struct VkPhysicalDeviceExternalSemaphoreInfo {
    VkStructureType                       s_type;
    const void*                           p_next;
    VkExternalSemaphoreHandleTypeFlagBits handle_type;
} VkPhysicalDeviceExternalSemaphoreInfo;

typedef struct VkExternalSemaphoreProperties {
    VkStructureType                    s_type;
    void*                              p_next;
    VkExternalSemaphoreHandleTypeFlags export_from_imported_handle_types;
    VkExternalSemaphoreHandleTypeFlags compatible_handle_types;
    VkExternalSemaphoreFeatureFlags    external_semaphore_features;
} VkExternalSemaphoreProperties;

typedef struct VkPhysicalDeviceMaintenance3Properties {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_per_set_descriptors;
    VkDeviceSize    max_memory_allocation_size;
} VkPhysicalDeviceMaintenance3Properties;

typedef struct VkDescriptorSetLayoutSupport {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        supported;
} VkDescriptorSetLayoutSupport;

typedef struct VkPhysicalDeviceShaderDrawParametersFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_draw_parameters;
} VkPhysicalDeviceShaderDrawParametersFeatures;

typedef VkPhysicalDeviceShaderDrawParametersFeatures VkPhysicalDeviceShaderDrawParameterFeatures;

typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_instance_version)(uint32_t* p_api_version);
typedef VkResult(VKAPI_PTR* pfn_vk_bind_buffer_memory2)(VkDevice device, uint32_t bind_info_count,
                                                        const VkBindBufferMemoryInfo* p_bind_infos);
typedef VkResult(VKAPI_PTR* pfn_vk_bind_image_memory2)(VkDevice device, uint32_t bind_info_count,
                                                       const VkBindImageMemoryInfo* p_bind_infos);
typedef void(VKAPI_PTR* pfn_vk_get_device_group_peer_memory_features)(VkDevice device, uint32_t heap_index,
                                                                      uint32_t                  local_device_index,
                                                                      uint32_t                  remote_device_index,
                                                                      VkPeerMemoryFeatureFlags* p_peer_memory_features);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_device_mask)(VkCommandBuffer command_buffer, uint32_t device_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch_base)(VkCommandBuffer command_buffer, uint32_t base_group_x,
                                                  uint32_t base_group_y, uint32_t base_group_z, uint32_t group_count_x,
                                                  uint32_t group_count_y, uint32_t group_count_z);
typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_physical_device_groups)(
    VkInstance instance, uint32_t* p_physical_device_group_count,
    VkPhysicalDeviceGroupProperties* p_physical_device_group_properties);
typedef void(VKAPI_PTR* pfn_vk_get_image_memory_requirements2)(VkDevice                              device,
                                                               const VkImageMemoryRequirementsInfo2* p_info,
                                                               VkMemoryRequirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_buffer_memory_requirements2)(VkDevice                               device,
                                                                const VkBufferMemoryRequirementsInfo2* p_info,
                                                                VkMemoryRequirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_sparse_memory_requirements2)(
    VkDevice device, const VkImageSparseMemoryRequirementsInfo2* p_info, uint32_t* p_sparse_memory_requirement_count,
    VkSparseImageMemoryRequirements2* p_sparse_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_features2)(VkPhysicalDevice           physical_device,
                                                              VkPhysicalDeviceFeatures2* p_features);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_properties2)(VkPhysicalDevice             physical_device,
                                                                VkPhysicalDeviceProperties2* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_format_properties2)(VkPhysicalDevice     physical_device,
                                                                       VkFormat             format,
                                                                       VkFormatProperties2* p_format_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_image_format_properties2)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceImageFormatInfo2* p_image_format_info,
    VkImageFormatProperties2* p_image_format_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_properties2)(
    VkPhysicalDevice physical_device, uint32_t* p_queue_family_property_count,
    VkQueueFamilyProperties2* p_queue_family_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_memory_properties2)(
    VkPhysicalDevice physical_device, VkPhysicalDeviceMemoryProperties2* p_memory_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_sparse_image_format_properties2)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSparseImageFormatInfo2* p_format_info,
    uint32_t* p_property_count, VkSparseImageFormatProperties2* p_properties);
typedef void(VKAPI_PTR* pfn_vk_trim_command_pool)(VkDevice device, VkCommandPool command_pool,
                                                  VkCommandPoolTrimFlags flags);
typedef void(VKAPI_PTR* pfn_vk_get_device_queue2)(VkDevice device, const VkDeviceQueueInfo2* p_queue_info,
                                                  VkQueue* p_queue);
typedef VkResult(VKAPI_PTR* pfn_vk_create_sampler_ycbcr_conversion)(
    VkDevice device, const VkSamplerYcbcrConversionCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkSamplerYcbcrConversion* p_ycbcr_conversion);
typedef void(VKAPI_PTR* pfn_vk_destroy_sampler_ycbcr_conversion)(VkDevice                     device,
                                                                 VkSamplerYcbcrConversion     ycbcr_conversion,
                                                                 const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_create_descriptor_update_template)(
    VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* p_create_info,
    const VkAllocationCallbacks* p_allocator, VkDescriptorUpdateTemplate* p_descriptor_update_template);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_update_template)(
    VkDevice device, VkDescriptorUpdateTemplate descriptor_update_template, const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_update_descriptor_set_with_template)(
    VkDevice device, VkDescriptorSet descriptor_set, VkDescriptorUpdateTemplate descriptor_update_template,
    const void* p_data);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_buffer_properties)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalBufferInfo* p_external_buffer_info,
    VkExternalBufferProperties* p_external_buffer_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_fence_properties)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalFenceInfo* p_external_fence_info,
    VkExternalFenceProperties* p_external_fence_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_semaphore_properties)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalSemaphoreInfo* p_external_semaphore_info,
    VkExternalSemaphoreProperties* p_external_semaphore_properties);
typedef void(VKAPI_PTR* pfn_vk_get_descriptor_set_layout_support)(VkDevice                               device,
                                                                  const VkDescriptorSetLayoutCreateInfo* p_create_info,
                                                                  VkDescriptorSetLayoutSupport*          p_support);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL
vk_enumerate_instance_version(uint32_t* p_api_version) __asm("vkEnumerateInstanceVersion");

VKAPI_ATTR VkResult VKAPI_CALL vk_bind_buffer_memory2(
    VkDevice device, uint32_t bind_info_count, const VkBindBufferMemoryInfo* p_bind_infos) __asm("vkBindBufferMemory2");

VKAPI_ATTR VkResult VKAPI_CALL vk_bind_image_memory2(
    VkDevice device, uint32_t bind_info_count, const VkBindImageMemoryInfo* p_bind_infos) __asm("vkBindImageMemory2");

VKAPI_ATTR void VKAPI_CALL vk_get_device_group_peer_memory_features(
    VkDevice device, uint32_t heap_index, uint32_t local_device_index, uint32_t remote_device_index,
    VkPeerMemoryFeatureFlags* p_peer_memory_features) __asm("vkGetDeviceGroupPeerMemoryFeatures");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_device_mask(VkCommandBuffer command_buffer,
                                                  uint32_t        device_mask) __asm("vkCmdSetDeviceMask");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch_base(VkCommandBuffer command_buffer, uint32_t base_group_x,
                                                uint32_t base_group_y, uint32_t base_group_z, uint32_t group_count_x,
                                                uint32_t group_count_y,
                                                uint32_t group_count_z) __asm("vkCmdDispatchBase");

VKAPI_ATTR VkResult VKAPI_CALL vk_enumerate_physical_device_groups(
    VkInstance instance, uint32_t* p_physical_device_group_count,
    VkPhysicalDeviceGroupProperties* p_physical_device_group_properties) __asm("vkEnumeratePhysicalDeviceGroups");

VKAPI_ATTR void VKAPI_CALL
vk_get_image_memory_requirements2(VkDevice device, const VkImageMemoryRequirementsInfo2* p_info,
                                  VkMemoryRequirements2* p_memory_requirements) __asm("vkGetImageMemoryRequirements2");

VKAPI_ATTR void VKAPI_CALL vk_get_buffer_memory_requirements2(
    VkDevice device, const VkBufferMemoryRequirementsInfo2* p_info,
    VkMemoryRequirements2* p_memory_requirements) __asm("vkGetBufferMemoryRequirements2");

VKAPI_ATTR void VKAPI_CALL vk_get_image_sparse_memory_requirements2(
    VkDevice device, const VkImageSparseMemoryRequirementsInfo2* p_info, uint32_t* p_sparse_memory_requirement_count,
    VkSparseImageMemoryRequirements2* p_sparse_memory_requirements) __asm("vkGetImageSparseMemoryRequirements2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_features2(
    VkPhysicalDevice physical_device, VkPhysicalDeviceFeatures2* p_features) __asm("vkGetPhysicalDeviceFeatures2");

VKAPI_ATTR void VKAPI_CALL
vk_get_physical_device_properties2(VkPhysicalDevice             physical_device,
                                   VkPhysicalDeviceProperties2* p_properties) __asm("vkGetPhysicalDeviceProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_format_properties2(
    VkPhysicalDevice physical_device, VkFormat format,
    VkFormatProperties2* p_format_properties) __asm("vkGetPhysicalDeviceFormatProperties2");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_image_format_properties2(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceImageFormatInfo2* p_image_format_info,
    VkImageFormatProperties2* p_image_format_properties) __asm("vkGetPhysicalDeviceImageFormatProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_properties2(
    VkPhysicalDevice physical_device, uint32_t* p_queue_family_property_count,
    VkQueueFamilyProperties2* p_queue_family_properties) __asm("vkGetPhysicalDeviceQueueFamilyProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_memory_properties2(
    VkPhysicalDevice                   physical_device,
    VkPhysicalDeviceMemoryProperties2* p_memory_properties) __asm("vkGetPhysicalDeviceMemoryProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_sparse_image_format_properties2(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSparseImageFormatInfo2* p_format_info,
    uint32_t*                       p_property_count,
    VkSparseImageFormatProperties2* p_properties) __asm("vkGetPhysicalDeviceSparseImageFormatProperties2");

VKAPI_ATTR void VKAPI_CALL vk_trim_command_pool(VkDevice device, VkCommandPool command_pool,
                                                VkCommandPoolTrimFlags flags) __asm("vkTrimCommandPool");

VKAPI_ATTR void VKAPI_CALL vk_get_device_queue2(VkDevice device, const VkDeviceQueueInfo2* p_queue_info,
                                                VkQueue* p_queue) __asm("vkGetDeviceQueue2");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_sampler_ycbcr_conversion(
    VkDevice device, const VkSamplerYcbcrConversionCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkSamplerYcbcrConversion* p_ycbcr_conversion) __asm("vkCreateSamplerYcbcrConversion");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_sampler_ycbcr_conversion(VkDevice device, VkSamplerYcbcrConversion ycbcr_conversion,
                                    const VkAllocationCallbacks* p_allocator) __asm("vkDestroySamplerYcbcrConversion");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_descriptor_update_template(
    VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* p_create_info,
    const VkAllocationCallbacks* p_allocator,
    VkDescriptorUpdateTemplate*  p_descriptor_update_template) __asm("vkCreateDescriptorUpdateTemplate");

VKAPI_ATTR void VKAPI_CALL vk_destroy_descriptor_update_template(
    VkDevice device, VkDescriptorUpdateTemplate descriptor_update_template,
    const VkAllocationCallbacks* p_allocator) __asm("vkDestroyDescriptorUpdateTemplate");

VKAPI_ATTR void VKAPI_CALL vk_update_descriptor_set_with_template(
    VkDevice device, VkDescriptorSet descriptor_set, VkDescriptorUpdateTemplate descriptor_update_template,
    const void* p_data) __asm("vkUpdateDescriptorSetWithTemplate");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_buffer_properties(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalBufferInfo* p_external_buffer_info,
    VkExternalBufferProperties* p_external_buffer_properties) __asm("vkGetPhysicalDeviceExternalBufferProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_fence_properties(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalFenceInfo* p_external_fence_info,
    VkExternalFenceProperties* p_external_fence_properties) __asm("vkGetPhysicalDeviceExternalFenceProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_semaphore_properties(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalSemaphoreInfo* p_external_semaphore_info,
    VkExternalSemaphoreProperties*
        p_external_semaphore_properties) __asm("vkGetPhysicalDeviceExternalSemaphoreProperties");

VKAPI_ATTR void VKAPI_CALL
vk_get_descriptor_set_layout_support(VkDevice device, const VkDescriptorSetLayoutCreateInfo* p_create_info,
                                     VkDescriptorSetLayoutSupport* p_support) __asm("vkGetDescriptorSetLayoutSupport");
#endif

#define VK_VERSION_1_2 1
// vulkan 1.2 version number
#define VK_API_VERSION_1_2 VK_MAKE_VERSION(1, 2, 0) // patch version should always be set to 0

#define VK_MAX_DRIVER_NAME_SIZE 256
#define VK_MAX_DRIVER_INFO_SIZE 256

typedef enum VkDriverId {
    VK_DRIVER_ID_AMD_PROPRIETARY               = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE               = 2,
    VK_DRIVER_ID_MESA_RADV                     = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY            = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS     = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA        = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY       = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY          = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY               = 9,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER            = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY               = 11,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY          = 12,
    VK_DRIVER_ID_MESA_LLVMPIPE                 = 13,
    VK_DRIVER_ID_MOLTENVK                      = 14,
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR           = VK_DRIVER_ID_AMD_PROPRIETARY,
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR           = VK_DRIVER_ID_AMD_OPEN_SOURCE,
    VK_DRIVER_ID_MESA_RADV_KHR                 = VK_DRIVER_ID_MESA_RADV,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR        = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR    = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR   = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR      = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR           = VK_DRIVER_ID_ARM_PROPRIETARY,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR        = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR           = VK_DRIVER_ID_GGP_PROPRIETARY,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR      = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
    VK_DRIVER_ID_MAX_ENUM                      = 0x7fffffff
} VkDriverId;

typedef enum VkShaderFloatControlsIndependence {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY     = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL             = 1,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE            = 2,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR         = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR        = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM        = 0x7fffffff
} VkShaderFloatControlsIndependence;

typedef enum VkSamplerReductionMode {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE     = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN                  = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX                  = 2,
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT              = VK_SAMPLER_REDUCTION_MODE_MIN,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT              = VK_SAMPLER_REDUCTION_MODE_MAX,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM             = 0x7fffffff
} VkSamplerReductionMode;

typedef enum VkSemaphoreType {
    VK_SEMAPHORE_TYPE_BINARY       = 0,
    VK_SEMAPHORE_TYPE_TIMELINE     = 1,
    VK_SEMAPHORE_TYPE_BINARY_KHR   = VK_SEMAPHORE_TYPE_BINARY,
    VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
    VK_SEMAPHORE_TYPE_MAX_ENUM     = 0x7fffffff
} VkSemaphoreType;

typedef enum VkResolveModeFlagBits {
    VK_RESOLVE_MODE_NONE                = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT     = 0x00000001,
    VK_RESOLVE_MODE_AVERAGE_BIT         = 0x00000002,
    VK_RESOLVE_MODE_MIN_BIT             = 0x00000004,
    VK_RESOLVE_MODE_MAX_BIT             = 0x00000008,
    VK_RESOLVE_MODE_NONE_KHR            = VK_RESOLVE_MODE_NONE,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR     = VK_RESOLVE_MODE_AVERAGE_BIT,
    VK_RESOLVE_MODE_MIN_BIT_KHR         = VK_RESOLVE_MODE_MIN_BIT,
    VK_RESOLVE_MODE_MAX_BIT_KHR         = VK_RESOLVE_MODE_MAX_BIT,
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM  = 0x7fffffff
} VkResolveModeFlagBits;
typedef VkFlags VkResolveModeFlags;

typedef enum VkDescriptorBindingFlagBits {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT               = 0x00000001,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT     = 0x00000002,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT                 = 0x00000004,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT       = 0x00000008,
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT           = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT             = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT   = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM                  = 0x7fffffff
} VkDescriptorBindingFlagBits;
typedef VkFlags VkDescriptorBindingFlags;

typedef enum VkSemaphoreWaitFlagBits {
    VK_SEMAPHORE_WAIT_ANY_BIT            = 0x00000001,
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR        = VK_SEMAPHORE_WAIT_ANY_BIT,
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} VkSemaphoreWaitFlagBits;
typedef VkFlags VkSemaphoreWaitFlags;
typedef struct VkPhysicalDeviceVulkan11Features {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        storage_buffer16bit_access;
    VkBool32        uniform_and_storage_buffer16bit_access;
    VkBool32        storage_push_constant16;
    VkBool32        storage_input_output16;
    VkBool32        multiview;
    VkBool32        multiview_geometry_shader;
    VkBool32        multiview_tessellation_shader;
    VkBool32        variable_pointers_storage_buffer;
    VkBool32        variable_pointers;
    VkBool32        protected_memory;
    VkBool32        sampler_ycbcr_conversion;
    VkBool32        shader_draw_parameters;
} VkPhysicalDeviceVulkan11Features;

typedef struct VkPhysicalDeviceVulkan11Properties {
    VkStructureType         s_type;
    void*                   p_next;
    uint8_t                 device_uuid[VK_UUID_SIZE];
    uint8_t                 driver_uuid[VK_UUID_SIZE];
    uint8_t                 device_luid[VK_LUID_SIZE];
    uint32_t                device_node_mask;
    VkBool32                device_luidvalid;
    uint32_t                subgroup_size;
    VkShaderStageFlags      subgroup_supported_stages;
    VkSubgroupFeatureFlags  subgroup_supported_operations;
    VkBool32                subgroup_quad_operations_in_all_stages;
    VkPointClippingBehavior point_clipping_behavior;
    uint32_t                max_multiview_view_count;
    uint32_t                max_multiview_instance_index;
    VkBool32                protected_no_fault;
    uint32_t                max_per_set_descriptors;
    VkDeviceSize            max_memory_allocation_size;
} VkPhysicalDeviceVulkan11Properties;

typedef struct VkPhysicalDeviceVulkan12Features {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        sampler_mirror_clamp_to_edge;
    VkBool32        draw_indirect_count;
    VkBool32        storage_buffer8bit_access;
    VkBool32        uniform_and_storage_buffer8bit_access;
    VkBool32        storage_push_constant8;
    VkBool32        shader_buffer_int64atomics;
    VkBool32        shader_shared_int64atomics;
    VkBool32        shader_float16;
    VkBool32        shader_int8;
    VkBool32        descriptor_indexing;
    VkBool32        shader_input_attachment_array_dynamic_indexing;
    VkBool32        shader_uniform_texel_buffer_array_dynamic_indexing;
    VkBool32        shader_storage_texel_buffer_array_dynamic_indexing;
    VkBool32        shader_uniform_buffer_array_non_uniform_indexing;
    VkBool32        shader_sampled_image_array_non_uniform_indexing;
    VkBool32        shader_storage_buffer_array_non_uniform_indexing;
    VkBool32        shader_storage_image_array_non_uniform_indexing;
    VkBool32        shader_input_attachment_array_non_uniform_indexing;
    VkBool32        shader_uniform_texel_buffer_array_non_uniform_indexing;
    VkBool32        shader_storage_texel_buffer_array_non_uniform_indexing;
    VkBool32        descriptor_binding_uniform_buffer_update_after_bind;
    VkBool32        descriptor_binding_sampled_image_update_after_bind;
    VkBool32        descriptor_binding_storage_image_update_after_bind;
    VkBool32        descriptor_binding_storage_buffer_update_after_bind;
    VkBool32        descriptor_binding_uniform_texel_buffer_update_after_bind;
    VkBool32        descriptor_binding_storage_texel_buffer_update_after_bind;
    VkBool32        descriptor_binding_update_unused_while_pending;
    VkBool32        descriptor_binding_partially_bound;
    VkBool32        descriptor_binding_variable_descriptor_count;
    VkBool32        runtime_descriptor_array;
    VkBool32        sampler_filter_minmax;
    VkBool32        scalar_block_layout;
    VkBool32        imageless_framebuffer;
    VkBool32        uniform_buffer_standard_layout;
    VkBool32        shader_subgroup_extended_types;
    VkBool32        separate_depth_stencil_layouts;
    VkBool32        host_query_reset;
    VkBool32        timeline_semaphore;
    VkBool32        buffer_device_address;
    VkBool32        buffer_device_address_capture_replay;
    VkBool32        buffer_device_address_multi_device;
    VkBool32        vulkan_memory_model;
    VkBool32        vulkan_memory_model_device_scope;
    VkBool32        vulkan_memory_model_availability_visibility_chains;
    VkBool32        shader_output_viewport_index;
    VkBool32        shader_output_layer;
    VkBool32        subgroup_broadcast_dynamic_id;
} VkPhysicalDeviceVulkan12Features;

typedef struct VkConformanceVersion {
    uint8_t major;
    uint8_t minor;
    uint8_t subminor;
    uint8_t patch;
} VkConformanceVersion;

typedef struct VkPhysicalDeviceVulkan12Properties {
    VkStructureType                   s_type;
    void*                             p_next;
    VkDriverId                        driver_id;
    char                              driver_name[VK_MAX_DRIVER_NAME_SIZE];
    char                              driver_info[VK_MAX_DRIVER_INFO_SIZE];
    VkConformanceVersion              conformance_version;
    VkShaderFloatControlsIndependence denorm_behavior_independence;
    VkShaderFloatControlsIndependence rounding_mode_independence;
    VkBool32                          shader_signed_zero_inf_nan_preserve_float16;
    VkBool32                          shader_signed_zero_inf_nan_preserve_float32;
    VkBool32                          shader_signed_zero_inf_nan_preserve_float64;
    VkBool32                          shader_denorm_preserve_float16;
    VkBool32                          shader_denorm_preserve_float32;
    VkBool32                          shader_denorm_preserve_float64;
    VkBool32                          shader_denorm_flush_to_zero_float16;
    VkBool32                          shader_denorm_flush_to_zero_float32;
    VkBool32                          shader_denorm_flush_to_zero_float64;
    VkBool32                          shader_rounding_mode_rtefloat16;
    VkBool32                          shader_rounding_mode_rtefloat32;
    VkBool32                          shader_rounding_mode_rtefloat64;
    VkBool32                          shader_rounding_mode_rtzfloat16;
    VkBool32                          shader_rounding_mode_rtzfloat32;
    VkBool32                          shader_rounding_mode_rtzfloat64;
    uint32_t                          max_update_after_bind_descriptors_in_all_pools;
    VkBool32                          shader_uniform_buffer_array_non_uniform_indexing_native;
    VkBool32                          shader_sampled_image_array_non_uniform_indexing_native;
    VkBool32                          shader_storage_buffer_array_non_uniform_indexing_native;
    VkBool32                          shader_storage_image_array_non_uniform_indexing_native;
    VkBool32                          shader_input_attachment_array_non_uniform_indexing_native;
    VkBool32                          robust_buffer_access_update_after_bind;
    VkBool32                          quad_divergent_implicit_lod;
    uint32_t                          max_per_stage_descriptor_update_after_bind_samplers;
    uint32_t                          max_per_stage_descriptor_update_after_bind_uniform_buffers;
    uint32_t                          max_per_stage_descriptor_update_after_bind_storage_buffers;
    uint32_t                          max_per_stage_descriptor_update_after_bind_sampled_images;
    uint32_t                          max_per_stage_descriptor_update_after_bind_storage_images;
    uint32_t                          max_per_stage_descriptor_update_after_bind_input_attachments;
    uint32_t                          max_per_stage_update_after_bind_resources;
    uint32_t                          max_descriptor_set_update_after_bind_samplers;
    uint32_t                          max_descriptor_set_update_after_bind_uniform_buffers;
    uint32_t                          max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
    uint32_t                          max_descriptor_set_update_after_bind_storage_buffers;
    uint32_t                          max_descriptor_set_update_after_bind_storage_buffers_dynamic;
    uint32_t                          max_descriptor_set_update_after_bind_sampled_images;
    uint32_t                          max_descriptor_set_update_after_bind_storage_images;
    uint32_t                          max_descriptor_set_update_after_bind_input_attachments;
    VkResolveModeFlags                supported_depth_resolve_modes;
    VkResolveModeFlags                supported_stencil_resolve_modes;
    VkBool32                          independent_resolve_none;
    VkBool32                          independent_resolve;
    VkBool32                          filter_minmax_single_component_formats;
    VkBool32                          filter_minmax_image_component_mapping;
    uint64_t                          max_timeline_semaphore_value_difference;
    VkSampleCountFlags                framebuffer_integer_color_sample_counts;
} VkPhysicalDeviceVulkan12Properties;

typedef struct VkImageFormatListCreateInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        view_format_count;
    const VkFormat* p_view_formats;
} VkImageFormatListCreateInfo;

typedef struct VkAttachmentDescription2 {
    VkStructureType              s_type;
    const void*                  p_next;
    VkAttachmentDescriptionFlags flags;
    VkFormat                     format;
    VkSampleCountFlagBits        samples;
    VkAttachmentLoadOp           load_op;
    VkAttachmentStoreOp          store_op;
    VkAttachmentLoadOp           stencil_load_op;
    VkAttachmentStoreOp          stencil_store_op;
    VkImageLayout                initial_layout;
    VkImageLayout                final_layout;
} VkAttachmentDescription2;

typedef struct VkAttachmentReference2 {
    VkStructureType    s_type;
    const void*        p_next;
    uint32_t           attachment;
    VkImageLayout      layout;
    VkImageAspectFlags aspect_mask;
} VkAttachmentReference2;

typedef struct VkSubpassDescription2 {
    VkStructureType               s_type;
    const void*                   p_next;
    VkSubpassDescriptionFlags     flags;
    VkPipelineBindPoint           pipeline_bind_point;
    uint32_t                      view_mask;
    uint32_t                      input_attachment_count;
    const VkAttachmentReference2* p_input_attachments;
    uint32_t                      color_attachment_count;
    const VkAttachmentReference2* p_color_attachments;
    const VkAttachmentReference2* p_resolve_attachments;
    const VkAttachmentReference2* p_depth_stencil_attachment;
    uint32_t                      preserve_attachment_count;
    const uint32_t*               p_preserve_attachments;
} VkSubpassDescription2;

typedef struct VkSubpassDependency2 {
    VkStructureType      s_type;
    const void*          p_next;
    uint32_t             src_subpass;
    uint32_t             dst_subpass;
    VkPipelineStageFlags src_stage_mask;
    VkPipelineStageFlags dst_stage_mask;
    VkAccessFlags        src_access_mask;
    VkAccessFlags        dst_access_mask;
    VkDependencyFlags    dependency_flags;
    int32_t              view_offset;
} VkSubpassDependency2;

typedef struct VkRenderPassCreateInfo2 {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkRenderPassCreateFlags         flags;
    uint32_t                        attachment_count;
    const VkAttachmentDescription2* p_attachments;
    uint32_t                        subpass_count;
    const VkSubpassDescription2*    p_subpasses;
    uint32_t                        dependency_count;
    const VkSubpassDependency2*     p_dependencies;
    uint32_t                        correlated_view_mask_count;
    const uint32_t*                 p_correlated_view_masks;
} VkRenderPassCreateInfo2;

typedef struct VkSubpassBeginInfo {
    VkStructureType   s_type;
    const void*       p_next;
    VkSubpassContents contents;
} VkSubpassBeginInfo;

typedef struct VkSubpassEndInfo {
    VkStructureType s_type;
    const void*     p_next;
} VkSubpassEndInfo;

typedef struct VkPhysicalDevice8BitStorageFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        storage_buffer8bit_access;
    VkBool32        uniform_and_storage_buffer8bit_access;
    VkBool32        storage_push_constant8;
} VkPhysicalDevice8BitStorageFeatures;

typedef struct VkPhysicalDeviceDriverProperties {
    VkStructureType      s_type;
    void*                p_next;
    VkDriverId           driver_id;
    char                 driver_name[VK_MAX_DRIVER_NAME_SIZE];
    char                 driver_info[VK_MAX_DRIVER_INFO_SIZE];
    VkConformanceVersion conformance_version;
} VkPhysicalDeviceDriverProperties;

typedef struct VkPhysicalDeviceShaderAtomicInt64Features {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_buffer_int64atomics;
    VkBool32        shader_shared_int64atomics;
} VkPhysicalDeviceShaderAtomicInt64Features;

typedef struct VkPhysicalDeviceShaderFloat16Int8Features {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_float16;
    VkBool32        shader_int8;
} VkPhysicalDeviceShaderFloat16Int8Features;

typedef struct VkPhysicalDeviceFloatControlsProperties {
    VkStructureType                   s_type;
    void*                             p_next;
    VkShaderFloatControlsIndependence denorm_behavior_independence;
    VkShaderFloatControlsIndependence rounding_mode_independence;
    VkBool32                          shader_signed_zero_inf_nan_preserve_float16;
    VkBool32                          shader_signed_zero_inf_nan_preserve_float32;
    VkBool32                          shader_signed_zero_inf_nan_preserve_float64;
    VkBool32                          shader_denorm_preserve_float16;
    VkBool32                          shader_denorm_preserve_float32;
    VkBool32                          shader_denorm_preserve_float64;
    VkBool32                          shader_denorm_flush_to_zero_float16;
    VkBool32                          shader_denorm_flush_to_zero_float32;
    VkBool32                          shader_denorm_flush_to_zero_float64;
    VkBool32                          shader_rounding_mode_rtefloat16;
    VkBool32                          shader_rounding_mode_rtefloat32;
    VkBool32                          shader_rounding_mode_rtefloat64;
    VkBool32                          shader_rounding_mode_rtzfloat16;
    VkBool32                          shader_rounding_mode_rtzfloat32;
    VkBool32                          shader_rounding_mode_rtzfloat64;
} VkPhysicalDeviceFloatControlsProperties;

typedef struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    VkStructureType                 s_type;
    const void*                     p_next;
    uint32_t                        binding_count;
    const VkDescriptorBindingFlags* p_binding_flags;
} VkDescriptorSetLayoutBindingFlagsCreateInfo;

typedef struct VkPhysicalDeviceDescriptorIndexingFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_input_attachment_array_dynamic_indexing;
    VkBool32        shader_uniform_texel_buffer_array_dynamic_indexing;
    VkBool32        shader_storage_texel_buffer_array_dynamic_indexing;
    VkBool32        shader_uniform_buffer_array_non_uniform_indexing;
    VkBool32        shader_sampled_image_array_non_uniform_indexing;
    VkBool32        shader_storage_buffer_array_non_uniform_indexing;
    VkBool32        shader_storage_image_array_non_uniform_indexing;
    VkBool32        shader_input_attachment_array_non_uniform_indexing;
    VkBool32        shader_uniform_texel_buffer_array_non_uniform_indexing;
    VkBool32        shader_storage_texel_buffer_array_non_uniform_indexing;
    VkBool32        descriptor_binding_uniform_buffer_update_after_bind;
    VkBool32        descriptor_binding_sampled_image_update_after_bind;
    VkBool32        descriptor_binding_storage_image_update_after_bind;
    VkBool32        descriptor_binding_storage_buffer_update_after_bind;
    VkBool32        descriptor_binding_uniform_texel_buffer_update_after_bind;
    VkBool32        descriptor_binding_storage_texel_buffer_update_after_bind;
    VkBool32        descriptor_binding_update_unused_while_pending;
    VkBool32        descriptor_binding_partially_bound;
    VkBool32        descriptor_binding_variable_descriptor_count;
    VkBool32        runtime_descriptor_array;
} VkPhysicalDeviceDescriptorIndexingFeatures;

typedef struct VkPhysicalDeviceDescriptorIndexingProperties {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_update_after_bind_descriptors_in_all_pools;
    VkBool32        shader_uniform_buffer_array_non_uniform_indexing_native;
    VkBool32        shader_sampled_image_array_non_uniform_indexing_native;
    VkBool32        shader_storage_buffer_array_non_uniform_indexing_native;
    VkBool32        shader_storage_image_array_non_uniform_indexing_native;
    VkBool32        shader_input_attachment_array_non_uniform_indexing_native;
    VkBool32        robust_buffer_access_update_after_bind;
    VkBool32        quad_divergent_implicit_lod;
    uint32_t        max_per_stage_descriptor_update_after_bind_samplers;
    uint32_t        max_per_stage_descriptor_update_after_bind_uniform_buffers;
    uint32_t        max_per_stage_descriptor_update_after_bind_storage_buffers;
    uint32_t        max_per_stage_descriptor_update_after_bind_sampled_images;
    uint32_t        max_per_stage_descriptor_update_after_bind_storage_images;
    uint32_t        max_per_stage_descriptor_update_after_bind_input_attachments;
    uint32_t        max_per_stage_update_after_bind_resources;
    uint32_t        max_descriptor_set_update_after_bind_samplers;
    uint32_t        max_descriptor_set_update_after_bind_uniform_buffers;
    uint32_t        max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
    uint32_t        max_descriptor_set_update_after_bind_storage_buffers;
    uint32_t        max_descriptor_set_update_after_bind_storage_buffers_dynamic;
    uint32_t        max_descriptor_set_update_after_bind_sampled_images;
    uint32_t        max_descriptor_set_update_after_bind_storage_images;
    uint32_t        max_descriptor_set_update_after_bind_input_attachments;
} VkPhysicalDeviceDescriptorIndexingProperties;

typedef struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        descriptor_set_count;
    const uint32_t* p_descriptor_counts;
} VkDescriptorSetVariableDescriptorCountAllocateInfo;

typedef struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_variable_descriptor_count;
} VkDescriptorSetVariableDescriptorCountLayoutSupport;

typedef struct VkSubpassDescriptionDepthStencilResolve {
    VkStructureType               s_type;
    const void*                   p_next;
    VkResolveModeFlagBits         depth_resolve_mode;
    VkResolveModeFlagBits         stencil_resolve_mode;
    const VkAttachmentReference2* p_depth_stencil_resolve_attachment;
} VkSubpassDescriptionDepthStencilResolve;

typedef struct VkPhysicalDeviceDepthStencilResolveProperties {
    VkStructureType    s_type;
    void*              p_next;
    VkResolveModeFlags supported_depth_resolve_modes;
    VkResolveModeFlags supported_stencil_resolve_modes;
    VkBool32           independent_resolve_none;
    VkBool32           independent_resolve;
} VkPhysicalDeviceDepthStencilResolveProperties;

typedef struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        scalar_block_layout;
} VkPhysicalDeviceScalarBlockLayoutFeatures;

typedef struct VkImageStencilUsageCreateInfo {
    VkStructureType   s_type;
    const void*       p_next;
    VkImageUsageFlags stencil_usage;
} VkImageStencilUsageCreateInfo;

typedef struct VkSamplerReductionModeCreateInfo {
    VkStructureType        s_type;
    const void*            p_next;
    VkSamplerReductionMode reduction_mode;
} VkSamplerReductionModeCreateInfo;

typedef struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        filter_minmax_single_component_formats;
    VkBool32        filter_minmax_image_component_mapping;
} VkPhysicalDeviceSamplerFilterMinmaxProperties;

typedef struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        vulkan_memory_model;
    VkBool32        vulkan_memory_model_device_scope;
    VkBool32        vulkan_memory_model_availability_visibility_chains;
} VkPhysicalDeviceVulkanMemoryModelFeatures;

typedef struct VkPhysicalDeviceImagelessFramebufferFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        imageless_framebuffer;
} VkPhysicalDeviceImagelessFramebufferFeatures;

typedef struct VkFramebufferAttachmentImageInfo {
    VkStructureType    s_type;
    const void*        p_next;
    VkImageCreateFlags flags;
    VkImageUsageFlags  usage;
    uint32_t           width;
    uint32_t           height;
    uint32_t           layer_count;
    uint32_t           view_format_count;
    const VkFormat*    p_view_formats;
} VkFramebufferAttachmentImageInfo;

typedef struct VkFramebufferAttachmentsCreateInfo {
    VkStructureType                         s_type;
    const void*                             p_next;
    uint32_t                                attachment_image_info_count;
    const VkFramebufferAttachmentImageInfo* p_attachment_image_infos;
} VkFramebufferAttachmentsCreateInfo;

typedef struct VkRenderPassAttachmentBeginInfo {
    VkStructureType    s_type;
    const void*        p_next;
    uint32_t           attachment_count;
    const VkImageView* p_attachments;
} VkRenderPassAttachmentBeginInfo;

typedef struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        uniform_buffer_standard_layout;
} VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

typedef struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_subgroup_extended_types;
} VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

typedef struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        separate_depth_stencil_layouts;
} VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

typedef struct VkAttachmentReferenceStencilLayout {
    VkStructureType s_type;
    void*           p_next;
    VkImageLayout   stencil_layout;
} VkAttachmentReferenceStencilLayout;

typedef struct VkAttachmentDescriptionStencilLayout {
    VkStructureType s_type;
    void*           p_next;
    VkImageLayout   stencil_initial_layout;
    VkImageLayout   stencil_final_layout;
} VkAttachmentDescriptionStencilLayout;

typedef struct VkPhysicalDeviceHostQueryResetFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        host_query_reset;
} VkPhysicalDeviceHostQueryResetFeatures;

typedef struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        timeline_semaphore;
} VkPhysicalDeviceTimelineSemaphoreFeatures;

typedef struct VkPhysicalDeviceTimelineSemaphoreProperties {
    VkStructureType s_type;
    void*           p_next;
    uint64_t        max_timeline_semaphore_value_difference;
} VkPhysicalDeviceTimelineSemaphoreProperties;

typedef struct VkSemaphoreTypeCreateInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkSemaphoreType semaphore_type;
    uint64_t        initial_value;
} VkSemaphoreTypeCreateInfo;

typedef struct VkTimelineSemaphoreSubmitInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        wait_semaphore_value_count;
    const uint64_t* p_wait_semaphore_values;
    uint32_t        signal_semaphore_value_count;
    const uint64_t* p_signal_semaphore_values;
} VkTimelineSemaphoreSubmitInfo;

typedef struct VkSemaphoreWaitInfo {
    VkStructureType      s_type;
    const void*          p_next;
    VkSemaphoreWaitFlags flags;
    uint32_t             semaphore_count;
    const VkSemaphore*   p_semaphores;
    const uint64_t*      p_values;
} VkSemaphoreWaitInfo;

typedef struct VkSemaphoreSignalInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkSemaphore     semaphore;
    uint64_t        value;
} VkSemaphoreSignalInfo;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        buffer_device_address;
    VkBool32        buffer_device_address_capture_replay;
    VkBool32        buffer_device_address_multi_device;
} VkPhysicalDeviceBufferDeviceAddressFeatures;

typedef struct VkBufferDeviceAddressInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkBuffer        buffer;
} VkBufferDeviceAddressInfo;

typedef struct VkBufferOpaqueCaptureAddressCreateInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint64_t        opaque_capture_address;
} VkBufferOpaqueCaptureAddressCreateInfo;

typedef struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    VkStructureType s_type;
    const void*     p_next;
    uint64_t        opaque_capture_address;
} VkMemoryOpaqueCaptureAddressAllocateInfo;

typedef struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    VkStructureType s_type;
    const void*     p_next;
    VkDeviceMemory  memory;
} VkDeviceMemoryOpaqueCaptureAddressInfo;

typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_count)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                        VkDeviceSize offset, VkBuffer count_buffer,
                                                        VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                                        uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect_count)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                                VkDeviceSize offset, VkBuffer count_buffer,
                                                                VkDeviceSize count_buffer_offset,
                                                                uint32_t max_draw_count, uint32_t stride);
typedef VkResult(VKAPI_PTR* pfn_vk_create_render_pass2)(VkDevice device, const VkRenderPassCreateInfo2* p_create_info,
                                                        const VkAllocationCallbacks* p_allocator,
                                                        VkRenderPass*                p_render_pass);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_render_pass2)(VkCommandBuffer              command_buffer,
                                                       const VkRenderPassBeginInfo* p_render_pass_begin,
                                                       const VkSubpassBeginInfo*    p_subpass_begin_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_next_subpass2)(VkCommandBuffer           command_buffer,
                                                  const VkSubpassBeginInfo* p_subpass_begin_info,
                                                  const VkSubpassEndInfo*   p_subpass_end_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_render_pass2)(VkCommandBuffer         command_buffer,
                                                     const VkSubpassEndInfo* p_subpass_end_info);
typedef void(VKAPI_PTR* pfn_vk_reset_query_pool)(VkDevice device, VkQueryPool query_pool, uint32_t first_query,
                                                 uint32_t query_count);
typedef VkResult(VKAPI_PTR* pfn_vk_get_semaphore_counter_value)(VkDevice device, VkSemaphore semaphore,
                                                                uint64_t* p_value);
typedef VkResult(VKAPI_PTR* pfn_vk_wait_semaphores)(VkDevice device, const VkSemaphoreWaitInfo* p_wait_info,
                                                    uint64_t timeout);
typedef VkResult(VKAPI_PTR* pfn_vk_signal_semaphore)(VkDevice device, const VkSemaphoreSignalInfo* p_signal_info);
typedef VkDeviceAddress(VKAPI_PTR* pfn_vk_get_buffer_device_address)(VkDevice                         device,
                                                                     const VkBufferDeviceAddressInfo* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_buffer_opaque_capture_address)(VkDevice                         device,
                                                                      const VkBufferDeviceAddressInfo* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_device_memory_opaque_capture_address)(
    VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_count(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                      VkDeviceSize offset, VkBuffer count_buffer,
                                                      VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                                      uint32_t stride) __asm("vkCmdDrawIndirectCount");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed_indirect_count(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                              VkDeviceSize offset, VkBuffer count_buffer,
                                                              VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                                              uint32_t stride) __asm("vkCmdDrawIndexedIndirectCount");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_render_pass2(VkDevice device, const VkRenderPassCreateInfo2* p_create_info,
                                                      const VkAllocationCallbacks* p_allocator,
                                                      VkRenderPass* p_render_pass) __asm("vkCreateRenderPass2");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_begin_render_pass2(VkCommandBuffer command_buffer, const VkRenderPassBeginInfo* p_render_pass_begin,
                          const VkSubpassBeginInfo* p_subpass_begin_info) __asm("vkCmdBeginRenderPass2");

VKAPI_ATTR void VKAPI_CALL vk_cmd_next_subpass2(VkCommandBuffer           command_buffer,
                                                const VkSubpassBeginInfo* p_subpass_begin_info,
                                                const VkSubpassEndInfo* p_subpass_end_info) __asm("vkCmdNextSubpass2");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_render_pass2(
    VkCommandBuffer command_buffer, const VkSubpassEndInfo* p_subpass_end_info) __asm("vkCmdEndRenderPass2");

VKAPI_ATTR void VKAPI_CALL vk_reset_query_pool(VkDevice device, VkQueryPool query_pool, uint32_t first_query,
                                               uint32_t query_count) __asm("vkResetQueryPool");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_semaphore_counter_value(VkDevice device, VkSemaphore semaphore,
                                                              uint64_t* p_value) __asm("vkGetSemaphoreCounterValue");

VKAPI_ATTR VkResult VKAPI_CALL vk_wait_semaphores(VkDevice device, const VkSemaphoreWaitInfo* p_wait_info,
                                                  uint64_t timeout) __asm("vkWaitSemaphores");

VKAPI_ATTR VkResult VKAPI_CALL
vk_signal_semaphore(VkDevice device, const VkSemaphoreSignalInfo* p_signal_info) __asm("vkSignalSemaphore");

VKAPI_ATTR VkDeviceAddress VKAPI_CALL vk_get_buffer_device_address(
    VkDevice device, const VkBufferDeviceAddressInfo* p_info) __asm("vkGetBufferDeviceAddress");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_buffer_opaque_capture_address(
    VkDevice device, const VkBufferDeviceAddressInfo* p_info) __asm("vkGetBufferOpaqueCaptureAddress");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_device_memory_opaque_capture_address(
    VkDevice                                      device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* p_info) __asm("vkGetDeviceMemoryOpaqueCaptureAddress");
#endif

#define vk_khr_surface 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)
#define VK_KHR_SURFACE_SPEC_VERSION 25
#define VK_KHR_SURFACE_EXTENSION_NAME "VK_KHR_surface"

typedef enum VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR                 = 0,
    VK_PRESENT_MODE_MAILBOX_KHR                   = 1,
    VK_PRESENT_MODE_FIFO_KHR                      = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR              = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR     = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_MAX_ENUM_KHR                  = 0x7fffffff
} VkPresentModeKHR;

typedef enum VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR          = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT    = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT    = 1000104002,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT       = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT        = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT            = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT         = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT           = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT            = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT             = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT               = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT         = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT      = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT            = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD          = 1000213000,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR           = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT           = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
    VK_COLOR_SPACE_MAX_ENUM_KHR                = 0x7fffffff
} VkColorSpaceKHR;

typedef enum VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR                     = 0x00000001,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR                    = 0x00000002,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR                   = 0x00000004,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR                   = 0x00000008,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR            = 0x00000010,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR  = 0x00000020,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR                      = 0x00000100,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR               = 0x7fffffff
} VkSurfaceTransformFlagBitsKHR;

typedef enum VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR          = 0x00000001,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR  = 0x00000002,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR         = 0x00000008,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR  = 0x7fffffff
} VkCompositeAlphaFlagBitsKHR;
typedef VkFlags VkCompositeAlphaFlagsKHR;
typedef VkFlags VkSurfaceTransformFlagsKHR;
typedef struct VkSurfaceCapabilitiesKHR {
    uint32_t                      min_image_count;
    uint32_t                      max_image_count;
    VkExtent2D                    current_extent;
    VkExtent2D                    min_image_extent;
    VkExtent2D                    max_image_extent;
    uint32_t                      max_image_array_layers;
    VkSurfaceTransformFlagsKHR    supported_transforms;
    VkSurfaceTransformFlagBitsKHR current_transform;
    VkCompositeAlphaFlagsKHR      supported_composite_alpha;
    VkImageUsageFlags             supported_usage_flags;
} VkSurfaceCapabilitiesKHR;

typedef struct VkSurfaceFormatKHR {
    VkFormat        format;
    VkColorSpaceKHR color_space;
} VkSurfaceFormatKHR;

typedef void(VKAPI_PTR* pfn_vk_destroy_surface_khr)(VkInstance instance, VkSurfaceKHR surface,
                                                    const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_surface_support_khr)(VkPhysicalDevice physical_device,
                                                                            uint32_t         queue_family_index,
                                                                            VkSurfaceKHR     surface,
                                                                            VkBool32*        p_supported);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_surface_capabilities_khr)(
    VkPhysicalDevice physical_device, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* p_surface_capabilities);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_surface_formats_khr)(VkPhysicalDevice    physical_device,
                                                                            VkSurfaceKHR        surface,
                                                                            uint32_t*           p_surface_format_count,
                                                                            VkSurfaceFormatKHR* p_surface_formats);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_surface_present_modes_khr)(VkPhysicalDevice physical_device,
                                                                                  VkSurfaceKHR     surface,
                                                                                  uint32_t*        p_present_mode_count,
                                                                                  VkPresentModeKHR* p_present_modes);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_destroy_surface_khr(
    VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* p_allocator) __asm("vkDestroySurfaceKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_surface_support_khr(
    VkPhysicalDevice physical_device, uint32_t queue_family_index, VkSurfaceKHR surface,
    VkBool32* p_supported) __asm("vkGetPhysicalDeviceSurfaceSupportKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_surface_capabilities_khr(
    VkPhysicalDevice physical_device, VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* p_surface_capabilities) __asm("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_surface_formats_khr(
    VkPhysicalDevice physical_device, VkSurfaceKHR surface, uint32_t* p_surface_format_count,
    VkSurfaceFormatKHR* p_surface_formats) __asm("vkGetPhysicalDeviceSurfaceFormatsKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_surface_present_modes_khr(
    VkPhysicalDevice physical_device, VkSurfaceKHR surface, uint32_t* p_present_mode_count,
    VkPresentModeKHR* p_present_modes) __asm("vkGetPhysicalDeviceSurfacePresentModesKHR");
#endif

#define vk_khr_swapchain 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)
#define VK_KHR_SWAPCHAIN_SPEC_VERSION 70
#define VK_KHR_SWAPCHAIN_EXTENSION_NAME "VK_KHR_swapchain"

typedef enum VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR                   = 0x00000002,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR              = 0x00000004,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR              = 0x7fffffff
} VkSwapchainCreateFlagBitsKHR;
typedef VkFlags VkSwapchainCreateFlagsKHR;

typedef enum VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR              = 0x00000001,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR             = 0x00000002,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR                = 0x00000004,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR     = 0x7fffffff
} VkDeviceGroupPresentModeFlagBitsKHR;
typedef VkFlags VkDeviceGroupPresentModeFlagsKHR;
typedef struct VkSwapchainCreateInfoKHR {
    VkStructureType               s_type;
    const void*                   p_next;
    VkSwapchainCreateFlagsKHR     flags;
    VkSurfaceKHR                  surface;
    uint32_t                      min_image_count;
    VkFormat                      image_format;
    VkColorSpaceKHR               image_color_space;
    VkExtent2D                    image_extent;
    uint32_t                      image_array_layers;
    VkImageUsageFlags             image_usage;
    VkSharingMode                 image_sharing_mode;
    uint32_t                      queue_family_index_count;
    const uint32_t*               p_queue_family_indices;
    VkSurfaceTransformFlagBitsKHR pre_transform;
    VkCompositeAlphaFlagBitsKHR   composite_alpha;
    VkPresentModeKHR              present_mode;
    VkBool32                      clipped;
    VkSwapchainKHR                old_swapchain;
} VkSwapchainCreateInfoKHR;

typedef struct VkPresentInfoKHR {
    VkStructureType       s_type;
    const void*           p_next;
    uint32_t              wait_semaphore_count;
    const VkSemaphore*    p_wait_semaphores;
    uint32_t              swapchain_count;
    const VkSwapchainKHR* p_swapchains;
    const uint32_t*       p_image_indices;
    VkResult*             p_results;
} VkPresentInfoKHR;

typedef struct VkImageSwapchainCreateInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    VkSwapchainKHR  swapchain;
} VkImageSwapchainCreateInfoKHR;

typedef struct VkBindImageMemorySwapchainInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    VkSwapchainKHR  swapchain;
    uint32_t        image_index;
} VkBindImageMemorySwapchainInfoKHR;

typedef struct VkAcquireNextImageInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    VkSwapchainKHR  swapchain;
    uint64_t        timeout;
    VkSemaphore     semaphore;
    VkFence         fence;
    uint32_t        device_mask;
} VkAcquireNextImageInfoKHR;

typedef struct VkDeviceGroupPresentCapabilitiesKHR {
    VkStructureType                  s_type;
    const void*                      p_next;
    uint32_t                         present_mask[VK_MAX_DEVICE_GROUP_SIZE];
    VkDeviceGroupPresentModeFlagsKHR modes;
} VkDeviceGroupPresentCapabilitiesKHR;

typedef struct VkDeviceGroupPresentInfoKHR {
    VkStructureType                     s_type;
    const void*                         p_next;
    uint32_t                            swapchain_count;
    const uint32_t*                     p_device_masks;
    VkDeviceGroupPresentModeFlagBitsKHR mode;
} VkDeviceGroupPresentInfoKHR;

typedef struct VkDeviceGroupSwapchainCreateInfoKHR {
    VkStructureType                  s_type;
    const void*                      p_next;
    VkDeviceGroupPresentModeFlagsKHR modes;
} VkDeviceGroupSwapchainCreateInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_create_swapchain_khr)(VkDevice device, const VkSwapchainCreateInfoKHR* p_create_info,
                                                         const VkAllocationCallbacks* p_allocator,
                                                         VkSwapchainKHR*              p_swapchain);
typedef void(VKAPI_PTR* pfn_vk_destroy_swapchain_khr)(VkDevice device, VkSwapchainKHR swapchain,
                                                      const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_get_swapchain_images_khr)(VkDevice device, VkSwapchainKHR swapchain,
                                                             uint32_t* p_swapchain_image_count,
                                                             VkImage*  p_swapchain_images);
typedef VkResult(VKAPI_PTR* pfn_vk_acquire_next_image_khr)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout,
                                                           VkSemaphore semaphore, VkFence fence,
                                                           uint32_t* p_image_index);
typedef VkResult(VKAPI_PTR* pfn_vk_queue_present_khr)(VkQueue queue, const VkPresentInfoKHR* p_present_info);
typedef VkResult(VKAPI_PTR* pfn_vk_get_device_group_present_capabilities_khr)(
    VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* p_device_group_present_capabilities);
typedef VkResult(VKAPI_PTR* pfn_vk_get_device_group_surface_present_modes_khr)(
    VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* p_modes);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_present_rectangles_khr)(VkPhysicalDevice physical_device,
                                                                               VkSurfaceKHR     surface,
                                                                               uint32_t*        p_rect_count,
                                                                               VkRect2D*        p_rects);
typedef VkResult(VKAPI_PTR* pfn_vk_acquire_next_image2khr)(VkDevice                         device,
                                                           const VkAcquireNextImageInfoKHR* p_acquire_info,
                                                           uint32_t*                        p_image_index);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_swapchain_khr(VkDevice device, const VkSwapchainCreateInfoKHR* p_create_info,
                                                       const VkAllocationCallbacks* p_allocator,
                                                       VkSwapchainKHR* p_swapchain) __asm("vkCreateSwapchainKHR");

VKAPI_ATTR void VKAPI_CALL vk_destroy_swapchain_khr(
    VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* p_allocator) __asm("vkDestroySwapchainKHR");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_swapchain_images_khr(VkDevice device, VkSwapchainKHR swapchain, uint32_t* p_swapchain_image_count,
                            VkImage* p_swapchain_images) __asm("vkGetSwapchainImagesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_acquire_next_image_khr(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout,
                                                         VkSemaphore semaphore, VkFence fence,
                                                         uint32_t* p_image_index) __asm("vkAcquireNextImageKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_queue_present_khr(VkQueue                 queue,
                                                    const VkPresentInfoKHR* p_present_info) __asm("vkQueuePresentKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_device_group_present_capabilities_khr(
    VkDevice             device, VkDeviceGroupPresentCapabilitiesKHR*
                         p_device_group_present_capabilities) __asm("vkGetDeviceGroupPresentCapabilitiesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_device_group_surface_present_modes_khr(
    VkDevice device, VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* p_modes) __asm("vkGetDeviceGroupSurfacePresentModesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_present_rectangles_khr(
    VkPhysicalDevice physical_device, VkSurfaceKHR surface, uint32_t* p_rect_count,
    VkRect2D* p_rects) __asm("vkGetPhysicalDevicePresentRectanglesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_acquire_next_image2khr(VkDevice                         device,
                                                         const VkAcquireNextImageInfoKHR* p_acquire_info,
                                                         uint32_t* p_image_index) __asm("vkAcquireNextImage2KHR");
#endif

#define vk_khr_display 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayModeKHR)
#define VK_KHR_DISPLAY_SPEC_VERSION 23
#define VK_KHR_DISPLAY_EXTENSION_NAME "VK_KHR_display"
typedef VkFlags VkDisplayModeCreateFlagsKHR;

typedef enum VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR                  = 0x00000001,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR                  = 0x00000002,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR               = 0x00000004,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR          = 0x7fffffff
} VkDisplayPlaneAlphaFlagBitsKHR;
typedef VkFlags VkDisplayPlaneAlphaFlagsKHR;
typedef VkFlags VkDisplaySurfaceCreateFlagsKHR;
typedef struct VkDisplayModeParametersKHR {
    VkExtent2D visible_region;
    uint32_t   refresh_rate;
} VkDisplayModeParametersKHR;

typedef struct VkDisplayModeCreateInfoKHR {
    VkStructureType             s_type;
    const void*                 p_next;
    VkDisplayModeCreateFlagsKHR flags;
    VkDisplayModeParametersKHR  parameters;
} VkDisplayModeCreateInfoKHR;

typedef struct VkDisplayModePropertiesKHR {
    VkDisplayModeKHR           display_mode;
    VkDisplayModeParametersKHR parameters;
} VkDisplayModePropertiesKHR;

typedef struct VkDisplayPlaneCapabilitiesKHR {
    VkDisplayPlaneAlphaFlagsKHR supported_alpha;
    VkOffset2D                  min_src_position;
    VkOffset2D                  max_src_position;
    VkExtent2D                  min_src_extent;
    VkExtent2D                  max_src_extent;
    VkOffset2D                  min_dst_position;
    VkOffset2D                  max_dst_position;
    VkExtent2D                  min_dst_extent;
    VkExtent2D                  max_dst_extent;
} VkDisplayPlaneCapabilitiesKHR;

typedef struct VkDisplayPlanePropertiesKHR {
    VkDisplayKHR current_display;
    uint32_t     current_stack_index;
} VkDisplayPlanePropertiesKHR;

typedef struct VkDisplayPropertiesKHR {
    VkDisplayKHR               display;
    const char*                display_name;
    VkExtent2D                 physical_dimensions;
    VkExtent2D                 physical_resolution;
    VkSurfaceTransformFlagsKHR supported_transforms;
    VkBool32                   plane_reorder_possible;
    VkBool32                   persistent_content;
} VkDisplayPropertiesKHR;

typedef struct VkDisplaySurfaceCreateInfoKHR {
    VkStructureType                s_type;
    const void*                    p_next;
    VkDisplaySurfaceCreateFlagsKHR flags;
    VkDisplayModeKHR               display_mode;
    uint32_t                       plane_index;
    uint32_t                       plane_stack_index;
    VkSurfaceTransformFlagBitsKHR  transform;
    float                          global_alpha;
    VkDisplayPlaneAlphaFlagBitsKHR alpha_mode;
    VkExtent2D                     image_extent;
} VkDisplaySurfaceCreateInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_display_properties_khr)(VkPhysicalDevice        physical_device,
                                                                               uint32_t*               p_property_count,
                                                                               VkDisplayPropertiesKHR* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_display_plane_properties_khr)(
    VkPhysicalDevice physical_device, uint32_t* p_property_count, VkDisplayPlanePropertiesKHR* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_display_plane_supported_displays_khr)(VkPhysicalDevice physical_device,
                                                                             uint32_t         plane_index,
                                                                             uint32_t*        p_display_count,
                                                                             VkDisplayKHR*    p_displays);
typedef VkResult(VKAPI_PTR* pfn_vk_get_display_mode_properties_khr)(VkPhysicalDevice physical_device,
                                                                    VkDisplayKHR display, uint32_t* p_property_count,
                                                                    VkDisplayModePropertiesKHR* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_create_display_mode_khr)(VkPhysicalDevice physical_device, VkDisplayKHR display,
                                                            const VkDisplayModeCreateInfoKHR* p_create_info,
                                                            const VkAllocationCallbacks*      p_allocator,
                                                            VkDisplayModeKHR*                 p_mode);
typedef VkResult(VKAPI_PTR* pfn_vk_get_display_plane_capabilities_khr)(VkPhysicalDevice physical_device,
                                                                       VkDisplayModeKHR mode, uint32_t plane_index,
                                                                       VkDisplayPlaneCapabilitiesKHR* p_capabilities);
typedef VkResult(VKAPI_PTR* pfn_vk_create_display_plane_surface_khr)(VkInstance                           instance,
                                                                     const VkDisplaySurfaceCreateInfoKHR* p_create_info,
                                                                     const VkAllocationCallbacks*         p_allocator,
                                                                     VkSurfaceKHR*                        p_surface);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_display_properties_khr(
    VkPhysicalDevice physical_device, uint32_t* p_property_count,
    VkDisplayPropertiesKHR* p_properties) __asm("vkGetPhysicalDeviceDisplayPropertiesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_display_plane_properties_khr(
    VkPhysicalDevice physical_device, uint32_t* p_property_count,
    VkDisplayPlanePropertiesKHR* p_properties) __asm("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_display_plane_supported_displays_khr(
    VkPhysicalDevice physical_device, uint32_t plane_index, uint32_t* p_display_count,
    VkDisplayKHR* p_displays) __asm("vkGetDisplayPlaneSupportedDisplaysKHR");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_display_mode_properties_khr(VkPhysicalDevice physical_device, VkDisplayKHR display, uint32_t* p_property_count,
                                   VkDisplayModePropertiesKHR* p_properties) __asm("vkGetDisplayModePropertiesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_display_mode_khr(VkPhysicalDevice physical_device, VkDisplayKHR display,
                                                          const VkDisplayModeCreateInfoKHR* p_create_info,
                                                          const VkAllocationCallbacks*      p_allocator,
                                                          VkDisplayModeKHR* p_mode) __asm("vkCreateDisplayModeKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_display_plane_capabilities_khr(
    VkPhysicalDevice physical_device, VkDisplayModeKHR mode, uint32_t plane_index,
    VkDisplayPlaneCapabilitiesKHR* p_capabilities) __asm("vkGetDisplayPlaneCapabilitiesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_display_plane_surface_khr(
    VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkSurfaceKHR* p_surface) __asm("vkCreateDisplayPlaneSurfaceKHR");
#endif

#define vk_khr_display_swapchain 1
#define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION 10
#define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME "VK_KHR_display_swapchain"
typedef struct VkDisplayPresentInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    VkRect2D        src_rect;
    VkRect2D        dst_rect;
    VkBool32        persistent;
} VkDisplayPresentInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_create_shared_swapchains_khr)(VkDevice device, uint32_t swapchain_count,
                                                                 const VkSwapchainCreateInfoKHR* p_create_infos,
                                                                 const VkAllocationCallbacks*    p_allocator,
                                                                 VkSwapchainKHR*                 p_swapchains);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_shared_swapchains_khr(
    VkDevice device, uint32_t swapchain_count, const VkSwapchainCreateInfoKHR* p_create_infos,
    const VkAllocationCallbacks* p_allocator, VkSwapchainKHR* p_swapchains) __asm("vkCreateSharedSwapchainsKHR");
#endif

#define vk_khr_sampler_mirror_clamp_to_edge 1
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION 3
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME "VK_KHR_sampler_mirror_clamp_to_edge"

#define vk_khr_multiview 1
#define VK_KHR_MULTIVIEW_SPEC_VERSION 1
#define VK_KHR_MULTIVIEW_EXTENSION_NAME "VK_KHR_multiview"
typedef VkRenderPassMultiviewCreateInfo VkRenderPassMultiviewCreateInfoKHR;

typedef VkPhysicalDeviceMultiviewFeatures VkPhysicalDeviceMultiviewFeaturesKHR;

typedef VkPhysicalDeviceMultiviewProperties VkPhysicalDeviceMultiviewPropertiesKHR;

#define vk_khr_get_physical_device_properties2 1
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION 2
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_physical_device_properties2"
typedef VkPhysicalDeviceFeatures2 VkPhysicalDeviceFeatures2KHR;

typedef VkPhysicalDeviceProperties2 VkPhysicalDeviceProperties2KHR;

typedef VkFormatProperties2 VkFormatProperties2KHR;

typedef VkImageFormatProperties2 VkImageFormatProperties2KHR;

typedef VkPhysicalDeviceImageFormatInfo2 VkPhysicalDeviceImageFormatInfo2KHR;

typedef VkQueueFamilyProperties2 VkQueueFamilyProperties2KHR;

typedef VkPhysicalDeviceMemoryProperties2 VkPhysicalDeviceMemoryProperties2KHR;

typedef VkSparseImageFormatProperties2 VkSparseImageFormatProperties2KHR;

typedef VkPhysicalDeviceSparseImageFormatInfo2 VkPhysicalDeviceSparseImageFormatInfo2KHR;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_features2khr)(VkPhysicalDevice           physical_device,
                                                                 VkPhysicalDeviceFeatures2* p_features);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_properties2khr)(VkPhysicalDevice             physical_device,
                                                                   VkPhysicalDeviceProperties2* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_format_properties2khr)(VkPhysicalDevice     physical_device,
                                                                          VkFormat             format,
                                                                          VkFormatProperties2* p_format_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_image_format_properties2khr)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceImageFormatInfo2* p_image_format_info,
    VkImageFormatProperties2* p_image_format_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_properties2khr)(
    VkPhysicalDevice physical_device, uint32_t* p_queue_family_property_count,
    VkQueueFamilyProperties2* p_queue_family_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_memory_properties2khr)(
    VkPhysicalDevice physical_device, VkPhysicalDeviceMemoryProperties2* p_memory_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_sparse_image_format_properties2khr)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSparseImageFormatInfo2* p_format_info,
    uint32_t* p_property_count, VkSparseImageFormatProperties2* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_features2khr(
    VkPhysicalDevice physical_device, VkPhysicalDeviceFeatures2* p_features) __asm("vkGetPhysicalDeviceFeatures2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_properties2khr(
    VkPhysicalDevice             physical_device,
    VkPhysicalDeviceProperties2* p_properties) __asm("vkGetPhysicalDeviceProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_format_properties2khr(
    VkPhysicalDevice physical_device, VkFormat format,
    VkFormatProperties2* p_format_properties) __asm("vkGetPhysicalDeviceFormatProperties2KHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_image_format_properties2khr(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceImageFormatInfo2* p_image_format_info,
    VkImageFormatProperties2* p_image_format_properties) __asm("vkGetPhysicalDeviceImageFormatProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_properties2khr(
    VkPhysicalDevice physical_device, uint32_t* p_queue_family_property_count,
    VkQueueFamilyProperties2* p_queue_family_properties) __asm("vkGetPhysicalDeviceQueueFamilyProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_memory_properties2khr(
    VkPhysicalDevice                   physical_device,
    VkPhysicalDeviceMemoryProperties2* p_memory_properties) __asm("vkGetPhysicalDeviceMemoryProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_sparse_image_format_properties2khr(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSparseImageFormatInfo2* p_format_info,
    uint32_t*                       p_property_count,
    VkSparseImageFormatProperties2* p_properties) __asm("vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
#endif

#define vk_khr_device_group 1
#define VK_KHR_DEVICE_GROUP_SPEC_VERSION 4
#define VK_KHR_DEVICE_GROUP_EXTENSION_NAME "VK_KHR_device_group"
typedef VkPeerMemoryFeatureFlags VkPeerMemoryFeatureFlagsKHR;

typedef VkPeerMemoryFeatureFlagBits VkPeerMemoryFeatureFlagBitsKHR;

typedef VkMemoryAllocateFlags VkMemoryAllocateFlagsKHR;

typedef VkMemoryAllocateFlagBits VkMemoryAllocateFlagBitsKHR;

typedef VkMemoryAllocateFlagsInfo VkMemoryAllocateFlagsInfoKHR;

typedef VkDeviceGroupRenderPassBeginInfo VkDeviceGroupRenderPassBeginInfoKHR;

typedef VkDeviceGroupCommandBufferBeginInfo VkDeviceGroupCommandBufferBeginInfoKHR;

typedef VkDeviceGroupSubmitInfo VkDeviceGroupSubmitInfoKHR;

typedef VkDeviceGroupBindSparseInfo VkDeviceGroupBindSparseInfoKHR;

typedef VkBindBufferMemoryDeviceGroupInfo VkBindBufferMemoryDeviceGroupInfoKHR;

typedef VkBindImageMemoryDeviceGroupInfo VkBindImageMemoryDeviceGroupInfoKHR;

typedef void(VKAPI_PTR* pfn_vk_get_device_group_peer_memory_features_khr)(
    VkDevice device, uint32_t heap_index, uint32_t local_device_index, uint32_t remote_device_index,
    VkPeerMemoryFeatureFlags* p_peer_memory_features);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_device_mask_khr)(VkCommandBuffer command_buffer, uint32_t device_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch_base_khr)(VkCommandBuffer command_buffer, uint32_t base_group_x,
                                                      uint32_t base_group_y, uint32_t base_group_z,
                                                      uint32_t group_count_x, uint32_t group_count_y,
                                                      uint32_t group_count_z);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_device_group_peer_memory_features_khr(
    VkDevice device, uint32_t heap_index, uint32_t local_device_index, uint32_t remote_device_index,
    VkPeerMemoryFeatureFlags* p_peer_memory_features) __asm("vkGetDeviceGroupPeerMemoryFeaturesKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_device_mask_khr(VkCommandBuffer command_buffer,
                                                      uint32_t        device_mask) __asm("vkCmdSetDeviceMaskKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch_base_khr(VkCommandBuffer command_buffer, uint32_t base_group_x,
                                                    uint32_t base_group_y, uint32_t base_group_z,
                                                    uint32_t group_count_x, uint32_t group_count_y,
                                                    uint32_t group_count_z) __asm("vkCmdDispatchBaseKHR");
#endif

#define vk_khr_shader_draw_parameters 1
#define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION 1
#define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME "VK_KHR_shader_draw_parameters"

#define vk_khr_maintenance1 1
#define VK_KHR_MAINTENANCE1_SPEC_VERSION 2
#define VK_KHR_MAINTENANCE1_EXTENSION_NAME "VK_KHR_maintenance1"
typedef VkCommandPoolTrimFlags VkCommandPoolTrimFlagsKHR;

typedef void(VKAPI_PTR* pfn_vk_trim_command_pool_khr)(VkDevice device, VkCommandPool command_pool,
                                                      VkCommandPoolTrimFlags flags);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_trim_command_pool_khr(VkDevice device, VkCommandPool command_pool,
                                                    VkCommandPoolTrimFlags flags) __asm("vkTrimCommandPoolKHR");
#endif

#define vk_khr_device_group_creation 1
#define VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION 1
#define VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME "VK_KHR_device_group_creation"
#define VK_MAX_DEVICE_GROUP_SIZE_KHR VK_MAX_DEVICE_GROUP_SIZE
typedef VkPhysicalDeviceGroupProperties VkPhysicalDeviceGroupPropertiesKHR;

typedef VkDeviceGroupDeviceCreateInfo VkDeviceGroupDeviceCreateInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_physical_device_groups_khr)(
    VkInstance instance, uint32_t* p_physical_device_group_count,
    VkPhysicalDeviceGroupProperties* p_physical_device_group_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_enumerate_physical_device_groups_khr(
    VkInstance instance, uint32_t* p_physical_device_group_count,
    VkPhysicalDeviceGroupProperties* p_physical_device_group_properties) __asm("vkEnumeratePhysicalDeviceGroupsKHR");
#endif

#define vk_khr_external_memory_capabilities 1
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_memory_capabilities"
#define VK_LUID_SIZE_KHR VK_LUID_SIZE
typedef VkExternalMemoryHandleTypeFlags VkExternalMemoryHandleTypeFlagsKHR;

typedef VkExternalMemoryHandleTypeFlagBits VkExternalMemoryHandleTypeFlagBitsKHR;

typedef VkExternalMemoryFeatureFlags VkExternalMemoryFeatureFlagsKHR;

typedef VkExternalMemoryFeatureFlagBits VkExternalMemoryFeatureFlagBitsKHR;

typedef VkExternalMemoryProperties VkExternalMemoryPropertiesKHR;

typedef VkPhysicalDeviceExternalImageFormatInfo VkPhysicalDeviceExternalImageFormatInfoKHR;

typedef VkExternalImageFormatProperties VkExternalImageFormatPropertiesKHR;

typedef VkPhysicalDeviceExternalBufferInfo VkPhysicalDeviceExternalBufferInfoKHR;

typedef VkExternalBufferProperties VkExternalBufferPropertiesKHR;

typedef VkPhysicalDeviceIDProperties VkPhysicalDeviceIDPropertiesKHR;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_buffer_properties_khr)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalBufferInfo* p_external_buffer_info,
    VkExternalBufferProperties* p_external_buffer_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_buffer_properties_khr(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalBufferInfo* p_external_buffer_info,
    VkExternalBufferProperties* p_external_buffer_properties) __asm("vkGetPhysicalDeviceExternalBufferPropertiesKHR");
#endif

#define vk_khr_external_memory 1
#define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME "VK_KHR_external_memory"
#define VK_QUEUE_FAMILY_EXTERNAL_KHR VK_QUEUE_FAMILY_EXTERNAL
typedef VkExternalMemoryImageCreateInfo VkExternalMemoryImageCreateInfoKHR;

typedef VkExternalMemoryBufferCreateInfo VkExternalMemoryBufferCreateInfoKHR;

typedef VkExportMemoryAllocateInfo VkExportMemoryAllocateInfoKHR;

#define vk_khr_external_memory_fd 1
#define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME "VK_KHR_external_memory_fd"
typedef struct VkImportMemoryFdInfoKHR {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkExternalMemoryHandleTypeFlagBits handle_type;
    int                                fd;
} VkImportMemoryFdInfoKHR;

typedef struct VkMemoryFdPropertiesKHR {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        memory_type_bits;
} VkMemoryFdPropertiesKHR;

typedef struct VkMemoryGetFdInfoKHR {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkDeviceMemory                     memory;
    VkExternalMemoryHandleTypeFlagBits handle_type;
} VkMemoryGetFdInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_get_memory_fd_khr)(VkDevice device, const VkMemoryGetFdInfoKHR* p_get_fd_info,
                                                      int* p_fd);
typedef VkResult(VKAPI_PTR* pfn_vk_get_memory_fd_properties_khr)(VkDevice                           device,
                                                                 VkExternalMemoryHandleTypeFlagBits handle_type, int fd,
                                                                 VkMemoryFdPropertiesKHR* p_memory_fd_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_memory_fd_khr(VkDevice device, const VkMemoryGetFdInfoKHR* p_get_fd_info,
                                                    int* p_fd) __asm("vkGetMemoryFdKHR");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_memory_fd_properties_khr(VkDevice device, VkExternalMemoryHandleTypeFlagBits handle_type, int fd,
                                VkMemoryFdPropertiesKHR* p_memory_fd_properties) __asm("vkGetMemoryFdPropertiesKHR");
#endif

#define vk_khr_external_semaphore_capabilities 1
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_semaphore_capabilities"
typedef VkExternalSemaphoreHandleTypeFlags VkExternalSemaphoreHandleTypeFlagsKHR;

typedef VkExternalSemaphoreHandleTypeFlagBits VkExternalSemaphoreHandleTypeFlagBitsKHR;

typedef VkExternalSemaphoreFeatureFlags VkExternalSemaphoreFeatureFlagsKHR;

typedef VkExternalSemaphoreFeatureFlagBits VkExternalSemaphoreFeatureFlagBitsKHR;

typedef VkPhysicalDeviceExternalSemaphoreInfo VkPhysicalDeviceExternalSemaphoreInfoKHR;

typedef VkExternalSemaphoreProperties VkExternalSemaphorePropertiesKHR;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_semaphore_properties_khr)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalSemaphoreInfo* p_external_semaphore_info,
    VkExternalSemaphoreProperties* p_external_semaphore_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_semaphore_properties_khr(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalSemaphoreInfo* p_external_semaphore_info,
    VkExternalSemaphoreProperties*
        p_external_semaphore_properties) __asm("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
#endif

#define vk_khr_external_semaphore 1
#define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME "VK_KHR_external_semaphore"
typedef VkSemaphoreImportFlags VkSemaphoreImportFlagsKHR;

typedef VkSemaphoreImportFlagBits VkSemaphoreImportFlagBitsKHR;

typedef VkExportSemaphoreCreateInfo VkExportSemaphoreCreateInfoKHR;

#define vk_khr_external_semaphore_fd 1
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME "VK_KHR_external_semaphore_fd"
typedef struct VkImportSemaphoreFdInfoKHR {
    VkStructureType                       s_type;
    const void*                           p_next;
    VkSemaphore                           semaphore;
    VkSemaphoreImportFlags                flags;
    VkExternalSemaphoreHandleTypeFlagBits handle_type;
    int                                   fd;
} VkImportSemaphoreFdInfoKHR;

typedef struct VkSemaphoreGetFdInfoKHR {
    VkStructureType                       s_type;
    const void*                           p_next;
    VkSemaphore                           semaphore;
    VkExternalSemaphoreHandleTypeFlagBits handle_type;
} VkSemaphoreGetFdInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_import_semaphore_fd_khr)(
    VkDevice device, const VkImportSemaphoreFdInfoKHR* p_import_semaphore_fd_info);
typedef VkResult(VKAPI_PTR* pfn_vk_get_semaphore_fd_khr)(VkDevice device, const VkSemaphoreGetFdInfoKHR* p_get_fd_info,
                                                         int* p_fd);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_import_semaphore_fd_khr(
    VkDevice device, const VkImportSemaphoreFdInfoKHR* p_import_semaphore_fd_info) __asm("vkImportSemaphoreFdKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_semaphore_fd_khr(VkDevice device, const VkSemaphoreGetFdInfoKHR* p_get_fd_info,
                                                       int* p_fd) __asm("vkGetSemaphoreFdKHR");
#endif

#define vk_khr_push_descriptor 1
#define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION 2
#define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME "VK_KHR_push_descriptor"
typedef struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_push_descriptors;
} VkPhysicalDevicePushDescriptorPropertiesKHR;

typedef void(VKAPI_PTR* pfn_vk_cmd_push_descriptor_set_khr)(VkCommandBuffer     command_buffer,
                                                            VkPipelineBindPoint pipeline_bind_point,
                                                            VkPipelineLayout layout, uint32_t set,
                                                            uint32_t                    descriptor_write_count,
                                                            const VkWriteDescriptorSet* p_descriptor_writes);
typedef void(VKAPI_PTR* pfn_vk_cmd_push_descriptor_set_with_template_khr)(
    VkCommandBuffer command_buffer, VkDescriptorUpdateTemplate descriptor_update_template, VkPipelineLayout layout,
    uint32_t set, const void* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL
vk_cmd_push_descriptor_set_khr(VkCommandBuffer command_buffer, VkPipelineBindPoint pipeline_bind_point,
                               VkPipelineLayout layout, uint32_t set, uint32_t descriptor_write_count,
                               const VkWriteDescriptorSet* p_descriptor_writes) __asm("vkCmdPushDescriptorSetKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_push_descriptor_set_with_template_khr(
    VkCommandBuffer command_buffer, VkDescriptorUpdateTemplate descriptor_update_template, VkPipelineLayout layout,
    uint32_t set, const void* p_data) __asm("vkCmdPushDescriptorSetWithTemplateKHR");
#endif

#define vk_khr_shader_float16_int8 1
#define VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION 1
#define VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME "VK_KHR_shader_float16_int8"
typedef VkPhysicalDeviceShaderFloat16Int8Features VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;

typedef VkPhysicalDeviceShaderFloat16Int8Features VkPhysicalDeviceFloat16Int8FeaturesKHR;

#define vk_khr_16bit_storage 1
#define VK_KHR_16BIT_STORAGE_SPEC_VERSION 1
#define VK_KHR_16BIT_STORAGE_EXTENSION_NAME "VK_KHR_16bit_storage"
typedef VkPhysicalDevice16BitStorageFeatures VkPhysicalDevice16BitStorageFeaturesKHR;

#define vk_khr_incremental_present 1
#define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION 1
#define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME "VK_KHR_incremental_present"
typedef struct VkRectLayerKHR {
    VkOffset2D offset;
    VkExtent2D extent;
    uint32_t   layer;
} VkRectLayerKHR;

typedef struct VkPresentRegionKHR {
    uint32_t              rectangle_count;
    const VkRectLayerKHR* p_rectangles;
} VkPresentRegionKHR;

typedef struct VkPresentRegionsKHR {
    VkStructureType           s_type;
    const void*               p_next;
    uint32_t                  swapchain_count;
    const VkPresentRegionKHR* p_regions;
} VkPresentRegionsKHR;

#define vk_khr_descriptor_update_template 1
typedef VkDescriptorUpdateTemplate VkDescriptorUpdateTemplateKHR;

#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION 1
#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME "VK_KHR_descriptor_update_template"
typedef VkDescriptorUpdateTemplateType VkDescriptorUpdateTemplateTypeKHR;

typedef VkDescriptorUpdateTemplateCreateFlags VkDescriptorUpdateTemplateCreateFlagsKHR;

typedef VkDescriptorUpdateTemplateEntry VkDescriptorUpdateTemplateEntryKHR;

typedef VkDescriptorUpdateTemplateCreateInfo VkDescriptorUpdateTemplateCreateInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_create_descriptor_update_template_khr)(
    VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* p_create_info,
    const VkAllocationCallbacks* p_allocator, VkDescriptorUpdateTemplate* p_descriptor_update_template);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_update_template_khr)(
    VkDevice device, VkDescriptorUpdateTemplate descriptor_update_template, const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_update_descriptor_set_with_template_khr)(
    VkDevice device, VkDescriptorSet descriptor_set, VkDescriptorUpdateTemplate descriptor_update_template,
    const void* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_descriptor_update_template_khr(
    VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* p_create_info,
    const VkAllocationCallbacks* p_allocator,
    VkDescriptorUpdateTemplate*  p_descriptor_update_template) __asm("vkCreateDescriptorUpdateTemplateKHR");

VKAPI_ATTR void VKAPI_CALL vk_destroy_descriptor_update_template_khr(
    VkDevice device, VkDescriptorUpdateTemplate descriptor_update_template,
    const VkAllocationCallbacks* p_allocator) __asm("vkDestroyDescriptorUpdateTemplateKHR");

VKAPI_ATTR void VKAPI_CALL vk_update_descriptor_set_with_template_khr(
    VkDevice device, VkDescriptorSet descriptor_set, VkDescriptorUpdateTemplate descriptor_update_template,
    const void* p_data) __asm("vkUpdateDescriptorSetWithTemplateKHR");
#endif

#define vk_khr_imageless_framebuffer 1
#define VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION 1
#define VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME "VK_KHR_imageless_framebuffer"
typedef VkPhysicalDeviceImagelessFramebufferFeatures VkPhysicalDeviceImagelessFramebufferFeaturesKHR;

typedef VkFramebufferAttachmentsCreateInfo VkFramebufferAttachmentsCreateInfoKHR;

typedef VkFramebufferAttachmentImageInfo VkFramebufferAttachmentImageInfoKHR;

typedef VkRenderPassAttachmentBeginInfo VkRenderPassAttachmentBeginInfoKHR;

#define vk_khr_create_renderpass2 1
#define VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION 1
#define VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME "VK_KHR_create_renderpass2"
typedef VkRenderPassCreateInfo2 VkRenderPassCreateInfo2KHR;

typedef VkAttachmentDescription2 VkAttachmentDescription2KHR;

typedef VkAttachmentReference2 VkAttachmentReference2KHR;

typedef VkSubpassDescription2 VkSubpassDescription2KHR;

typedef VkSubpassDependency2 VkSubpassDependency2KHR;

typedef VkSubpassBeginInfo VkSubpassBeginInfoKHR;

typedef VkSubpassEndInfo VkSubpassEndInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_create_render_pass2khr)(VkDevice                       device,
                                                           const VkRenderPassCreateInfo2* p_create_info,
                                                           const VkAllocationCallbacks*   p_allocator,
                                                           VkRenderPass*                  p_render_pass);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_render_pass2khr)(VkCommandBuffer              command_buffer,
                                                          const VkRenderPassBeginInfo* p_render_pass_begin,
                                                          const VkSubpassBeginInfo*    p_subpass_begin_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_next_subpass2khr)(VkCommandBuffer           command_buffer,
                                                     const VkSubpassBeginInfo* p_subpass_begin_info,
                                                     const VkSubpassEndInfo*   p_subpass_end_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_render_pass2khr)(VkCommandBuffer         command_buffer,
                                                        const VkSubpassEndInfo* p_subpass_end_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_render_pass2khr(VkDevice device, const VkRenderPassCreateInfo2* p_create_info,
                                                         const VkAllocationCallbacks* p_allocator,
                                                         VkRenderPass* p_render_pass) __asm("vkCreateRenderPass2KHR");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_begin_render_pass2khr(VkCommandBuffer command_buffer, const VkRenderPassBeginInfo* p_render_pass_begin,
                             const VkSubpassBeginInfo* p_subpass_begin_info) __asm("vkCmdBeginRenderPass2KHR");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_next_subpass2khr(VkCommandBuffer command_buffer, const VkSubpassBeginInfo* p_subpass_begin_info,
                        const VkSubpassEndInfo* p_subpass_end_info) __asm("vkCmdNextSubpass2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_render_pass2khr(
    VkCommandBuffer command_buffer, const VkSubpassEndInfo* p_subpass_end_info) __asm("vkCmdEndRenderPass2KHR");
#endif

#define vk_khr_shared_presentable_image 1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION 1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME "VK_KHR_shared_presentable_image"
typedef struct VkSharedPresentSurfaceCapabilitiesKHR {
    VkStructureType   s_type;
    void*             p_next;
    VkImageUsageFlags shared_present_supported_usage_flags;
} VkSharedPresentSurfaceCapabilitiesKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_get_swapchain_status_khr)(VkDevice device, VkSwapchainKHR swapchain);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_swapchain_status_khr(VkDevice       device,
                                                           VkSwapchainKHR swapchain) __asm("vkGetSwapchainStatusKHR");
#endif

#define vk_khr_external_fence_capabilities 1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_fence_capabilities"
typedef VkExternalFenceHandleTypeFlags VkExternalFenceHandleTypeFlagsKHR;

typedef VkExternalFenceHandleTypeFlagBits VkExternalFenceHandleTypeFlagBitsKHR;

typedef VkExternalFenceFeatureFlags VkExternalFenceFeatureFlagsKHR;

typedef VkExternalFenceFeatureFlagBits VkExternalFenceFeatureFlagBitsKHR;

typedef VkPhysicalDeviceExternalFenceInfo VkPhysicalDeviceExternalFenceInfoKHR;

typedef VkExternalFenceProperties VkExternalFencePropertiesKHR;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_fence_properties_khr)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalFenceInfo* p_external_fence_info,
    VkExternalFenceProperties* p_external_fence_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_fence_properties_khr(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceExternalFenceInfo* p_external_fence_info,
    VkExternalFenceProperties* p_external_fence_properties) __asm("vkGetPhysicalDeviceExternalFencePropertiesKHR");
#endif

#define vk_khr_external_fence 1
#define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME "VK_KHR_external_fence"
typedef VkFenceImportFlags VkFenceImportFlagsKHR;

typedef VkFenceImportFlagBits VkFenceImportFlagBitsKHR;

typedef VkExportFenceCreateInfo VkExportFenceCreateInfoKHR;

#define vk_khr_external_fence_fd 1
#define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME "VK_KHR_external_fence_fd"
typedef struct VkImportFenceFdInfoKHR {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkFence                           fence;
    VkFenceImportFlags                flags;
    VkExternalFenceHandleTypeFlagBits handle_type;
    int                               fd;
} VkImportFenceFdInfoKHR;

typedef struct VkFenceGetFdInfoKHR {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkFence                           fence;
    VkExternalFenceHandleTypeFlagBits handle_type;
} VkFenceGetFdInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_import_fence_fd_khr)(VkDevice                      device,
                                                        const VkImportFenceFdInfoKHR* p_import_fence_fd_info);
typedef VkResult(VKAPI_PTR* pfn_vk_get_fence_fd_khr)(VkDevice device, const VkFenceGetFdInfoKHR* p_get_fd_info,
                                                     int* p_fd);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_import_fence_fd_khr(
    VkDevice device, const VkImportFenceFdInfoKHR* p_import_fence_fd_info) __asm("vkImportFenceFdKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_fence_fd_khr(VkDevice device, const VkFenceGetFdInfoKHR* p_get_fd_info,
                                                   int* p_fd) __asm("vkGetFenceFdKHR");
#endif

#define vk_khr_performance_query 1
#define VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION 1
#define VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME "VK_KHR_performance_query"

typedef enum VkPerformanceCounterUnitKHR {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR          = 0,
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR       = 1,
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR      = 2,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR            = 3,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR           = 5,
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR            = 6,
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR            = 7,
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR             = 8,
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR            = 9,
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR           = 10,
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR         = 0x7fffffff
} VkPerformanceCounterUnitKHR;

typedef enum VkPerformanceCounterScopeKHR {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR    = 1,
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR        = 2,
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR               = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
    VK_QUERY_SCOPE_RENDER_PASS_KHR                  = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
    VK_QUERY_SCOPE_COMMAND_KHR                      = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR       = 0x7fffffff
} VkPerformanceCounterScopeKHR;

typedef enum VkPerformanceCounterStorageKHR {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR    = 0,
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR    = 1,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR   = 2,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR   = 3,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR  = 4,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR  = 5,
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7fffffff
} VkPerformanceCounterStorageKHR;

typedef enum VkPerformanceCounterDescriptionFlagBitsKHR {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 0x00000001,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 0x00000002,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR    = 0x7fffffff
} VkPerformanceCounterDescriptionFlagBitsKHR;
typedef VkFlags VkPerformanceCounterDescriptionFlagsKHR;

typedef enum VkAcquireProfilingLockFlagBitsKHR {
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7fffffff
} VkAcquireProfilingLockFlagBitsKHR;
typedef VkFlags VkAcquireProfilingLockFlagsKHR;
typedef struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        performance_counter_query_pools;
    VkBool32        performance_counter_multiple_query_pools;
} VkPhysicalDevicePerformanceQueryFeaturesKHR;

typedef struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        allow_command_buffer_query_copies;
} VkPhysicalDevicePerformanceQueryPropertiesKHR;

typedef struct VkPerformanceCounterKHR {
    VkStructureType                s_type;
    const void*                    p_next;
    VkPerformanceCounterUnitKHR    unit;
    VkPerformanceCounterScopeKHR   scope;
    VkPerformanceCounterStorageKHR storage;
    uint8_t                        uuid[VK_UUID_SIZE];
} VkPerformanceCounterKHR;

typedef struct VkPerformanceCounterDescriptionKHR {
    VkStructureType                         s_type;
    const void*                             p_next;
    VkPerformanceCounterDescriptionFlagsKHR flags;
    char                                    name[VK_MAX_DESCRIPTION_SIZE];
    char                                    category[VK_MAX_DESCRIPTION_SIZE];
    char                                    description[VK_MAX_DESCRIPTION_SIZE];
} VkPerformanceCounterDescriptionKHR;

typedef struct VkQueryPoolPerformanceCreateInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        queue_family_index;
    uint32_t        counter_index_count;
    const uint32_t* p_counter_indices;
} VkQueryPoolPerformanceCreateInfoKHR;

typedef union VkPerformanceCounterResultKHR {
    int32_t  int32;
    int64_t  int64;
    uint32_t uint32;
    uint64_t uint64;
    float    float32;
    double   float64;
} VkPerformanceCounterResultKHR;

typedef struct VkAcquireProfilingLockInfoKHR {
    VkStructureType                s_type;
    const void*                    p_next;
    VkAcquireProfilingLockFlagsKHR flags;
    uint64_t                       timeout;
} VkAcquireProfilingLockInfoKHR;

typedef struct VkPerformanceQuerySubmitInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        counter_pass_index;
} VkPerformanceQuerySubmitInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_enumerate_physical_device_queue_family_performance_query_counters_khr)(
    VkPhysicalDevice physical_device, uint32_t queue_family_index, uint32_t* p_counter_count,
    VkPerformanceCounterKHR* p_counters, VkPerformanceCounterDescriptionKHR* p_counter_descriptions);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_performance_query_passes_khr)(
    VkPhysicalDevice physical_device, const VkQueryPoolPerformanceCreateInfoKHR* p_performance_query_create_info,
    uint32_t* p_num_passes);
typedef VkResult(VKAPI_PTR* pfn_vk_acquire_profiling_lock_khr)(VkDevice                             device,
                                                               const VkAcquireProfilingLockInfoKHR* p_info);
typedef void(VKAPI_PTR* pfn_vk_release_profiling_lock_khr)(VkDevice device);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_enumerate_physical_device_queue_family_performance_query_counters_khr(
    VkPhysicalDevice physical_device, uint32_t queue_family_index, uint32_t* p_counter_count,
    VkPerformanceCounterKHR* p_counters,
    VkPerformanceCounterDescriptionKHR*
        p_counter_descriptions) __asm("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_performance_query_passes_khr(
    VkPhysicalDevice physical_device, const VkQueryPoolPerformanceCreateInfoKHR* p_performance_query_create_info,
    uint32_t* p_num_passes) __asm("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_acquire_profiling_lock_khr(
    VkDevice device, const VkAcquireProfilingLockInfoKHR* p_info) __asm("vkAcquireProfilingLockKHR");

VKAPI_ATTR void VKAPI_CALL vk_release_profiling_lock_khr(VkDevice device) __asm("vkReleaseProfilingLockKHR");
#endif

#define vk_khr_maintenance2 1
#define VK_KHR_MAINTENANCE2_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE2_EXTENSION_NAME "VK_KHR_maintenance2"
typedef VkPointClippingBehavior VkPointClippingBehaviorKHR;

typedef VkTessellationDomainOrigin VkTessellationDomainOriginKHR;

typedef VkPhysicalDevicePointClippingProperties VkPhysicalDevicePointClippingPropertiesKHR;

typedef VkRenderPassInputAttachmentAspectCreateInfo VkRenderPassInputAttachmentAspectCreateInfoKHR;

typedef VkInputAttachmentAspectReference VkInputAttachmentAspectReferenceKHR;

typedef VkImageViewUsageCreateInfo VkImageViewUsageCreateInfoKHR;

typedef VkPipelineTessellationDomainOriginStateCreateInfo VkPipelineTessellationDomainOriginStateCreateInfoKHR;

#define vk_khr_get_surface_capabilities2 1
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION 1
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME "VK_KHR_get_surface_capabilities2"
typedef struct VkPhysicalDeviceSurfaceInfo2KHR {
    VkStructureType s_type;
    const void*     p_next;
    VkSurfaceKHR    surface;
} VkPhysicalDeviceSurfaceInfo2KHR;

typedef struct VkSurfaceCapabilities2KHR {
    VkStructureType          s_type;
    void*                    p_next;
    VkSurfaceCapabilitiesKHR surface_capabilities;
} VkSurfaceCapabilities2KHR;

typedef struct VkSurfaceFormat2KHR {
    VkStructureType    s_type;
    void*              p_next;
    VkSurfaceFormatKHR surface_format;
} VkSurfaceFormat2KHR;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_surface_capabilities2khr)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSurfaceInfo2KHR* p_surface_info,
    VkSurfaceCapabilities2KHR* p_surface_capabilities);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_surface_formats2khr)(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSurfaceInfo2KHR* p_surface_info,
    uint32_t* p_surface_format_count, VkSurfaceFormat2KHR* p_surface_formats);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_surface_capabilities2khr(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSurfaceInfo2KHR* p_surface_info,
    VkSurfaceCapabilities2KHR* p_surface_capabilities) __asm("vkGetPhysicalDeviceSurfaceCapabilities2KHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_surface_formats2khr(
    VkPhysicalDevice physical_device, const VkPhysicalDeviceSurfaceInfo2KHR* p_surface_info,
    uint32_t*            p_surface_format_count,
    VkSurfaceFormat2KHR* p_surface_formats) __asm("vkGetPhysicalDeviceSurfaceFormats2KHR");
#endif

#define vk_khr_variable_pointers 1
#define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION 1
#define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME "VK_KHR_variable_pointers"
typedef VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointerFeaturesKHR;

typedef VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointersFeaturesKHR;

#define vk_khr_get_display_properties2 1
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION 1
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_display_properties2"
typedef struct VkDisplayProperties2KHR {
    VkStructureType        s_type;
    void*                  p_next;
    VkDisplayPropertiesKHR display_properties;
} VkDisplayProperties2KHR;

typedef struct VkDisplayPlaneProperties2KHR {
    VkStructureType             s_type;
    void*                       p_next;
    VkDisplayPlanePropertiesKHR display_plane_properties;
} VkDisplayPlaneProperties2KHR;

typedef struct VkDisplayModeProperties2KHR {
    VkStructureType            s_type;
    void*                      p_next;
    VkDisplayModePropertiesKHR display_mode_properties;
} VkDisplayModeProperties2KHR;

typedef struct VkDisplayPlaneInfo2KHR {
    VkStructureType  s_type;
    const void*      p_next;
    VkDisplayModeKHR mode;
    uint32_t         plane_index;
} VkDisplayPlaneInfo2KHR;

typedef struct VkDisplayPlaneCapabilities2KHR {
    VkStructureType               s_type;
    void*                         p_next;
    VkDisplayPlaneCapabilitiesKHR capabilities;
} VkDisplayPlaneCapabilities2KHR;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_display_properties2khr)(VkPhysicalDevice physical_device,
                                                                               uint32_t*        p_property_count,
                                                                               VkDisplayProperties2KHR* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_display_plane_properties2khr)(
    VkPhysicalDevice physical_device, uint32_t* p_property_count, VkDisplayPlaneProperties2KHR* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_display_mode_properties2khr)(VkPhysicalDevice physical_device,
                                                                    VkDisplayKHR display, uint32_t* p_property_count,
                                                                    VkDisplayModeProperties2KHR* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_display_plane_capabilities2khr)(
    VkPhysicalDevice physical_device, const VkDisplayPlaneInfo2KHR* p_display_plane_info,
    VkDisplayPlaneCapabilities2KHR* p_capabilities);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_display_properties2khr(
    VkPhysicalDevice physical_device, uint32_t* p_property_count,
    VkDisplayProperties2KHR* p_properties) __asm("vkGetPhysicalDeviceDisplayProperties2KHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_display_plane_properties2khr(
    VkPhysicalDevice physical_device, uint32_t* p_property_count,
    VkDisplayPlaneProperties2KHR* p_properties) __asm("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_display_mode_properties2khr(VkPhysicalDevice physical_device, VkDisplayKHR display, uint32_t* p_property_count,
                                   VkDisplayModeProperties2KHR* p_properties) __asm("vkGetDisplayModeProperties2KHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_display_plane_capabilities2khr(
    VkPhysicalDevice physical_device, const VkDisplayPlaneInfo2KHR* p_display_plane_info,
    VkDisplayPlaneCapabilities2KHR* p_capabilities) __asm("vkGetDisplayPlaneCapabilities2KHR");
#endif

#define vk_khr_dedicated_allocation 1
#define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION 3
#define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_KHR_dedicated_allocation"
typedef VkMemoryDedicatedRequirements VkMemoryDedicatedRequirementsKHR;

typedef VkMemoryDedicatedAllocateInfo VkMemoryDedicatedAllocateInfoKHR;

#define vk_khr_storage_buffer_storage_class 1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION 1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME "VK_KHR_storage_buffer_storage_class"

#define vk_khr_relaxed_block_layout 1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION 1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME "VK_KHR_relaxed_block_layout"

#define vk_khr_get_memory_requirements2 1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION 1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME "VK_KHR_get_memory_requirements2"
typedef VkBufferMemoryRequirementsInfo2 VkBufferMemoryRequirementsInfo2KHR;

typedef VkImageMemoryRequirementsInfo2 VkImageMemoryRequirementsInfo2KHR;

typedef VkImageSparseMemoryRequirementsInfo2 VkImageSparseMemoryRequirementsInfo2KHR;

typedef VkMemoryRequirements2 VkMemoryRequirements2KHR;

typedef VkSparseImageMemoryRequirements2 VkSparseImageMemoryRequirements2KHR;

typedef void(VKAPI_PTR* pfn_vk_get_image_memory_requirements2khr)(VkDevice                              device,
                                                                  const VkImageMemoryRequirementsInfo2* p_info,
                                                                  VkMemoryRequirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_buffer_memory_requirements2khr)(VkDevice                               device,
                                                                   const VkBufferMemoryRequirementsInfo2* p_info,
                                                                   VkMemoryRequirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_sparse_memory_requirements2khr)(
    VkDevice device, const VkImageSparseMemoryRequirementsInfo2* p_info, uint32_t* p_sparse_memory_requirement_count,
    VkSparseImageMemoryRequirements2* p_sparse_memory_requirements);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_image_memory_requirements2khr(
    VkDevice device, const VkImageMemoryRequirementsInfo2* p_info,
    VkMemoryRequirements2* p_memory_requirements) __asm("vkGetImageMemoryRequirements2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_buffer_memory_requirements2khr(
    VkDevice device, const VkBufferMemoryRequirementsInfo2* p_info,
    VkMemoryRequirements2* p_memory_requirements) __asm("vkGetBufferMemoryRequirements2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_image_sparse_memory_requirements2khr(
    VkDevice device, const VkImageSparseMemoryRequirementsInfo2* p_info, uint32_t* p_sparse_memory_requirement_count,
    VkSparseImageMemoryRequirements2* p_sparse_memory_requirements) __asm("vkGetImageSparseMemoryRequirements2KHR");
#endif

#define vk_khr_image_format_list 1
#define VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION 1
#define VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME "VK_KHR_image_format_list"
typedef VkImageFormatListCreateInfo VkImageFormatListCreateInfoKHR;

#define vk_khr_sampler_ycbcr_conversion 1
typedef VkSamplerYcbcrConversion VkSamplerYcbcrConversionKHR;

#define VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION 14
#define VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME "VK_KHR_sampler_ycbcr_conversion"
typedef VkSamplerYcbcrModelConversion VkSamplerYcbcrModelConversionKHR;

typedef VkSamplerYcbcrRange VkSamplerYcbcrRangeKHR;

typedef VkChromaLocation VkChromaLocationKHR;

typedef VkSamplerYcbcrConversionCreateInfo VkSamplerYcbcrConversionCreateInfoKHR;

typedef VkSamplerYcbcrConversionInfo VkSamplerYcbcrConversionInfoKHR;

typedef VkBindImagePlaneMemoryInfo VkBindImagePlaneMemoryInfoKHR;

typedef VkImagePlaneMemoryRequirementsInfo VkImagePlaneMemoryRequirementsInfoKHR;

typedef VkPhysicalDeviceSamplerYcbcrConversionFeatures VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;

typedef VkSamplerYcbcrConversionImageFormatProperties VkSamplerYcbcrConversionImageFormatPropertiesKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_create_sampler_ycbcr_conversion_khr)(
    VkDevice device, const VkSamplerYcbcrConversionCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkSamplerYcbcrConversion* p_ycbcr_conversion);
typedef void(VKAPI_PTR* pfn_vk_destroy_sampler_ycbcr_conversion_khr)(VkDevice                     device,
                                                                     VkSamplerYcbcrConversion     ycbcr_conversion,
                                                                     const VkAllocationCallbacks* p_allocator);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_sampler_ycbcr_conversion_khr(
    VkDevice device, const VkSamplerYcbcrConversionCreateInfo* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkSamplerYcbcrConversion* p_ycbcr_conversion) __asm("vkCreateSamplerYcbcrConversionKHR");

VKAPI_ATTR void VKAPI_CALL vk_destroy_sampler_ycbcr_conversion_khr(
    VkDevice device, VkSamplerYcbcrConversion ycbcr_conversion,
    const VkAllocationCallbacks* p_allocator) __asm("vkDestroySamplerYcbcrConversionKHR");
#endif

#define vk_khr_bind_memory2 1
#define VK_KHR_BIND_MEMORY_2_SPEC_VERSION 1
#define VK_KHR_BIND_MEMORY_2_EXTENSION_NAME "VK_KHR_bind_memory2"
typedef VkBindBufferMemoryInfo VkBindBufferMemoryInfoKHR;

typedef VkBindImageMemoryInfo VkBindImageMemoryInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_bind_buffer_memory2khr)(VkDevice device, uint32_t bind_info_count,
                                                           const VkBindBufferMemoryInfo* p_bind_infos);
typedef VkResult(VKAPI_PTR* pfn_vk_bind_image_memory2khr)(VkDevice device, uint32_t bind_info_count,
                                                          const VkBindImageMemoryInfo* p_bind_infos);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL
vk_bind_buffer_memory2khr(VkDevice device, uint32_t bind_info_count,
                          const VkBindBufferMemoryInfo* p_bind_infos) __asm("vkBindBufferMemory2KHR");

VKAPI_ATTR VkResult VKAPI_CALL
vk_bind_image_memory2khr(VkDevice device, uint32_t bind_info_count,
                         const VkBindImageMemoryInfo* p_bind_infos) __asm("vkBindImageMemory2KHR");
#endif

#define vk_khr_maintenance3 1
#define VK_KHR_MAINTENANCE3_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE3_EXTENSION_NAME "VK_KHR_maintenance3"
typedef VkPhysicalDeviceMaintenance3Properties VkPhysicalDeviceMaintenance3PropertiesKHR;

typedef VkDescriptorSetLayoutSupport VkDescriptorSetLayoutSupportKHR;

typedef void(VKAPI_PTR* pfn_vk_get_descriptor_set_layout_support_khr)(
    VkDevice device, const VkDescriptorSetLayoutCreateInfo* p_create_info, VkDescriptorSetLayoutSupport* p_support);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_descriptor_set_layout_support_khr(
    VkDevice device, const VkDescriptorSetLayoutCreateInfo* p_create_info,
    VkDescriptorSetLayoutSupport* p_support) __asm("vkGetDescriptorSetLayoutSupportKHR");
#endif

#define vk_khr_draw_indirect_count 1
#define VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION 1
#define VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME "VK_KHR_draw_indirect_count"
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_count_khr)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                            VkDeviceSize offset, VkBuffer count_buffer,
                                                            VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                                            uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect_count_khr)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                                    VkDeviceSize offset, VkBuffer count_buffer,
                                                                    VkDeviceSize count_buffer_offset,
                                                                    uint32_t max_draw_count, uint32_t stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_count_khr(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                          VkDeviceSize offset, VkBuffer count_buffer,
                                                          VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                                          uint32_t stride) __asm("vkCmdDrawIndirectCountKHR");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_draw_indexed_indirect_count_khr(VkCommandBuffer command_buffer, VkBuffer buffer, VkDeviceSize offset,
                                       VkBuffer count_buffer, VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                       uint32_t stride) __asm("vkCmdDrawIndexedIndirectCountKHR");
#endif

#define vk_khr_shader_subgroup_extended_types 1
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION 1
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME "VK_KHR_shader_subgroup_extended_types"
typedef VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;

#define vk_khr_8bit_storage 1
#define VK_KHR_8BIT_STORAGE_SPEC_VERSION 1
#define VK_KHR_8BIT_STORAGE_EXTENSION_NAME "VK_KHR_8bit_storage"
typedef VkPhysicalDevice8BitStorageFeatures VkPhysicalDevice8BitStorageFeaturesKHR;

#define vk_khr_shader_atomic_int64 1
#define VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION 1
#define VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME "VK_KHR_shader_atomic_int64"
typedef VkPhysicalDeviceShaderAtomicInt64Features VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;

#define vk_khr_shader_clock 1
#define VK_KHR_SHADER_CLOCK_SPEC_VERSION 1
#define VK_KHR_SHADER_CLOCK_EXTENSION_NAME "VK_KHR_shader_clock"
typedef struct VkPhysicalDeviceShaderClockFeaturesKHR {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_subgroup_clock;
    VkBool32        shader_device_clock;
} VkPhysicalDeviceShaderClockFeaturesKHR;

#define vk_khr_driver_properties 1
#define VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION 1
#define VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME "VK_KHR_driver_properties"
#define VK_MAX_DRIVER_NAME_SIZE_KHR VK_MAX_DRIVER_NAME_SIZE
#define VK_MAX_DRIVER_INFO_SIZE_KHR VK_MAX_DRIVER_INFO_SIZE
typedef VkDriverId VkDriverIdKHR;

typedef VkConformanceVersion VkConformanceVersionKHR;

typedef VkPhysicalDeviceDriverProperties VkPhysicalDeviceDriverPropertiesKHR;

#define vk_khr_shader_float_controls 1
#define VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION 4
#define VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME "VK_KHR_shader_float_controls"
typedef VkShaderFloatControlsIndependence VkShaderFloatControlsIndependenceKHR;

typedef VkPhysicalDeviceFloatControlsProperties VkPhysicalDeviceFloatControlsPropertiesKHR;

#define vk_khr_depth_stencil_resolve 1
#define VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION 1
#define VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME "VK_KHR_depth_stencil_resolve"
typedef VkResolveModeFlagBits VkResolveModeFlagBitsKHR;

typedef VkResolveModeFlags VkResolveModeFlagsKHR;

typedef VkSubpassDescriptionDepthStencilResolve VkSubpassDescriptionDepthStencilResolveKHR;

typedef VkPhysicalDeviceDepthStencilResolveProperties VkPhysicalDeviceDepthStencilResolvePropertiesKHR;

#define vk_khr_swapchain_mutable_format 1
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION 1
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME "VK_KHR_swapchain_mutable_format"

#define vk_khr_timeline_semaphore 1
#define VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION 2
#define VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME "VK_KHR_timeline_semaphore"
typedef VkSemaphoreType VkSemaphoreTypeKHR;

typedef VkSemaphoreWaitFlagBits VkSemaphoreWaitFlagBitsKHR;

typedef VkSemaphoreWaitFlags VkSemaphoreWaitFlagsKHR;

typedef VkPhysicalDeviceTimelineSemaphoreFeatures VkPhysicalDeviceTimelineSemaphoreFeaturesKHR;

typedef VkPhysicalDeviceTimelineSemaphoreProperties VkPhysicalDeviceTimelineSemaphorePropertiesKHR;

typedef VkSemaphoreTypeCreateInfo VkSemaphoreTypeCreateInfoKHR;

typedef VkTimelineSemaphoreSubmitInfo VkTimelineSemaphoreSubmitInfoKHR;

typedef VkSemaphoreWaitInfo VkSemaphoreWaitInfoKHR;

typedef VkSemaphoreSignalInfo VkSemaphoreSignalInfoKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_get_semaphore_counter_value_khr)(VkDevice device, VkSemaphore semaphore,
                                                                    uint64_t* p_value);
typedef VkResult(VKAPI_PTR* pfn_vk_wait_semaphores_khr)(VkDevice device, const VkSemaphoreWaitInfo* p_wait_info,
                                                        uint64_t timeout);
typedef VkResult(VKAPI_PTR* pfn_vk_signal_semaphore_khr)(VkDevice device, const VkSemaphoreSignalInfo* p_signal_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_semaphore_counter_value_khr(
    VkDevice device, VkSemaphore semaphore, uint64_t* p_value) __asm("vkGetSemaphoreCounterValueKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_wait_semaphores_khr(VkDevice device, const VkSemaphoreWaitInfo* p_wait_info,
                                                      uint64_t timeout) __asm("vkWaitSemaphoresKHR");

VKAPI_ATTR VkResult VKAPI_CALL
vk_signal_semaphore_khr(VkDevice device, const VkSemaphoreSignalInfo* p_signal_info) __asm("vkSignalSemaphoreKHR");
#endif

#define vk_khr_vulkan_memory_model 1
#define VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION 3
#define VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME "VK_KHR_vulkan_memory_model"
typedef VkPhysicalDeviceVulkanMemoryModelFeatures VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;

#define vk_khr_spirv_1_4 1
#define VK_KHR_SPIRV_1_4_SPEC_VERSION 1
#define VK_KHR_SPIRV_1_4_EXTENSION_NAME "VK_KHR_spirv_1_4"

#define vk_khr_surface_protected_capabilities 1
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME "VK_KHR_surface_protected_capabilities"
typedef struct VkSurfaceProtectedCapabilitiesKHR {
    VkStructureType s_type;
    const void*     p_next;
    VkBool32        supports_protected;
} VkSurfaceProtectedCapabilitiesKHR;

#define vk_khr_separate_depth_stencil_layouts 1
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION 1
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME "VK_KHR_separate_depth_stencil_layouts"
typedef VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;

typedef VkAttachmentReferenceStencilLayout VkAttachmentReferenceStencilLayoutKHR;

typedef VkAttachmentDescriptionStencilLayout VkAttachmentDescriptionStencilLayoutKHR;

#define vk_khr_uniform_buffer_standard_layout 1
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION 1
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME "VK_KHR_uniform_buffer_standard_layout"
typedef VkPhysicalDeviceUniformBufferStandardLayoutFeatures VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;

#define vk_khr_buffer_device_address 1
#define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 1
#define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME "VK_KHR_buffer_device_address"
typedef VkPhysicalDeviceBufferDeviceAddressFeatures VkPhysicalDeviceBufferDeviceAddressFeaturesKHR;

typedef VkBufferDeviceAddressInfo VkBufferDeviceAddressInfoKHR;

typedef VkBufferOpaqueCaptureAddressCreateInfo VkBufferOpaqueCaptureAddressCreateInfoKHR;

typedef VkMemoryOpaqueCaptureAddressAllocateInfo VkMemoryOpaqueCaptureAddressAllocateInfoKHR;

typedef VkDeviceMemoryOpaqueCaptureAddressInfo VkDeviceMemoryOpaqueCaptureAddressInfoKHR;

typedef VkDeviceAddress(VKAPI_PTR* pfn_vk_get_buffer_device_address_khr)(VkDevice                         device,
                                                                         const VkBufferDeviceAddressInfo* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_buffer_opaque_capture_address_khr)(VkDevice                         device,
                                                                          const VkBufferDeviceAddressInfo* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_device_memory_opaque_capture_address_khr)(
    VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vk_get_buffer_device_address_khr(
    VkDevice device, const VkBufferDeviceAddressInfo* p_info) __asm("vkGetBufferDeviceAddressKHR");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_buffer_opaque_capture_address_khr(
    VkDevice device, const VkBufferDeviceAddressInfo* p_info) __asm("vkGetBufferOpaqueCaptureAddressKHR");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_device_memory_opaque_capture_address_khr(
    VkDevice                                      device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* p_info) __asm("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
#endif

#define vk_khr_pipeline_executable_properties 1
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION 1
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME "VK_KHR_pipeline_executable_properties"

typedef enum VkPipelineExecutableStatisticFormatKHR {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR   = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR    = 1,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR   = 2,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR  = 3,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7fffffff
} VkPipelineExecutableStatisticFormatKHR;
typedef struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        pipeline_executable_info;
} VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

typedef struct VkPipelineInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    VkPipeline      pipeline;
} VkPipelineInfoKHR;

typedef struct VkPipelineExecutablePropertiesKHR {
    VkStructureType    s_type;
    void*              p_next;
    VkShaderStageFlags stages;
    char               name[VK_MAX_DESCRIPTION_SIZE];
    char               description[VK_MAX_DESCRIPTION_SIZE];
    uint32_t           subgroup_size;
} VkPipelineExecutablePropertiesKHR;

typedef struct VkPipelineExecutableInfoKHR {
    VkStructureType s_type;
    const void*     p_next;
    VkPipeline      pipeline;
    uint32_t        executable_index;
} VkPipelineExecutableInfoKHR;

typedef union VkPipelineExecutableStatisticValueKHR {
    VkBool32 b32;
    int64_t  i64;
    uint64_t u64;
    double   f64;
} VkPipelineExecutableStatisticValueKHR;

typedef struct VkPipelineExecutableStatisticKHR {
    VkStructureType                        s_type;
    void*                                  p_next;
    char                                   name[VK_MAX_DESCRIPTION_SIZE];
    char                                   description[VK_MAX_DESCRIPTION_SIZE];
    VkPipelineExecutableStatisticFormatKHR format;
    VkPipelineExecutableStatisticValueKHR  value;
} VkPipelineExecutableStatisticKHR;

typedef struct VkPipelineExecutableInternalRepresentationKHR {
    VkStructureType s_type;
    void*           p_next;
    char            name[VK_MAX_DESCRIPTION_SIZE];
    char            description[VK_MAX_DESCRIPTION_SIZE];
    VkBool32        is_text;
    size_t          data_size;
    void*           p_data;
} VkPipelineExecutableInternalRepresentationKHR;

typedef VkResult(VKAPI_PTR* pfn_vk_get_pipeline_executable_properties_khr)(
    VkDevice device, const VkPipelineInfoKHR* p_pipeline_info, uint32_t* p_executable_count,
    VkPipelineExecutablePropertiesKHR* p_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_pipeline_executable_statistics_khr)(
    VkDevice device, const VkPipelineExecutableInfoKHR* p_executable_info, uint32_t* p_statistic_count,
    VkPipelineExecutableStatisticKHR* p_statistics);
typedef VkResult(VKAPI_PTR* pfn_vk_get_pipeline_executable_internal_representations_khr)(
    VkDevice device, const VkPipelineExecutableInfoKHR* p_executable_info, uint32_t* p_internal_representation_count,
    VkPipelineExecutableInternalRepresentationKHR* p_internal_representations);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_pipeline_executable_properties_khr(
    VkDevice device, const VkPipelineInfoKHR* p_pipeline_info, uint32_t* p_executable_count,
    VkPipelineExecutablePropertiesKHR* p_properties) __asm("vkGetPipelineExecutablePropertiesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_pipeline_executable_statistics_khr(
    VkDevice device, const VkPipelineExecutableInfoKHR* p_executable_info, uint32_t* p_statistic_count,
    VkPipelineExecutableStatisticKHR* p_statistics) __asm("vkGetPipelineExecutableStatisticsKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_pipeline_executable_internal_representations_khr(
    VkDevice device, const VkPipelineExecutableInfoKHR* p_executable_info, uint32_t* p_internal_representation_count,
    VkPipelineExecutableInternalRepresentationKHR*
        p_internal_representations) __asm("vkGetPipelineExecutableInternalRepresentationsKHR");
#endif

#define vk_khr_shader_non_semantic_info 1
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION 1
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME "VK_KHR_shader_non_semantic_info"

#define vk_khr_copy_commands2 1
#define VK_KHR_COPY_COMMANDS_2_SPEC_VERSION 1
#define VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME "VK_KHR_copy_commands2"
typedef struct VkBufferCopy2KHR {
    VkStructureType s_type;
    const void*     p_next;
    VkDeviceSize    src_offset;
    VkDeviceSize    dst_offset;
    VkDeviceSize    size;
} VkBufferCopy2KHR;

typedef struct VkCopyBufferInfo2KHR {
    VkStructureType         s_type;
    const void*             p_next;
    VkBuffer                src_buffer;
    VkBuffer                dst_buffer;
    uint32_t                region_count;
    const VkBufferCopy2KHR* p_regions;
} VkCopyBufferInfo2KHR;

typedef struct VkImageCopy2KHR {
    VkStructureType          s_type;
    const void*              p_next;
    VkImageSubresourceLayers src_subresource;
    VkOffset3D               src_offset;
    VkImageSubresourceLayers dst_subresource;
    VkOffset3D               dst_offset;
    VkExtent3D               extent;
} VkImageCopy2KHR;

typedef struct VkCopyImageInfo2KHR {
    VkStructureType        s_type;
    const void*            p_next;
    VkImage                src_image;
    VkImageLayout          src_image_layout;
    VkImage                dst_image;
    VkImageLayout          dst_image_layout;
    uint32_t               region_count;
    const VkImageCopy2KHR* p_regions;
} VkCopyImageInfo2KHR;

typedef struct VkBufferImageCopy2KHR {
    VkStructureType          s_type;
    const void*              p_next;
    VkDeviceSize             buffer_offset;
    uint32_t                 buffer_row_length;
    uint32_t                 buffer_image_height;
    VkImageSubresourceLayers image_subresource;
    VkOffset3D               image_offset;
    VkExtent3D               image_extent;
} VkBufferImageCopy2KHR;

typedef struct VkCopyBufferToImageInfo2KHR {
    VkStructureType              s_type;
    const void*                  p_next;
    VkBuffer                     src_buffer;
    VkImage                      dst_image;
    VkImageLayout                dst_image_layout;
    uint32_t                     region_count;
    const VkBufferImageCopy2KHR* p_regions;
} VkCopyBufferToImageInfo2KHR;

typedef struct VkCopyImageToBufferInfo2KHR {
    VkStructureType              s_type;
    const void*                  p_next;
    VkImage                      src_image;
    VkImageLayout                src_image_layout;
    VkBuffer                     dst_buffer;
    uint32_t                     region_count;
    const VkBufferImageCopy2KHR* p_regions;
} VkCopyImageToBufferInfo2KHR;

typedef struct VkImageBlit2KHR {
    VkStructureType          s_type;
    const void*              p_next;
    VkImageSubresourceLayers src_subresource;
    VkOffset3D               src_offsets[2];
    VkImageSubresourceLayers dst_subresource;
    VkOffset3D               dst_offsets[2];
} VkImageBlit2KHR;

typedef struct VkBlitImageInfo2KHR {
    VkStructureType        s_type;
    const void*            p_next;
    VkImage                src_image;
    VkImageLayout          src_image_layout;
    VkImage                dst_image;
    VkImageLayout          dst_image_layout;
    uint32_t               region_count;
    const VkImageBlit2KHR* p_regions;
    VkFilter               filter;
} VkBlitImageInfo2KHR;

typedef struct VkImageResolve2KHR {
    VkStructureType          s_type;
    const void*              p_next;
    VkImageSubresourceLayers src_subresource;
    VkOffset3D               src_offset;
    VkImageSubresourceLayers dst_subresource;
    VkOffset3D               dst_offset;
    VkExtent3D               extent;
} VkImageResolve2KHR;

typedef struct VkResolveImageInfo2KHR {
    VkStructureType           s_type;
    const void*               p_next;
    VkImage                   src_image;
    VkImageLayout             src_image_layout;
    VkImage                   dst_image;
    VkImageLayout             dst_image_layout;
    uint32_t                  region_count;
    const VkImageResolve2KHR* p_regions;
} VkResolveImageInfo2KHR;

typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer2khr)(VkCommandBuffer             command_buffer,
                                                    const VkCopyBufferInfo2KHR* p_copy_buffer_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image2khr)(VkCommandBuffer            command_buffer,
                                                   const VkCopyImageInfo2KHR* p_copy_image_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer_to_image2khr)(
    VkCommandBuffer command_buffer, const VkCopyBufferToImageInfo2KHR* p_copy_buffer_to_image_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image_to_buffer2khr)(
    VkCommandBuffer command_buffer, const VkCopyImageToBufferInfo2KHR* p_copy_image_to_buffer_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_blit_image2khr)(VkCommandBuffer            command_buffer,
                                                   const VkBlitImageInfo2KHR* p_blit_image_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_resolve_image2khr)(VkCommandBuffer               command_buffer,
                                                      const VkResolveImageInfo2KHR* p_resolve_image_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer2khr(
    VkCommandBuffer command_buffer, const VkCopyBufferInfo2KHR* p_copy_buffer_info) __asm("vkCmdCopyBuffer2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image2khr(
    VkCommandBuffer command_buffer, const VkCopyImageInfo2KHR* p_copy_image_info) __asm("vkCmdCopyImage2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer_to_image2khr(
    VkCommandBuffer                    command_buffer,
    const VkCopyBufferToImageInfo2KHR* p_copy_buffer_to_image_info) __asm("vkCmdCopyBufferToImage2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image_to_buffer2khr(
    VkCommandBuffer                    command_buffer,
    const VkCopyImageToBufferInfo2KHR* p_copy_image_to_buffer_info) __asm("vkCmdCopyImageToBuffer2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_blit_image2khr(
    VkCommandBuffer command_buffer, const VkBlitImageInfo2KHR* p_blit_image_info) __asm("vkCmdBlitImage2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_resolve_image2khr(
    VkCommandBuffer command_buffer, const VkResolveImageInfo2KHR* p_resolve_image_info) __asm("vkCmdResolveImage2KHR");
#endif

#define vk_ext_debug_report 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)
#define VK_EXT_DEBUG_REPORT_SPEC_VERSION 9
#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME "VK_EXT_debug_report"

typedef enum VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT                    = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT                   = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT            = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT                     = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT                      = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT                  = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT             = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT                      = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT              = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT                     = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT                      = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT                      = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT                 = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT                = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT                 = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT              = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT             = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT            = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT                = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT                   = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT      = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT                    = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT            = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT             = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT                = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT               = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT                = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT              = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT  = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT                = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT           = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT       = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT   = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT     = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT =
        VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT =
        VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT =
        VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7fffffff
} VkDebugReportObjectTypeEXT;

typedef enum VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT         = 0x00000001,
    VK_DEBUG_REPORT_WARNING_BIT_EXT             = 0x00000002,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
    VK_DEBUG_REPORT_ERROR_BIT_EXT               = 0x00000008,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT               = 0x00000010,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT      = 0x7fffffff
} VkDebugReportFlagBitsEXT;
typedef VkFlags VkDebugReportFlagsEXT;
typedef VkBool32(VKAPI_PTR* pfn_vk_debug_report_callback_ext)(VkDebugReportFlagsEXT      flags,
                                                              VkDebugReportObjectTypeEXT object_type, uint64_t object,
                                                              size_t location, int32_t message_code,
                                                              const char* p_layer_prefix, const char* p_message,
                                                              void* p_user_data);

typedef struct VkDebugReportCallbackCreateInfoEXT {
    VkStructureType                  s_type;
    const void*                      p_next;
    VkDebugReportFlagsEXT            flags;
    pfn_vk_debug_report_callback_ext pfn_callback;
    void*                            p_user_data;
} VkDebugReportCallbackCreateInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_create_debug_report_callback_ext)(
    VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* p_create_info,
    const VkAllocationCallbacks* p_allocator, VkDebugReportCallbackEXT* p_callback);
typedef void(VKAPI_PTR* pfn_vk_destroy_debug_report_callback_ext)(VkInstance                   instance,
                                                                  VkDebugReportCallbackEXT     callback,
                                                                  const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_debug_report_message_ext)(VkInstance instance, VkDebugReportFlagsEXT flags,
                                                         VkDebugReportObjectTypeEXT object_type, uint64_t object,
                                                         size_t location, int32_t message_code,
                                                         const char* p_layer_prefix, const char* p_message);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL
vk_create_debug_report_callback_ext(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* p_create_info,
                                    const VkAllocationCallbacks* p_allocator,
                                    VkDebugReportCallbackEXT*    p_callback) __asm("vkCreateDebugReportCallbackEXT");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_debug_report_callback_ext(VkInstance instance, VkDebugReportCallbackEXT callback,
                                     const VkAllocationCallbacks* p_allocator) __asm("vkDestroyDebugReportCallbackEXT");

VKAPI_ATTR void VKAPI_CALL vk_debug_report_message_ext(VkInstance instance, VkDebugReportFlagsEXT flags,
                                                       VkDebugReportObjectTypeEXT object_type, uint64_t object,
                                                       size_t location, int32_t message_code,
                                                       const char* p_layer_prefix,
                                                       const char* p_message) __asm("vkDebugReportMessageEXT");
#endif

#define vk_nv_glsl_shader 1
#define VK_NV_GLSL_SHADER_SPEC_VERSION 1
#define VK_NV_GLSL_SHADER_EXTENSION_NAME "VK_NV_glsl_shader"

#define vk_ext_depth_range_unrestricted 1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION 1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME "VK_EXT_depth_range_unrestricted"

#define vk_img_filter_cubic 1
#define VK_IMG_FILTER_CUBIC_SPEC_VERSION 1
#define VK_IMG_FILTER_CUBIC_EXTENSION_NAME "VK_IMG_filter_cubic"

#define vk_amd_rasterization_order 1
#define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION 1
#define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME "VK_AMD_rasterization_order"

typedef enum VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD   = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD  = 1,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7fffffff
} VkRasterizationOrderAMD;
typedef struct VkPipelineRasterizationStateRasterizationOrderAMD {
    VkStructureType         s_type;
    const void*             p_next;
    VkRasterizationOrderAMD rasterization_order;
} VkPipelineRasterizationStateRasterizationOrderAMD;

#define vk_amd_shader_trinary_minmax 1
#define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION 1
#define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME "VK_AMD_shader_trinary_minmax"

#define vk_amd_shader_explicit_vertex_parameter 1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION 1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME "VK_AMD_shader_explicit_vertex_parameter"

#define vk_ext_debug_marker 1
#define VK_EXT_DEBUG_MARKER_SPEC_VERSION 4
#define VK_EXT_DEBUG_MARKER_EXTENSION_NAME "VK_EXT_debug_marker"
typedef struct VkDebugMarkerObjectNameInfoEXT {
    VkStructureType            s_type;
    const void*                p_next;
    VkDebugReportObjectTypeEXT object_type;
    uint64_t                   object;
    const char*                p_object_name;
} VkDebugMarkerObjectNameInfoEXT;

typedef struct VkDebugMarkerObjectTagInfoEXT {
    VkStructureType            s_type;
    const void*                p_next;
    VkDebugReportObjectTypeEXT object_type;
    uint64_t                   object;
    uint64_t                   tag_name;
    size_t                     tag_size;
    const void*                p_tag;
} VkDebugMarkerObjectTagInfoEXT;

typedef struct VkDebugMarkerMarkerInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    const char*     p_marker_name;
    float           color[4];
} VkDebugMarkerMarkerInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_debug_marker_set_object_tag_ext)(VkDevice                             device,
                                                                    const VkDebugMarkerObjectTagInfoEXT* p_tag_info);
typedef VkResult(VKAPI_PTR* pfn_vk_debug_marker_set_object_name_ext)(VkDevice                              device,
                                                                     const VkDebugMarkerObjectNameInfoEXT* p_name_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_debug_marker_begin_ext)(VkCommandBuffer                   command_buffer,
                                                           const VkDebugMarkerMarkerInfoEXT* p_marker_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_debug_marker_end_ext)(VkCommandBuffer command_buffer);
typedef void(VKAPI_PTR* pfn_vk_cmd_debug_marker_insert_ext)(VkCommandBuffer                   command_buffer,
                                                            const VkDebugMarkerMarkerInfoEXT* p_marker_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_debug_marker_set_object_tag_ext(
    VkDevice device, const VkDebugMarkerObjectTagInfoEXT* p_tag_info) __asm("vkDebugMarkerSetObjectTagEXT");

VKAPI_ATTR VkResult VKAPI_CALL vk_debug_marker_set_object_name_ext(
    VkDevice device, const VkDebugMarkerObjectNameInfoEXT* p_name_info) __asm("vkDebugMarkerSetObjectNameEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_debug_marker_begin_ext(
    VkCommandBuffer command_buffer, const VkDebugMarkerMarkerInfoEXT* p_marker_info) __asm("vkCmdDebugMarkerBeginEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_debug_marker_end_ext(VkCommandBuffer command_buffer) __asm("vkCmdDebugMarkerEndEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_debug_marker_insert_ext(
    VkCommandBuffer command_buffer, const VkDebugMarkerMarkerInfoEXT* p_marker_info) __asm("vkCmdDebugMarkerInsertEXT");
#endif

#define vk_amd_gcn_shader 1
#define VK_AMD_GCN_SHADER_SPEC_VERSION 1
#define VK_AMD_GCN_SHADER_EXTENSION_NAME "VK_AMD_gcn_shader"

#define vk_nv_dedicated_allocation 1
#define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION 1
#define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_NV_dedicated_allocation"
typedef struct VkDedicatedAllocationImageCreateInfoNV {
    VkStructureType s_type;
    const void*     p_next;
    VkBool32        dedicated_allocation;
} VkDedicatedAllocationImageCreateInfoNV;

typedef struct VkDedicatedAllocationBufferCreateInfoNV {
    VkStructureType s_type;
    const void*     p_next;
    VkBool32        dedicated_allocation;
} VkDedicatedAllocationBufferCreateInfoNV;

typedef struct VkDedicatedAllocationMemoryAllocateInfoNV {
    VkStructureType s_type;
    const void*     p_next;
    VkImage         image;
    VkBuffer        buffer;
} VkDedicatedAllocationMemoryAllocateInfoNV;

#define vk_ext_transform_feedback 1
#define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION 1
#define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME "VK_EXT_transform_feedback"
typedef VkFlags VkPipelineRasterizationStateStreamCreateFlagsEXT;
typedef struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        transform_feedback;
    VkBool32        geometry_streams;
} VkPhysicalDeviceTransformFeedbackFeaturesEXT;

typedef struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_transform_feedback_streams;
    uint32_t        max_transform_feedback_buffers;
    VkDeviceSize    max_transform_feedback_buffer_size;
    uint32_t        max_transform_feedback_stream_data_size;
    uint32_t        max_transform_feedback_buffer_data_size;
    uint32_t        max_transform_feedback_buffer_data_stride;
    VkBool32        transform_feedback_queries;
    VkBool32        transform_feedback_streams_lines_triangles;
    VkBool32        transform_feedback_rasterization_stream_select;
    VkBool32        transform_feedback_draw;
} VkPhysicalDeviceTransformFeedbackPropertiesEXT;

typedef struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    VkStructureType                                  s_type;
    const void*                                      p_next;
    VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
    uint32_t                                         rasterization_stream;
} VkPipelineRasterizationStateStreamCreateInfoEXT;

typedef void(VKAPI_PTR* pfn_vk_cmd_bind_transform_feedback_buffers_ext)(VkCommandBuffer command_buffer,
                                                                        uint32_t first_binding, uint32_t binding_count,
                                                                        const VkBuffer*     p_buffers,
                                                                        const VkDeviceSize* p_offsets,
                                                                        const VkDeviceSize* p_sizes);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_transform_feedback_ext)(VkCommandBuffer     command_buffer,
                                                                 uint32_t            first_counter_buffer,
                                                                 uint32_t            counter_buffer_count,
                                                                 const VkBuffer*     p_counter_buffers,
                                                                 const VkDeviceSize* p_counter_buffer_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_transform_feedback_ext)(VkCommandBuffer     command_buffer,
                                                               uint32_t            first_counter_buffer,
                                                               uint32_t            counter_buffer_count,
                                                               const VkBuffer*     p_counter_buffers,
                                                               const VkDeviceSize* p_counter_buffer_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_query_indexed_ext)(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                            uint32_t query, VkQueryControlFlags flags, uint32_t index);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_query_indexed_ext)(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                          uint32_t query, uint32_t index);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_byte_count_ext)(VkCommandBuffer command_buffer,
                                                                 uint32_t instance_count, uint32_t first_instance,
                                                                 VkBuffer     counter_buffer,
                                                                 VkDeviceSize counter_buffer_offset,
                                                                 uint32_t counter_offset, uint32_t vertex_stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_transform_feedback_buffers_ext(
    VkCommandBuffer command_buffer, uint32_t first_binding, uint32_t binding_count, const VkBuffer* p_buffers,
    const VkDeviceSize* p_offsets, const VkDeviceSize* p_sizes) __asm("vkCmdBindTransformFeedbackBuffersEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_transform_feedback_ext(
    VkCommandBuffer command_buffer, uint32_t first_counter_buffer, uint32_t counter_buffer_count,
    const VkBuffer*     p_counter_buffers,
    const VkDeviceSize* p_counter_buffer_offsets) __asm("vkCmdBeginTransformFeedbackEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_end_transform_feedback_ext(VkCommandBuffer command_buffer, uint32_t first_counter_buffer,
                                  uint32_t counter_buffer_count, const VkBuffer* p_counter_buffers,
                                  const VkDeviceSize* p_counter_buffer_offsets) __asm("vkCmdEndTransformFeedbackEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_query_indexed_ext(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                          uint32_t query, VkQueryControlFlags flags,
                                                          uint32_t index) __asm("vkCmdBeginQueryIndexedEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_query_indexed_ext(VkCommandBuffer command_buffer, VkQueryPool query_pool,
                                                        uint32_t query,
                                                        uint32_t index) __asm("vkCmdEndQueryIndexedEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_byte_count_ext(
    VkCommandBuffer command_buffer, uint32_t instance_count, uint32_t first_instance, VkBuffer counter_buffer,
    VkDeviceSize counter_buffer_offset, uint32_t counter_offset,
    uint32_t vertex_stride) __asm("vkCmdDrawIndirectByteCountEXT");
#endif

#define vk_nvx_image_view_handle 1
#define VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION 2
#define VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME "VK_NVX_image_view_handle"
typedef struct VkImageViewHandleInfoNVX {
    VkStructureType  s_type;
    const void*      p_next;
    VkImageView      image_view;
    VkDescriptorType descriptor_type;
    VkSampler        sampler;
} VkImageViewHandleInfoNVX;

typedef struct VkImageViewAddressPropertiesNVX {
    VkStructureType s_type;
    void*           p_next;
    VkDeviceAddress device_address;
    VkDeviceSize    size;
} VkImageViewAddressPropertiesNVX;

typedef uint32_t(VKAPI_PTR* pfn_vk_get_image_view_handle_nvx)(VkDevice device, const VkImageViewHandleInfoNVX* p_info);
typedef VkResult(VKAPI_PTR* pfn_vk_get_image_view_address_nvx)(VkDevice device, VkImageView image_view,
                                                               VkImageViewAddressPropertiesNVX* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR uint32_t VKAPI_CALL
vk_get_image_view_handle_nvx(VkDevice device, const VkImageViewHandleInfoNVX* p_info) __asm("vkGetImageViewHandleNVX");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_image_view_address_nvx(VkDevice device, VkImageView image_view,
                              VkImageViewAddressPropertiesNVX* p_properties) __asm("vkGetImageViewAddressNVX");
#endif

#define vk_amd_draw_indirect_count 1
#define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION 2
#define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME "VK_AMD_draw_indirect_count"
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_count_amd)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                            VkDeviceSize offset, VkBuffer count_buffer,
                                                            VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                                            uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect_count_amd)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                                    VkDeviceSize offset, VkBuffer count_buffer,
                                                                    VkDeviceSize count_buffer_offset,
                                                                    uint32_t max_draw_count, uint32_t stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_count_amd(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                          VkDeviceSize offset, VkBuffer count_buffer,
                                                          VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                                          uint32_t stride) __asm("vkCmdDrawIndirectCountAMD");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_draw_indexed_indirect_count_amd(VkCommandBuffer command_buffer, VkBuffer buffer, VkDeviceSize offset,
                                       VkBuffer count_buffer, VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
                                       uint32_t stride) __asm("vkCmdDrawIndexedIndirectCountAMD");
#endif

#define vk_amd_negative_viewport_height 1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION 1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME "VK_AMD_negative_viewport_height"

#define vk_amd_gpu_shader_half_float 1
#define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION 2
#define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME "VK_AMD_gpu_shader_half_float"

#define vk_amd_shader_ballot 1
#define VK_AMD_SHADER_BALLOT_SPEC_VERSION 1
#define VK_AMD_SHADER_BALLOT_EXTENSION_NAME "VK_AMD_shader_ballot"

#define vk_amd_texture_gather_bias_lod 1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION 1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME "VK_AMD_texture_gather_bias_lod"
typedef struct VkTextureLODGatherFormatPropertiesAMD {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        supports_texture_gather_lodbias_amd;
} VkTextureLODGatherFormatPropertiesAMD;

#define vk_amd_shader_info 1
#define VK_AMD_SHADER_INFO_SPEC_VERSION 1
#define VK_AMD_SHADER_INFO_EXTENSION_NAME "VK_AMD_shader_info"

typedef enum VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD  = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD      = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD    = 0x7fffffff
} VkShaderInfoTypeAMD;
typedef struct VkShaderResourceUsageAMD {
    uint32_t num_used_vgprs;
    uint32_t num_used_sgprs;
    uint32_t lds_size_per_local_work_group;
    size_t   lds_usage_size_in_bytes;
    size_t   scratch_mem_usage_in_bytes;
} VkShaderResourceUsageAMD;

typedef struct VkShaderStatisticsInfoAMD {
    VkShaderStageFlags       shader_stage_mask;
    VkShaderResourceUsageAMD resource_usage;
    uint32_t                 num_physical_vgprs;
    uint32_t                 num_physical_sgprs;
    uint32_t                 num_available_vgprs;
    uint32_t                 num_available_sgprs;
    uint32_t                 compute_work_group_size[3];
} VkShaderStatisticsInfoAMD;

typedef VkResult(VKAPI_PTR* pfn_vk_get_shader_info_amd)(VkDevice device, VkPipeline pipeline,
                                                        VkShaderStageFlagBits shader_stage,
                                                        VkShaderInfoTypeAMD info_type, size_t* p_info_size,
                                                        void* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_shader_info_amd(VkDevice device, VkPipeline pipeline,
                                                      VkShaderStageFlagBits shader_stage, VkShaderInfoTypeAMD info_type,
                                                      size_t* p_info_size, void* p_info) __asm("vkGetShaderInfoAMD");
#endif

#define vk_amd_shader_image_load_store_lod 1
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION 1
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME "VK_AMD_shader_image_load_store_lod"

#define vk_nv_corner_sampled_image 1
#define VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION 2
#define VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME "VK_NV_corner_sampled_image"
typedef struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        corner_sampled_image;
} VkPhysicalDeviceCornerSampledImageFeaturesNV;

#define vk_img_format_pvrtc 1
#define VK_IMG_FORMAT_PVRTC_SPEC_VERSION 1
#define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME "VK_IMG_format_pvrtc"

#define vk_nv_external_memory_capabilities 1
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_NV_external_memory_capabilities"

typedef enum VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV     = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV      = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV  = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV   = 0x7fffffff
} VkExternalMemoryHandleTypeFlagBitsNV;
typedef VkFlags VkExternalMemoryHandleTypeFlagsNV;

typedef enum VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV     = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV     = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7fffffff
} VkExternalMemoryFeatureFlagBitsNV;
typedef VkFlags VkExternalMemoryFeatureFlagsNV;
typedef struct VkExternalImageFormatPropertiesNV {
    VkImageFormatProperties           image_format_properties;
    VkExternalMemoryFeatureFlagsNV    external_memory_features;
    VkExternalMemoryHandleTypeFlagsNV export_from_imported_handle_types;
    VkExternalMemoryHandleTypeFlagsNV compatible_handle_types;
} VkExternalImageFormatPropertiesNV;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_external_image_format_properties_nv)(
    VkPhysicalDevice physical_device, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage,
    VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV external_handle_type,
    VkExternalImageFormatPropertiesNV* p_external_image_format_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_external_image_format_properties_nv(
    VkPhysicalDevice physical_device, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage,
    VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV external_handle_type,
    VkExternalImageFormatPropertiesNV*
        p_external_image_format_properties) __asm("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
#endif

#define vk_nv_external_memory 1
#define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME "VK_NV_external_memory"
typedef struct VkExternalMemoryImageCreateInfoNV {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkExternalMemoryHandleTypeFlagsNV handle_types;
} VkExternalMemoryImageCreateInfoNV;

typedef struct VkExportMemoryAllocateInfoNV {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkExternalMemoryHandleTypeFlagsNV handle_types;
} VkExportMemoryAllocateInfoNV;

#define vk_ext_validation_flags 1
#define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION 2
#define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME "VK_EXT_validation_flags"

typedef enum VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT      = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT  = 1,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7fffffff
} VkValidationCheckEXT;
typedef struct VkValidationFlagsEXT {
    VkStructureType             s_type;
    const void*                 p_next;
    uint32_t                    disabled_validation_check_count;
    const VkValidationCheckEXT* p_disabled_validation_checks;
} VkValidationFlagsEXT;

#define vk_ext_shader_subgroup_ballot 1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME "VK_EXT_shader_subgroup_ballot"

#define vk_ext_shader_subgroup_vote 1
#define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME "VK_EXT_shader_subgroup_vote"

#define vk_ext_texture_compression_astc_hdr 1
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION 1
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME "VK_EXT_texture_compression_astc_hdr"
typedef struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        texture_compression_astc_hdr;
} VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;

#define vk_ext_astc_decode_mode 1
#define VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION 1
#define VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME "VK_EXT_astc_decode_mode"
typedef struct VkImageViewASTCDecodeModeEXT {
    VkStructureType s_type;
    const void*     p_next;
    VkFormat        decode_mode;
} VkImageViewASTCDecodeModeEXT;

typedef struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        decode_mode_shared_exponent;
} VkPhysicalDeviceASTCDecodeFeaturesEXT;

#define vk_ext_conditional_rendering 1
#define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION 2
#define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME "VK_EXT_conditional_rendering"

typedef enum VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT       = 0x00000001,
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} VkConditionalRenderingFlagBitsEXT;
typedef VkFlags VkConditionalRenderingFlagsEXT;
typedef struct VkConditionalRenderingBeginInfoEXT {
    VkStructureType                s_type;
    const void*                    p_next;
    VkBuffer                       buffer;
    VkDeviceSize                   offset;
    VkConditionalRenderingFlagsEXT flags;
} VkConditionalRenderingBeginInfoEXT;

typedef struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        conditional_rendering;
    VkBool32        inherited_conditional_rendering;
} VkPhysicalDeviceConditionalRenderingFeaturesEXT;

typedef struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    VkBool32        conditional_rendering_enable;
} VkCommandBufferInheritanceConditionalRenderingInfoEXT;

typedef void(VKAPI_PTR* pfn_vk_cmd_begin_conditional_rendering_ext)(
    VkCommandBuffer command_buffer, const VkConditionalRenderingBeginInfoEXT* p_conditional_rendering_begin);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_conditional_rendering_ext)(VkCommandBuffer command_buffer);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_conditional_rendering_ext(
    VkCommandBuffer                           command_buffer,
    const VkConditionalRenderingBeginInfoEXT* p_conditional_rendering_begin) __asm("vkCmdBeginConditionalRenderingEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_end_conditional_rendering_ext(VkCommandBuffer command_buffer) __asm("vkCmdEndConditionalRenderingEXT");
#endif

#define vk_nv_clip_space_w_scaling 1
#define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION 1
#define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME "VK_NV_clip_space_w_scaling"
typedef struct VkViewportWScalingNV {
    float xcoeff;
    float ycoeff;
} VkViewportWScalingNV;

typedef struct VkPipelineViewportWScalingStateCreateInfoNV {
    VkStructureType             s_type;
    const void*                 p_next;
    VkBool32                    viewport_wscaling_enable;
    uint32_t                    viewport_count;
    const VkViewportWScalingNV* p_viewport_wscalings;
} VkPipelineViewportWScalingStateCreateInfoNV;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport_wscaling_nv)(VkCommandBuffer command_buffer, uint32_t first_viewport,
                                                             uint32_t                    viewport_count,
                                                             const VkViewportWScalingNV* p_viewport_wscalings);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL
vk_cmd_set_viewport_wscaling_nv(VkCommandBuffer command_buffer, uint32_t first_viewport, uint32_t viewport_count,
                                const VkViewportWScalingNV* p_viewport_wscalings) __asm("vkCmdSetViewportWScalingNV");
#endif

#define vk_ext_direct_mode_display 1
#define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION 1
#define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME "VK_EXT_direct_mode_display"
typedef VkResult(VKAPI_PTR* pfn_vk_release_display_ext)(VkPhysicalDevice physical_device, VkDisplayKHR display);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_release_display_ext(VkPhysicalDevice physical_device,
                                                      VkDisplayKHR     display) __asm("vkReleaseDisplayEXT");
#endif

#define vk_ext_display_surface_counter 1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION 1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME "VK_EXT_display_surface_counter"

typedef enum VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_EXT             = 0x00000001,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} VkSurfaceCounterFlagBitsEXT;
typedef VkFlags VkSurfaceCounterFlagsEXT;
typedef struct VkSurfaceCapabilities2EXT {
    VkStructureType               s_type;
    void*                         p_next;
    uint32_t                      min_image_count;
    uint32_t                      max_image_count;
    VkExtent2D                    current_extent;
    VkExtent2D                    min_image_extent;
    VkExtent2D                    max_image_extent;
    uint32_t                      max_image_array_layers;
    VkSurfaceTransformFlagsKHR    supported_transforms;
    VkSurfaceTransformFlagBitsKHR current_transform;
    VkCompositeAlphaFlagsKHR      supported_composite_alpha;
    VkImageUsageFlags             supported_usage_flags;
    VkSurfaceCounterFlagsEXT      supported_surface_counters;
} VkSurfaceCapabilities2EXT;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_surface_capabilities2ext)(
    VkPhysicalDevice physical_device, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* p_surface_capabilities);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_surface_capabilities2ext(
    VkPhysicalDevice physical_device, VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* p_surface_capabilities) __asm("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
#endif

#define vk_ext_display_control 1
#define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION 1
#define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME "VK_EXT_display_control"

typedef enum VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT      = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT  = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT       = 2,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7fffffff
} VkDisplayPowerStateEXT;

typedef enum VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT        = 0x7fffffff
} VkDeviceEventTypeEXT;

typedef enum VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT        = 0x7fffffff
} VkDisplayEventTypeEXT;
typedef struct VkDisplayPowerInfoEXT {
    VkStructureType        s_type;
    const void*            p_next;
    VkDisplayPowerStateEXT power_state;
} VkDisplayPowerInfoEXT;

typedef struct VkDeviceEventInfoEXT {
    VkStructureType      s_type;
    const void*          p_next;
    VkDeviceEventTypeEXT device_event;
} VkDeviceEventInfoEXT;

typedef struct VkDisplayEventInfoEXT {
    VkStructureType       s_type;
    const void*           p_next;
    VkDisplayEventTypeEXT display_event;
} VkDisplayEventInfoEXT;

typedef struct VkSwapchainCounterCreateInfoEXT {
    VkStructureType          s_type;
    const void*              p_next;
    VkSurfaceCounterFlagsEXT surface_counters;
} VkSwapchainCounterCreateInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_display_power_control_ext)(VkDevice device, VkDisplayKHR display,
                                                              const VkDisplayPowerInfoEXT* p_display_power_info);
typedef VkResult(VKAPI_PTR* pfn_vk_register_device_event_ext)(VkDevice                     device,
                                                              const VkDeviceEventInfoEXT*  p_device_event_info,
                                                              const VkAllocationCallbacks* p_allocator,
                                                              VkFence*                     p_fence);
typedef VkResult(VKAPI_PTR* pfn_vk_register_display_event_ext)(VkDevice device, VkDisplayKHR display,
                                                               const VkDisplayEventInfoEXT* p_display_event_info,
                                                               const VkAllocationCallbacks* p_allocator,
                                                               VkFence*                     p_fence);
typedef VkResult(VKAPI_PTR* pfn_vk_get_swapchain_counter_ext)(VkDevice device, VkSwapchainKHR swapchain,
                                                              VkSurfaceCounterFlagBitsEXT counter,
                                                              uint64_t*                   p_counter_value);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL
vk_display_power_control_ext(VkDevice device, VkDisplayKHR display,
                             const VkDisplayPowerInfoEXT* p_display_power_info) __asm("vkDisplayPowerControlEXT");

VKAPI_ATTR VkResult VKAPI_CALL vk_register_device_event_ext(VkDevice                     device,
                                                            const VkDeviceEventInfoEXT*  p_device_event_info,
                                                            const VkAllocationCallbacks* p_allocator,
                                                            VkFence* p_fence) __asm("vkRegisterDeviceEventEXT");

VKAPI_ATTR VkResult VKAPI_CALL vk_register_display_event_ext(VkDevice device, VkDisplayKHR display,
                                                             const VkDisplayEventInfoEXT* p_display_event_info,
                                                             const VkAllocationCallbacks* p_allocator,
                                                             VkFence* p_fence) __asm("vkRegisterDisplayEventEXT");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_swapchain_counter_ext(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter,
                             uint64_t* p_counter_value) __asm("vkGetSwapchainCounterEXT");
#endif

#define vk_google_display_timing 1
#define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION 1
#define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME "VK_GOOGLE_display_timing"
typedef struct VkRefreshCycleDurationGOOGLE {
    uint64_t refresh_duration;
} VkRefreshCycleDurationGOOGLE;

typedef struct VkPastPresentationTimingGOOGLE {
    uint32_t present_id;
    uint64_t desired_present_time;
    uint64_t actual_present_time;
    uint64_t earliest_present_time;
    uint64_t present_margin;
} VkPastPresentationTimingGOOGLE;

typedef struct VkPresentTimeGOOGLE {
    uint32_t present_id;
    uint64_t desired_present_time;
} VkPresentTimeGOOGLE;

typedef struct VkPresentTimesInfoGOOGLE {
    VkStructureType            s_type;
    const void*                p_next;
    uint32_t                   swapchain_count;
    const VkPresentTimeGOOGLE* p_times;
} VkPresentTimesInfoGOOGLE;

typedef VkResult(VKAPI_PTR* pfn_vk_get_refresh_cycle_duration_google)(
    VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* p_display_timing_properties);
typedef VkResult(VKAPI_PTR* pfn_vk_get_past_presentation_timing_google)(
    VkDevice device, VkSwapchainKHR swapchain, uint32_t* p_presentation_timing_count,
    VkPastPresentationTimingGOOGLE* p_presentation_timings);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_refresh_cycle_duration_google(
    VkDevice device, VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* p_display_timing_properties) __asm("vkGetRefreshCycleDurationGOOGLE");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_past_presentation_timing_google(
    VkDevice device, VkSwapchainKHR swapchain, uint32_t* p_presentation_timing_count,
    VkPastPresentationTimingGOOGLE* p_presentation_timings) __asm("vkGetPastPresentationTimingGOOGLE");
#endif

#define vk_nv_sample_mask_override_coverage 1
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION 1
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME "VK_NV_sample_mask_override_coverage"

#define vk_nv_geometry_shader_passthrough 1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION 1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME "VK_NV_geometry_shader_passthrough"

#define vk_nv_viewport_array2 1
#define VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION 1
#define VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME "VK_NV_viewport_array2"

#define vk_nvx_multiview_per_view_attributes 1
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION 1
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME "VK_NVX_multiview_per_view_attributes"
typedef struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        per_view_position_all_components;
} VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

#define vk_nv_viewport_swizzle 1
#define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION 1
#define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME "VK_NV_viewport_swizzle"

typedef enum VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV   = 0x7fffffff
} VkViewportCoordinateSwizzleNV;
typedef VkFlags VkPipelineViewportSwizzleStateCreateFlagsNV;
typedef struct VkViewportSwizzleNV {
    VkViewportCoordinateSwizzleNV x;
    VkViewportCoordinateSwizzleNV y;
    VkViewportCoordinateSwizzleNV z;
    VkViewportCoordinateSwizzleNV w;
} VkViewportSwizzleNV;

typedef struct VkPipelineViewportSwizzleStateCreateInfoNV {
    VkStructureType                             s_type;
    const void*                                 p_next;
    VkPipelineViewportSwizzleStateCreateFlagsNV flags;
    uint32_t                                    viewport_count;
    const VkViewportSwizzleNV*                  p_viewport_swizzles;
} VkPipelineViewportSwizzleStateCreateInfoNV;

#define vk_ext_discard_rectangles 1
#define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION 1
#define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME "VK_EXT_discard_rectangles"

typedef enum VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT  = 0x7fffffff
} VkDiscardRectangleModeEXT;
typedef VkFlags VkPipelineDiscardRectangleStateCreateFlagsEXT;
typedef struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_discard_rectangles;
} VkPhysicalDeviceDiscardRectanglePropertiesEXT;

typedef struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    VkStructureType                               s_type;
    const void*                                   p_next;
    VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
    VkDiscardRectangleModeEXT                     discard_rectangle_mode;
    uint32_t                                      discard_rectangle_count;
    const VkRect2D*                               p_discard_rectangles;
} VkPipelineDiscardRectangleStateCreateInfoEXT;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_discard_rectangle_ext)(VkCommandBuffer command_buffer,
                                                              uint32_t        first_discard_rectangle,
                                                              uint32_t        discard_rectangle_count,
                                                              const VkRect2D* p_discard_rectangles);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_discard_rectangle_ext(
    VkCommandBuffer command_buffer, uint32_t first_discard_rectangle, uint32_t discard_rectangle_count,
    const VkRect2D* p_discard_rectangles) __asm("vkCmdSetDiscardRectangleEXT");
#endif

#define vk_ext_conservative_rasterization 1
#define VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION 1
#define VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME "VK_EXT_conservative_rasterization"

typedef enum VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT      = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT  = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT      = 0x7fffffff
} VkConservativeRasterizationModeEXT;
typedef VkFlags VkPipelineRasterizationConservativeStateCreateFlagsEXT;
typedef struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    float           primitive_overestimation_size;
    float           max_extra_primitive_overestimation_size;
    float           extra_primitive_overestimation_size_granularity;
    VkBool32        primitive_underestimation;
    VkBool32        conservative_point_and_line_rasterization;
    VkBool32        degenerate_triangles_rasterized;
    VkBool32        degenerate_lines_rasterized;
    VkBool32        fully_covered_fragment_shader_input_variable;
    VkBool32        conservative_rasterization_post_depth_coverage;
} VkPhysicalDeviceConservativeRasterizationPropertiesEXT;

typedef struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    VkStructureType                                        s_type;
    const void*                                            p_next;
    VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
    VkConservativeRasterizationModeEXT                     conservative_rasterization_mode;
    float                                                  extra_primitive_overestimation_size;
} VkPipelineRasterizationConservativeStateCreateInfoEXT;

#define vk_ext_depth_clip_enable 1
#define VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION 1
#define VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME "VK_EXT_depth_clip_enable"
typedef VkFlags VkPipelineRasterizationDepthClipStateCreateFlagsEXT;
typedef struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        depth_clip_enable;
} VkPhysicalDeviceDepthClipEnableFeaturesEXT;

typedef struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    VkStructureType                                     s_type;
    const void*                                         p_next;
    VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
    VkBool32                                            depth_clip_enable;
} VkPipelineRasterizationDepthClipStateCreateInfoEXT;

#define vk_ext_swapchain_colorspace 1
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION 4
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME "VK_EXT_swapchain_colorspace"

#define vk_ext_hdr_metadata 1
#define VK_EXT_HDR_METADATA_SPEC_VERSION 2
#define VK_EXT_HDR_METADATA_EXTENSION_NAME "VK_EXT_hdr_metadata"
typedef struct VkXYColorEXT {
    float x;
    float y;
} VkXYColorEXT;

typedef struct VkHdrMetadataEXT {
    VkStructureType s_type;
    const void*     p_next;
    VkXYColorEXT    display_primary_red;
    VkXYColorEXT    display_primary_green;
    VkXYColorEXT    display_primary_blue;
    VkXYColorEXT    white_point;
    float           max_luminance;
    float           min_luminance;
    float           max_content_light_level;
    float           max_frame_average_light_level;
} VkHdrMetadataEXT;

typedef void(VKAPI_PTR* pfn_vk_set_hdr_metadata_ext)(VkDevice device, uint32_t swapchain_count,
                                                     const VkSwapchainKHR*   p_swapchains,
                                                     const VkHdrMetadataEXT* p_metadata);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_set_hdr_metadata_ext(VkDevice device, uint32_t swapchain_count,
                                                   const VkSwapchainKHR*   p_swapchains,
                                                   const VkHdrMetadataEXT* p_metadata) __asm("vkSetHdrMetadataEXT");
#endif

#define vk_ext_external_memory_dma_buf 1
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION 1
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME "VK_EXT_external_memory_dma_buf"

#define vk_ext_queue_family_foreign 1
#define VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION 1
#define VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME "VK_EXT_queue_family_foreign"
#define VK_QUEUE_FAMILY_FOREIGN_EXT (~0U - 2)

#define vk_ext_debug_utils 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugUtilsMessengerEXT)
#define VK_EXT_DEBUG_UTILS_SPEC_VERSION 2
#define VK_EXT_DEBUG_UTILS_EXTENSION_NAME "VK_EXT_debug_utils"
typedef VkFlags VkDebugUtilsMessengerCallbackDataFlagsEXT;

typedef enum VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT        = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT           = 0x00000010,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT        = 0x00000100,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT          = 0x00001000,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} VkDebugUtilsMessageSeverityFlagBitsEXT;

typedef enum VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT        = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT     = 0x00000002,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT    = 0x00000004,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} VkDebugUtilsMessageTypeFlagBitsEXT;
typedef VkFlags VkDebugUtilsMessageTypeFlagsEXT;
typedef VkFlags VkDebugUtilsMessageSeverityFlagsEXT;
typedef VkFlags VkDebugUtilsMessengerCreateFlagsEXT;
typedef struct VkDebugUtilsLabelEXT {
    VkStructureType s_type;
    const void*     p_next;
    const char*     p_label_name;
    float           color[4];
} VkDebugUtilsLabelEXT;

typedef struct VkDebugUtilsObjectNameInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    VkObjectType    object_type;
    uint64_t        object_handle;
    const char*     p_object_name;
} VkDebugUtilsObjectNameInfoEXT;

typedef struct VkDebugUtilsMessengerCallbackDataEXT {
    VkStructureType                           s_type;
    const void*                               p_next;
    VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
    const char*                               p_message_id_name;
    int32_t                                   message_id_number;
    const char*                               p_message;
    uint32_t                                  queue_label_count;
    const VkDebugUtilsLabelEXT*               p_queue_labels;
    uint32_t                                  cmd_buf_label_count;
    const VkDebugUtilsLabelEXT*               p_cmd_buf_labels;
    uint32_t                                  object_count;
    const VkDebugUtilsObjectNameInfoEXT*      p_objects;
} VkDebugUtilsMessengerCallbackDataEXT;

typedef VkBool32(VKAPI_PTR* pfn_vk_debug_utils_messenger_callback_ext)(
    VkDebugUtilsMessageSeverityFlagBitsEXT message_severity, VkDebugUtilsMessageTypeFlagsEXT message_types,
    const VkDebugUtilsMessengerCallbackDataEXT* p_callback_data, void* p_user_data);

typedef struct VkDebugUtilsMessengerCreateInfoEXT {
    VkStructureType                           s_type;
    const void*                               p_next;
    VkDebugUtilsMessengerCreateFlagsEXT       flags;
    VkDebugUtilsMessageSeverityFlagsEXT       message_severity;
    VkDebugUtilsMessageTypeFlagsEXT           message_type;
    pfn_vk_debug_utils_messenger_callback_ext pfn_user_callback;
    void*                                     p_user_data;
} VkDebugUtilsMessengerCreateInfoEXT;

typedef struct VkDebugUtilsObjectTagInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    VkObjectType    object_type;
    uint64_t        object_handle;
    uint64_t        tag_name;
    size_t          tag_size;
    const void*     p_tag;
} VkDebugUtilsObjectTagInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_set_debug_utils_object_name_ext)(VkDevice                             device,
                                                                    const VkDebugUtilsObjectNameInfoEXT* p_name_info);
typedef VkResult(VKAPI_PTR* pfn_vk_set_debug_utils_object_tag_ext)(VkDevice                            device,
                                                                   const VkDebugUtilsObjectTagInfoEXT* p_tag_info);
typedef void(VKAPI_PTR* pfn_vk_queue_begin_debug_utils_label_ext)(VkQueue                     queue,
                                                                  const VkDebugUtilsLabelEXT* p_label_info);
typedef void(VKAPI_PTR* pfn_vk_queue_end_debug_utils_label_ext)(VkQueue queue);
typedef void(VKAPI_PTR* pfn_vk_queue_insert_debug_utils_label_ext)(VkQueue                     queue,
                                                                   const VkDebugUtilsLabelEXT* p_label_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_debug_utils_label_ext)(VkCommandBuffer             command_buffer,
                                                                const VkDebugUtilsLabelEXT* p_label_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_debug_utils_label_ext)(VkCommandBuffer command_buffer);
typedef void(VKAPI_PTR* pfn_vk_cmd_insert_debug_utils_label_ext)(VkCommandBuffer             command_buffer,
                                                                 const VkDebugUtilsLabelEXT* p_label_info);
typedef VkResult(VKAPI_PTR* pfn_vk_create_debug_utils_messenger_ext)(
    VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* p_create_info,
    const VkAllocationCallbacks* p_allocator, VkDebugUtilsMessengerEXT* p_messenger);
typedef void(VKAPI_PTR* pfn_vk_destroy_debug_utils_messenger_ext)(VkInstance                   instance,
                                                                  VkDebugUtilsMessengerEXT     messenger,
                                                                  const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_submit_debug_utils_message_ext)(
    VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT message_severity,
    VkDebugUtilsMessageTypeFlagsEXT message_types, const VkDebugUtilsMessengerCallbackDataEXT* p_callback_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_set_debug_utils_object_name_ext(
    VkDevice device, const VkDebugUtilsObjectNameInfoEXT* p_name_info) __asm("vkSetDebugUtilsObjectNameEXT");

VKAPI_ATTR VkResult VKAPI_CALL vk_set_debug_utils_object_tag_ext(
    VkDevice device, const VkDebugUtilsObjectTagInfoEXT* p_tag_info) __asm("vkSetDebugUtilsObjectTagEXT");

VKAPI_ATTR void VKAPI_CALL vk_queue_begin_debug_utils_label_ext(
    VkQueue queue, const VkDebugUtilsLabelEXT* p_label_info) __asm("vkQueueBeginDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL vk_queue_end_debug_utils_label_ext(VkQueue queue) __asm("vkQueueEndDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL vk_queue_insert_debug_utils_label_ext(
    VkQueue queue, const VkDebugUtilsLabelEXT* p_label_info) __asm("vkQueueInsertDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_debug_utils_label_ext(
    VkCommandBuffer command_buffer, const VkDebugUtilsLabelEXT* p_label_info) __asm("vkCmdBeginDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_end_debug_utils_label_ext(VkCommandBuffer command_buffer) __asm("vkCmdEndDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_insert_debug_utils_label_ext(
    VkCommandBuffer command_buffer, const VkDebugUtilsLabelEXT* p_label_info) __asm("vkCmdInsertDebugUtilsLabelEXT");

VKAPI_ATTR VkResult VKAPI_CALL
vk_create_debug_utils_messenger_ext(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* p_create_info,
                                    const VkAllocationCallbacks* p_allocator,
                                    VkDebugUtilsMessengerEXT*    p_messenger) __asm("vkCreateDebugUtilsMessengerEXT");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_debug_utils_messenger_ext(VkInstance instance, VkDebugUtilsMessengerEXT messenger,
                                     const VkAllocationCallbacks* p_allocator) __asm("vkDestroyDebugUtilsMessengerEXT");

VKAPI_ATTR void VKAPI_CALL vk_submit_debug_utils_message_ext(
    VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT message_severity,
    VkDebugUtilsMessageTypeFlagsEXT             message_types,
    const VkDebugUtilsMessengerCallbackDataEXT* p_callback_data) __asm("vkSubmitDebugUtilsMessageEXT");
#endif

#define vk_ext_sampler_filter_minmax 1
#define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION 2
#define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME "VK_EXT_sampler_filter_minmax"
typedef VkSamplerReductionMode VkSamplerReductionModeEXT;

typedef VkSamplerReductionModeCreateInfo VkSamplerReductionModeCreateInfoEXT;

typedef VkPhysicalDeviceSamplerFilterMinmaxProperties VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;

#define vk_amd_gpu_shader_int16 1
#define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION 2
#define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME "VK_AMD_gpu_shader_int16"

#define vk_amd_mixed_attachment_samples 1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION 1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME "VK_AMD_mixed_attachment_samples"

#define vk_amd_shader_fragment_mask 1
#define VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION 1
#define VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME "VK_AMD_shader_fragment_mask"

#define vk_ext_inline_uniform_block 1
#define VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION 1
#define VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME "VK_EXT_inline_uniform_block"
typedef struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        inline_uniform_block;
    VkBool32        descriptor_binding_inline_uniform_block_update_after_bind;
} VkPhysicalDeviceInlineUniformBlockFeaturesEXT;

typedef struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_inline_uniform_block_size;
    uint32_t        max_per_stage_descriptor_inline_uniform_blocks;
    uint32_t        max_per_stage_descriptor_update_after_bind_inline_uniform_blocks;
    uint32_t        max_descriptor_set_inline_uniform_blocks;
    uint32_t        max_descriptor_set_update_after_bind_inline_uniform_blocks;
} VkPhysicalDeviceInlineUniformBlockPropertiesEXT;

typedef struct VkWriteDescriptorSetInlineUniformBlockEXT {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        data_size;
    const void*     p_data;
} VkWriteDescriptorSetInlineUniformBlockEXT;

typedef struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        max_inline_uniform_block_bindings;
} VkDescriptorPoolInlineUniformBlockCreateInfoEXT;

#define vk_ext_shader_stencil_export 1
#define VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION 1
#define VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME "VK_EXT_shader_stencil_export"

#define vk_ext_sample_locations 1
#define VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION 1
#define VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME "VK_EXT_sample_locations"
typedef struct VkSampleLocationEXT {
    float x;
    float y;
} VkSampleLocationEXT;

typedef struct VkSampleLocationsInfoEXT {
    VkStructureType            s_type;
    const void*                p_next;
    VkSampleCountFlagBits      sample_locations_per_pixel;
    VkExtent2D                 sample_location_grid_size;
    uint32_t                   sample_locations_count;
    const VkSampleLocationEXT* p_sample_locations;
} VkSampleLocationsInfoEXT;

typedef struct VkAttachmentSampleLocationsEXT {
    uint32_t                 attachment_index;
    VkSampleLocationsInfoEXT sample_locations_info;
} VkAttachmentSampleLocationsEXT;

typedef struct VkSubpassSampleLocationsEXT {
    uint32_t                 subpass_index;
    VkSampleLocationsInfoEXT sample_locations_info;
} VkSubpassSampleLocationsEXT;

typedef struct VkRenderPassSampleLocationsBeginInfoEXT {
    VkStructureType                       s_type;
    const void*                           p_next;
    uint32_t                              attachment_initial_sample_locations_count;
    const VkAttachmentSampleLocationsEXT* p_attachment_initial_sample_locations;
    uint32_t                              post_subpass_sample_locations_count;
    const VkSubpassSampleLocationsEXT*    p_post_subpass_sample_locations;
} VkRenderPassSampleLocationsBeginInfoEXT;

typedef struct VkPipelineSampleLocationsStateCreateInfoEXT {
    VkStructureType          s_type;
    const void*              p_next;
    VkBool32                 sample_locations_enable;
    VkSampleLocationsInfoEXT sample_locations_info;
} VkPipelineSampleLocationsStateCreateInfoEXT;

typedef struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    VkStructureType    s_type;
    void*              p_next;
    VkSampleCountFlags sample_location_sample_counts;
    VkExtent2D         max_sample_location_grid_size;
    float              sample_location_coordinate_range[2];
    uint32_t           sample_location_sub_pixel_bits;
    VkBool32           variable_sample_locations;
} VkPhysicalDeviceSampleLocationsPropertiesEXT;

typedef struct VkMultisamplePropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkExtent2D      max_sample_location_grid_size;
} VkMultisamplePropertiesEXT;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_sample_locations_ext)(VkCommandBuffer                 command_buffer,
                                                             const VkSampleLocationsInfoEXT* p_sample_locations_info);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_multisample_properties_ext)(
    VkPhysicalDevice physical_device, VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* p_multisample_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_sample_locations_ext(
    VkCommandBuffer                 command_buffer,
    const VkSampleLocationsInfoEXT* p_sample_locations_info) __asm("vkCmdSetSampleLocationsEXT");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_multisample_properties_ext(
    VkPhysicalDevice physical_device, VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* p_multisample_properties) __asm("vkGetPhysicalDeviceMultisamplePropertiesEXT");
#endif

#define vk_ext_blend_operation_advanced 1
#define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION 2
#define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME "VK_EXT_blend_operation_advanced"

typedef enum VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT     = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT     = 2,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT     = 0x7fffffff
} VkBlendOverlapEXT;
typedef struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        advanced_blend_coherent_operations;
} VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;

typedef struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        advanced_blend_max_color_attachments;
    VkBool32        advanced_blend_independent_blend;
    VkBool32        advanced_blend_non_premultiplied_src_color;
    VkBool32        advanced_blend_non_premultiplied_dst_color;
    VkBool32        advanced_blend_correlated_overlap;
    VkBool32        advanced_blend_all_operations;
} VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;

typedef struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    VkStructureType   s_type;
    const void*       p_next;
    VkBool32          src_premultiplied;
    VkBool32          dst_premultiplied;
    VkBlendOverlapEXT blend_overlap;
} VkPipelineColorBlendAdvancedStateCreateInfoEXT;

#define vk_nv_fragment_coverage_to_color 1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION 1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME "VK_NV_fragment_coverage_to_color"
typedef VkFlags VkPipelineCoverageToColorStateCreateFlagsNV;
typedef struct VkPipelineCoverageToColorStateCreateInfoNV {
    VkStructureType                             s_type;
    const void*                                 p_next;
    VkPipelineCoverageToColorStateCreateFlagsNV flags;
    VkBool32                                    coverage_to_color_enable;
    uint32_t                                    coverage_to_color_location;
} VkPipelineCoverageToColorStateCreateInfoNV;

#define vk_nv_framebuffer_mixed_samples 1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION 1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME "VK_NV_framebuffer_mixed_samples"

typedef enum VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV     = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV      = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV    = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV     = 3,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7fffffff
} VkCoverageModulationModeNV;
typedef VkFlags VkPipelineCoverageModulationStateCreateFlagsNV;
typedef struct VkPipelineCoverageModulationStateCreateInfoNV {
    VkStructureType                                s_type;
    const void*                                    p_next;
    VkPipelineCoverageModulationStateCreateFlagsNV flags;
    VkCoverageModulationModeNV                     coverage_modulation_mode;
    VkBool32                                       coverage_modulation_table_enable;
    uint32_t                                       coverage_modulation_table_count;
    const float*                                   p_coverage_modulation_table;
} VkPipelineCoverageModulationStateCreateInfoNV;

#define vk_nv_fill_rectangle 1
#define VK_NV_FILL_RECTANGLE_SPEC_VERSION 1
#define VK_NV_FILL_RECTANGLE_EXTENSION_NAME "VK_NV_fill_rectangle"

#define vk_nv_shader_sm_builtins 1
#define VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION 1
#define VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME "VK_NV_shader_sm_builtins"
typedef struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        shader_smcount;
    uint32_t        shader_warps_per_sm;
} VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;

typedef struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_smbuiltins;
} VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;

#define vk_ext_post_depth_coverage 1
#define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION 1
#define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME "VK_EXT_post_depth_coverage"

#define vk_ext_image_drm_format_modifier 1
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION 1
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME "VK_EXT_image_drm_format_modifier"
typedef struct VkDrmFormatModifierPropertiesEXT {
    uint64_t             drm_format_modifier;
    uint32_t             drm_format_modifier_plane_count;
    VkFormatFeatureFlags drm_format_modifier_tiling_features;
} VkDrmFormatModifierPropertiesEXT;

typedef struct VkDrmFormatModifierPropertiesListEXT {
    VkStructureType                   s_type;
    void*                             p_next;
    uint32_t                          drm_format_modifier_count;
    VkDrmFormatModifierPropertiesEXT* p_drm_format_modifier_properties;
} VkDrmFormatModifierPropertiesListEXT;

typedef struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    uint64_t        drm_format_modifier;
    VkSharingMode   sharing_mode;
    uint32_t        queue_family_index_count;
    const uint32_t* p_queue_family_indices;
} VkPhysicalDeviceImageDrmFormatModifierInfoEXT;

typedef struct VkImageDrmFormatModifierListCreateInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        drm_format_modifier_count;
    const uint64_t* p_drm_format_modifiers;
} VkImageDrmFormatModifierListCreateInfoEXT;

typedef struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    VkStructureType            s_type;
    const void*                p_next;
    uint64_t                   drm_format_modifier;
    uint32_t                   drm_format_modifier_plane_count;
    const VkSubresourceLayout* p_plane_layouts;
} VkImageDrmFormatModifierExplicitCreateInfoEXT;

typedef struct VkImageDrmFormatModifierPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint64_t        drm_format_modifier;
} VkImageDrmFormatModifierPropertiesEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_get_image_drm_format_modifier_properties_ext)(
    VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_image_drm_format_modifier_properties_ext(
    VkDevice device, VkImage image,
    VkImageDrmFormatModifierPropertiesEXT* p_properties) __asm("vkGetImageDrmFormatModifierPropertiesEXT");
#endif

#define vk_ext_validation_cache 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkValidationCacheEXT)
#define VK_EXT_VALIDATION_CACHE_SPEC_VERSION 1
#define VK_EXT_VALIDATION_CACHE_EXTENSION_NAME "VK_EXT_validation_cache"

typedef enum VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT      = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7fffffff
} VkValidationCacheHeaderVersionEXT;
typedef VkFlags VkValidationCacheCreateFlagsEXT;
typedef struct VkValidationCacheCreateInfoEXT {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkValidationCacheCreateFlagsEXT flags;
    size_t                          initial_data_size;
    const void*                     p_initial_data;
} VkValidationCacheCreateInfoEXT;

typedef struct VkShaderModuleValidationCacheCreateInfoEXT {
    VkStructureType      s_type;
    const void*          p_next;
    VkValidationCacheEXT validation_cache;
} VkShaderModuleValidationCacheCreateInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_create_validation_cache_ext)(VkDevice                              device,
                                                                const VkValidationCacheCreateInfoEXT* p_create_info,
                                                                const VkAllocationCallbacks*          p_allocator,
                                                                VkValidationCacheEXT* p_validation_cache);
typedef void(VKAPI_PTR* pfn_vk_destroy_validation_cache_ext)(VkDevice device, VkValidationCacheEXT validation_cache,
                                                             const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_merge_validation_caches_ext)(VkDevice device, VkValidationCacheEXT dst_cache,
                                                                uint32_t                    src_cache_count,
                                                                const VkValidationCacheEXT* p_src_caches);
typedef VkResult(VKAPI_PTR* pfn_vk_get_validation_cache_data_ext)(VkDevice             device,
                                                                  VkValidationCacheEXT validation_cache,
                                                                  size_t* p_data_size, void* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_validation_cache_ext(
    VkDevice device, const VkValidationCacheCreateInfoEXT* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkValidationCacheEXT* p_validation_cache) __asm("vkCreateValidationCacheEXT");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_validation_cache_ext(VkDevice device, VkValidationCacheEXT validation_cache,
                                const VkAllocationCallbacks* p_allocator) __asm("vkDestroyValidationCacheEXT");

VKAPI_ATTR VkResult VKAPI_CALL
vk_merge_validation_caches_ext(VkDevice device, VkValidationCacheEXT dst_cache, uint32_t src_cache_count,
                               const VkValidationCacheEXT* p_src_caches) __asm("vkMergeValidationCachesEXT");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_validation_cache_data_ext(VkDevice device, VkValidationCacheEXT validation_cache,
                                                                size_t* p_data_size,
                                                                void*   p_data) __asm("vkGetValidationCacheDataEXT");
#endif

#define vk_ext_descriptor_indexing 1
#define VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION 2
#define VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME "VK_EXT_descriptor_indexing"
typedef VkDescriptorBindingFlagBits VkDescriptorBindingFlagBitsEXT;

typedef VkDescriptorBindingFlags VkDescriptorBindingFlagsEXT;

typedef VkDescriptorSetLayoutBindingFlagsCreateInfo VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;

typedef VkPhysicalDeviceDescriptorIndexingFeatures VkPhysicalDeviceDescriptorIndexingFeaturesEXT;

typedef VkPhysicalDeviceDescriptorIndexingProperties VkPhysicalDeviceDescriptorIndexingPropertiesEXT;

typedef VkDescriptorSetVariableDescriptorCountAllocateInfo VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;

typedef VkDescriptorSetVariableDescriptorCountLayoutSupport VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;

#define vk_ext_shader_viewport_index_layer 1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION 1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME "VK_EXT_shader_viewport_index_layer"

#define vk_nv_shading_rate_image 1
#define VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION 3
#define VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME "VK_NV_shading_rate_image"

typedef enum VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV              = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV    = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV     = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV     = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV     = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV      = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV                    = 0x7fffffff
} VkShadingRatePaletteEntryNV;

typedef enum VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV      = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV       = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV  = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV     = 0x7fffffff
} VkCoarseSampleOrderTypeNV;
typedef struct VkShadingRatePaletteNV {
    uint32_t                           shading_rate_palette_entry_count;
    const VkShadingRatePaletteEntryNV* p_shading_rate_palette_entries;
} VkShadingRatePaletteNV;

typedef struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    VkStructureType               s_type;
    const void*                   p_next;
    VkBool32                      shading_rate_image_enable;
    uint32_t                      viewport_count;
    const VkShadingRatePaletteNV* p_shading_rate_palettes;
} VkPipelineViewportShadingRateImageStateCreateInfoNV;

typedef struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shading_rate_image;
    VkBool32        shading_rate_coarse_sample_order;
} VkPhysicalDeviceShadingRateImageFeaturesNV;

typedef struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    VkStructureType s_type;
    void*           p_next;
    VkExtent2D      shading_rate_texel_size;
    uint32_t        shading_rate_palette_size;
    uint32_t        shading_rate_max_coarse_samples;
} VkPhysicalDeviceShadingRateImagePropertiesNV;

typedef struct VkCoarseSampleLocationNV {
    uint32_t pixel_x;
    uint32_t pixel_y;
    uint32_t sample;
} VkCoarseSampleLocationNV;

typedef struct VkCoarseSampleOrderCustomNV {
    VkShadingRatePaletteEntryNV     shading_rate;
    uint32_t                        sample_count;
    uint32_t                        sample_location_count;
    const VkCoarseSampleLocationNV* p_sample_locations;
} VkCoarseSampleOrderCustomNV;

typedef struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkCoarseSampleOrderTypeNV          sample_order_type;
    uint32_t                           custom_sample_order_count;
    const VkCoarseSampleOrderCustomNV* p_custom_sample_orders;
} VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;

typedef void(VKAPI_PTR* pfn_vk_cmd_bind_shading_rate_image_nv)(VkCommandBuffer command_buffer, VkImageView image_view,
                                                               VkImageLayout image_layout);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport_shading_rate_palette_nv)(
    VkCommandBuffer command_buffer, uint32_t first_viewport, uint32_t viewport_count,
    const VkShadingRatePaletteNV* p_shading_rate_palettes);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_coarse_sample_order_nv)(
    VkCommandBuffer command_buffer, VkCoarseSampleOrderTypeNV sample_order_type, uint32_t custom_sample_order_count,
    const VkCoarseSampleOrderCustomNV* p_custom_sample_orders);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL
vk_cmd_bind_shading_rate_image_nv(VkCommandBuffer command_buffer, VkImageView image_view,
                                  VkImageLayout image_layout) __asm("vkCmdBindShadingRateImageNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_viewport_shading_rate_palette_nv(
    VkCommandBuffer command_buffer, uint32_t first_viewport, uint32_t viewport_count,
    const VkShadingRatePaletteNV* p_shading_rate_palettes) __asm("vkCmdSetViewportShadingRatePaletteNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_coarse_sample_order_nv(
    VkCommandBuffer command_buffer, VkCoarseSampleOrderTypeNV sample_order_type, uint32_t custom_sample_order_count,
    const VkCoarseSampleOrderCustomNV* p_custom_sample_orders) __asm("vkCmdSetCoarseSampleOrderNV");
#endif

#define vk_nv_ray_tracing 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureKHR)
typedef VkAccelerationStructureKHR VkAccelerationStructureNV;

#define VK_NV_RAY_TRACING_SPEC_VERSION 3
#define VK_NV_RAY_TRACING_EXTENSION_NAME "VK_NV_ray_tracing"
#define VK_SHADER_UNUSED_KHR (~0U)
#define VK_SHADER_UNUSED_NV VK_SHADER_UNUSED_KHR

typedef enum VkRayTracingShaderGroupTypeKHR {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR              = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR  = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV               = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV =
        VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7fffffff
} VkRayTracingShaderGroupTypeKHR;
typedef VkRayTracingShaderGroupTypeKHR VkRayTracingShaderGroupTypeNV;

typedef enum VkGeometryTypeKHR {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    VK_GEOMETRY_TYPE_AABBS_KHR     = 1,
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 1000150000,
    VK_GEOMETRY_TYPE_TRIANGLES_NV  = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
    VK_GEOMETRY_TYPE_AABBS_NV      = VK_GEOMETRY_TYPE_AABBS_KHR,
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR  = 0x7fffffff
} VkGeometryTypeKHR;
typedef VkGeometryTypeKHR VkGeometryTypeNV;

typedef enum VkAccelerationStructureTypeKHR {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR    = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV     = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV  = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR     = 0x7fffffff
} VkAccelerationStructureTypeKHR;
typedef VkAccelerationStructureTypeKHR VkAccelerationStructureTypeNV;

typedef enum VkCopyAccelerationStructureModeKHR {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR       = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR     = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR   = 2,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV        = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV      = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR    = 0x7fffffff
} VkCopyAccelerationStructureModeKHR;
typedef VkCopyAccelerationStructureModeKHR VkCopyAccelerationStructureModeNV;

typedef enum VkAccelerationStructureMemoryRequirementsTypeKHR {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR         = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR  = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV =
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV =
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV =
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR = 0x7fffffff
} VkAccelerationStructureMemoryRequirementsTypeKHR;
typedef VkAccelerationStructureMemoryRequirementsTypeKHR VkAccelerationStructureMemoryRequirementsTypeNV;

typedef enum VkGeometryFlagBitsKHR {
    VK_GEOMETRY_OPAQUE_BIT_KHR                          = 0x00000001,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002,
    VK_GEOMETRY_OPAQUE_BIT_NV                           = VK_GEOMETRY_OPAQUE_BIT_KHR,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV  = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR                  = 0x7fffffff
} VkGeometryFlagBitsKHR;
typedef VkFlags            VkGeometryFlagsKHR;
typedef VkGeometryFlagsKHR VkGeometryFlagsNV;

typedef VkGeometryFlagBitsKHR VkGeometryFlagBitsNV;

typedef enum VkGeometryInstanceFlagBitsKHR {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR    = 0x00000001,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 0x00000002,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR                    = 0x00000004,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR                 = 0x00000008,
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV =
        VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV    = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7fffffff
} VkGeometryInstanceFlagBitsKHR;
typedef VkFlags                    VkGeometryInstanceFlagsKHR;
typedef VkGeometryInstanceFlagsKHR VkGeometryInstanceFlagsNV;

typedef VkGeometryInstanceFlagBitsKHR VkGeometryInstanceFlagBitsNV;

typedef enum VkBuildAccelerationStructureFlagBitsKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR      = 0x00000001,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR  = 0x00000002,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR        = 0x00000010,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV       = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV =
        VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV =
        VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV      = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7fffffff
} VkBuildAccelerationStructureFlagBitsKHR;
typedef VkFlags                              VkBuildAccelerationStructureFlagsKHR;
typedef VkBuildAccelerationStructureFlagsKHR VkBuildAccelerationStructureFlagsNV;

typedef VkBuildAccelerationStructureFlagBitsKHR VkBuildAccelerationStructureFlagBitsNV;

typedef struct VkRayTracingShaderGroupCreateInfoNV {
    VkStructureType                s_type;
    const void*                    p_next;
    VkRayTracingShaderGroupTypeKHR type;
    uint32_t                       general_shader;
    uint32_t                       closest_hit_shader;
    uint32_t                       any_hit_shader;
    uint32_t                       intersection_shader;
} VkRayTracingShaderGroupCreateInfoNV;

typedef struct VkRayTracingPipelineCreateInfoNV {
    VkStructureType                            s_type;
    const void*                                p_next;
    VkPipelineCreateFlags                      flags;
    uint32_t                                   stage_count;
    const VkPipelineShaderStageCreateInfo*     p_stages;
    uint32_t                                   group_count;
    const VkRayTracingShaderGroupCreateInfoNV* p_groups;
    uint32_t                                   max_recursion_depth;
    VkPipelineLayout                           layout;
    VkPipeline                                 base_pipeline_handle;
    int32_t                                    base_pipeline_index;
} VkRayTracingPipelineCreateInfoNV;

typedef struct VkGeometryTrianglesNV {
    VkStructureType s_type;
    const void*     p_next;
    VkBuffer        vertex_data;
    VkDeviceSize    vertex_offset;
    uint32_t        vertex_count;
    VkDeviceSize    vertex_stride;
    VkFormat        vertex_format;
    VkBuffer        index_data;
    VkDeviceSize    index_offset;
    uint32_t        index_count;
    VkIndexType     index_type;
    VkBuffer        transform_data;
    VkDeviceSize    transform_offset;
} VkGeometryTrianglesNV;

typedef struct VkGeometryAABBNV {
    VkStructureType s_type;
    const void*     p_next;
    VkBuffer        aabb_data;
    uint32_t        num_aabbs;
    uint32_t        stride;
    VkDeviceSize    offset;
} VkGeometryAABBNV;

typedef struct VkGeometryDataNV {
    VkGeometryTrianglesNV triangles;
    VkGeometryAABBNV      aabbs;
} VkGeometryDataNV;

typedef struct VkGeometryNV {
    VkStructureType    s_type;
    const void*        p_next;
    VkGeometryTypeKHR  geometry_type;
    VkGeometryDataNV   geometry;
    VkGeometryFlagsKHR flags;
} VkGeometryNV;

typedef struct VkAccelerationStructureInfoNV {
    VkStructureType                     s_type;
    const void*                         p_next;
    VkAccelerationStructureTypeNV       type;
    VkBuildAccelerationStructureFlagsNV flags;
    uint32_t                            instance_count;
    uint32_t                            geometry_count;
    const VkGeometryNV*                 p_geometries;
} VkAccelerationStructureInfoNV;

typedef struct VkAccelerationStructureCreateInfoNV {
    VkStructureType               s_type;
    const void*                   p_next;
    VkDeviceSize                  compacted_size;
    VkAccelerationStructureInfoNV info;
} VkAccelerationStructureCreateInfoNV;

typedef struct VkBindAccelerationStructureMemoryInfoKHR {
    VkStructureType            s_type;
    const void*                p_next;
    VkAccelerationStructureKHR acceleration_structure;
    VkDeviceMemory             memory;
    VkDeviceSize               memory_offset;
    uint32_t                   device_index_count;
    const uint32_t*            p_device_indices;
} VkBindAccelerationStructureMemoryInfoKHR;

typedef VkBindAccelerationStructureMemoryInfoKHR VkBindAccelerationStructureMemoryInfoNV;

typedef struct VkWriteDescriptorSetAccelerationStructureKHR {
    VkStructureType                   s_type;
    const void*                       p_next;
    uint32_t                          acceleration_structure_count;
    const VkAccelerationStructureKHR* p_acceleration_structures;
} VkWriteDescriptorSetAccelerationStructureKHR;

typedef VkWriteDescriptorSetAccelerationStructureKHR VkWriteDescriptorSetAccelerationStructureNV;

typedef struct VkAccelerationStructureMemoryRequirementsInfoNV {
    VkStructureType                                 s_type;
    const void*                                     p_next;
    VkAccelerationStructureMemoryRequirementsTypeNV type;
    VkAccelerationStructureNV                       acceleration_structure;
} VkAccelerationStructureMemoryRequirementsInfoNV;

typedef struct VkPhysicalDeviceRayTracingPropertiesNV {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        shader_group_handle_size;
    uint32_t        max_recursion_depth;
    uint32_t        max_shader_group_stride;
    uint32_t        shader_group_base_alignment;
    uint64_t        max_geometry_count;
    uint64_t        max_instance_count;
    uint64_t        max_triangle_count;
    uint32_t        max_descriptor_set_acceleration_structures;
} VkPhysicalDeviceRayTracingPropertiesNV;

typedef struct VkTransformMatrixKHR {
    float matrix[3][4];
} VkTransformMatrixKHR;

typedef VkTransformMatrixKHR VkTransformMatrixNV;

typedef struct VkAabbPositionsKHR {
    float min_x;
    float min_y;
    float min_z;
    float max_x;
    float max_y;
    float max_z;
} VkAabbPositionsKHR;

typedef VkAabbPositionsKHR VkAabbPositionsNV;

typedef struct VkAccelerationStructureInstanceKHR {
    VkTransformMatrixKHR       transform;
    uint32_t                   instance_custom_index : 24;
    uint32_t                   mask : 8;
    uint32_t                   instance_shader_binding_table_record_offset : 24;
    VkGeometryInstanceFlagsKHR flags : 8;
    uint64_t                   acceleration_structure_reference;
} VkAccelerationStructureInstanceKHR;

typedef VkAccelerationStructureInstanceKHR VkAccelerationStructureInstanceNV;

typedef VkResult(VKAPI_PTR* pfn_vk_create_acceleration_structure_nv)(
    VkDevice device, const VkAccelerationStructureCreateInfoNV* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkAccelerationStructureNV* p_acceleration_structure);
typedef void(VKAPI_PTR* pfn_vk_destroy_acceleration_structure_khr)(VkDevice                     device,
                                                                   VkAccelerationStructureKHR   acceleration_structure,
                                                                   const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_destroy_acceleration_structure_nv)(VkDevice                     device,
                                                                  VkAccelerationStructureKHR   acceleration_structure,
                                                                  const VkAllocationCallbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_get_acceleration_structure_memory_requirements_nv)(
    VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* p_info,
    VkMemoryRequirements2KHR* p_memory_requirements);
typedef VkResult(VKAPI_PTR* pfn_vk_bind_acceleration_structure_memory_khr)(
    VkDevice device, uint32_t bind_info_count, const VkBindAccelerationStructureMemoryInfoKHR* p_bind_infos);
typedef VkResult(VKAPI_PTR* pfn_vk_bind_acceleration_structure_memory_nv)(
    VkDevice device, uint32_t bind_info_count, const VkBindAccelerationStructureMemoryInfoKHR* p_bind_infos);
typedef void(VKAPI_PTR* pfn_vk_cmd_build_acceleration_structure_nv)(
    VkCommandBuffer command_buffer, const VkAccelerationStructureInfoNV* p_info, VkBuffer instance_data,
    VkDeviceSize instance_offset, VkBool32 update, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src,
    VkBuffer scratch, VkDeviceSize scratch_offset);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_acceleration_structure_nv)(VkCommandBuffer                    command_buffer,
                                                                   VkAccelerationStructureKHR         dst,
                                                                   VkAccelerationStructureKHR         src,
                                                                   VkCopyAccelerationStructureModeKHR mode);
typedef void(VKAPI_PTR* pfn_vk_cmd_trace_rays_nv)(
    VkCommandBuffer command_buffer, VkBuffer raygen_shader_binding_table_buffer,
    VkDeviceSize raygen_shader_binding_offset, VkBuffer miss_shader_binding_table_buffer,
    VkDeviceSize miss_shader_binding_offset, VkDeviceSize miss_shader_binding_stride,
    VkBuffer hit_shader_binding_table_buffer, VkDeviceSize hit_shader_binding_offset,
    VkDeviceSize hit_shader_binding_stride, VkBuffer callable_shader_binding_table_buffer,
    VkDeviceSize callable_shader_binding_offset, VkDeviceSize callable_shader_binding_stride, uint32_t width,
    uint32_t height, uint32_t depth);
typedef VkResult(VKAPI_PTR* pfn_vk_create_ray_tracing_pipelines_nv)(
    VkDevice device, VkPipelineCache pipeline_cache, uint32_t create_info_count,
    const VkRayTracingPipelineCreateInfoNV* p_create_infos, const VkAllocationCallbacks* p_allocator,
    VkPipeline* p_pipelines);
typedef VkResult(VKAPI_PTR* pfn_vk_get_ray_tracing_shader_group_handles_khr)(VkDevice device, VkPipeline pipeline,
                                                                             uint32_t first_group, uint32_t group_count,
                                                                             size_t data_size, void* p_data);
typedef VkResult(VKAPI_PTR* pfn_vk_get_ray_tracing_shader_group_handles_nv)(VkDevice device, VkPipeline pipeline,
                                                                            uint32_t first_group, uint32_t group_count,
                                                                            size_t data_size, void* p_data);
typedef VkResult(VKAPI_PTR* pfn_vk_get_acceleration_structure_handle_nv)(
    VkDevice device, VkAccelerationStructureKHR acceleration_structure, size_t data_size, void* p_data);
typedef void(VKAPI_PTR* pfn_vk_cmd_write_acceleration_structures_properties_khr)(
    VkCommandBuffer command_buffer, uint32_t acceleration_structure_count,
    const VkAccelerationStructureKHR* p_acceleration_structures, VkQueryType query_type, VkQueryPool query_pool,
    uint32_t first_query);
typedef void(VKAPI_PTR* pfn_vk_cmd_write_acceleration_structures_properties_nv)(
    VkCommandBuffer command_buffer, uint32_t acceleration_structure_count,
    const VkAccelerationStructureKHR* p_acceleration_structures, VkQueryType query_type, VkQueryPool query_pool,
    uint32_t first_query);
typedef VkResult(VKAPI_PTR* pfn_vk_compile_deferred_nv)(VkDevice device, VkPipeline pipeline, uint32_t shader);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_acceleration_structure_nv(
    VkDevice device, const VkAccelerationStructureCreateInfoNV* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkAccelerationStructureNV* p_acceleration_structure) __asm("vkCreateAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL vk_destroy_acceleration_structure_khr(
    VkDevice device, VkAccelerationStructureKHR acceleration_structure,
    const VkAllocationCallbacks* p_allocator) __asm("vkDestroyAccelerationStructureKHR");

VKAPI_ATTR void VKAPI_CALL vk_destroy_acceleration_structure_nv(
    VkDevice device, VkAccelerationStructureKHR acceleration_structure,
    const VkAllocationCallbacks* p_allocator) __asm("vkDestroyAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL vk_get_acceleration_structure_memory_requirements_nv(
    VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* p_info,
    VkMemoryRequirements2KHR* p_memory_requirements) __asm("vkGetAccelerationStructureMemoryRequirementsNV");

VKAPI_ATTR VkResult VKAPI_CALL vk_bind_acceleration_structure_memory_khr(
    VkDevice device, uint32_t bind_info_count,
    const VkBindAccelerationStructureMemoryInfoKHR* p_bind_infos) __asm("vkBindAccelerationStructureMemoryKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_bind_acceleration_structure_memory_nv(
    VkDevice device, uint32_t bind_info_count,
    const VkBindAccelerationStructureMemoryInfoKHR* p_bind_infos) __asm("vkBindAccelerationStructureMemoryNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_build_acceleration_structure_nv(
    VkCommandBuffer command_buffer, const VkAccelerationStructureInfoNV* p_info, VkBuffer instance_data,
    VkDeviceSize instance_offset, VkBool32 update, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src,
    VkBuffer scratch, VkDeviceSize scratch_offset) __asm("vkCmdBuildAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_acceleration_structure_nv(
    VkCommandBuffer command_buffer, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src,
    VkCopyAccelerationStructureModeKHR mode) __asm("vkCmdCopyAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_trace_rays_nv(VkCommandBuffer command_buffer, VkBuffer raygen_shader_binding_table_buffer,
                     VkDeviceSize raygen_shader_binding_offset, VkBuffer miss_shader_binding_table_buffer,
                     VkDeviceSize miss_shader_binding_offset, VkDeviceSize miss_shader_binding_stride,
                     VkBuffer hit_shader_binding_table_buffer, VkDeviceSize hit_shader_binding_offset,
                     VkDeviceSize hit_shader_binding_stride, VkBuffer callable_shader_binding_table_buffer,
                     VkDeviceSize callable_shader_binding_offset, VkDeviceSize callable_shader_binding_stride,
                     uint32_t width, uint32_t height, uint32_t depth) __asm("vkCmdTraceRaysNV");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_ray_tracing_pipelines_nv(
    VkDevice device, VkPipelineCache pipeline_cache, uint32_t create_info_count,
    const VkRayTracingPipelineCreateInfoNV* p_create_infos, const VkAllocationCallbacks* p_allocator,
    VkPipeline* p_pipelines) __asm("vkCreateRayTracingPipelinesNV");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_ray_tracing_shader_group_handles_khr(
    VkDevice device, VkPipeline pipeline, uint32_t first_group, uint32_t group_count, size_t data_size,
    void* p_data) __asm("vkGetRayTracingShaderGroupHandlesKHR");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_ray_tracing_shader_group_handles_nv(
    VkDevice device, VkPipeline pipeline, uint32_t first_group, uint32_t group_count, size_t data_size,
    void* p_data) __asm("vkGetRayTracingShaderGroupHandlesNV");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_acceleration_structure_handle_nv(VkDevice device, VkAccelerationStructureKHR acceleration_structure,
                                        size_t data_size, void* p_data) __asm("vkGetAccelerationStructureHandleNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_write_acceleration_structures_properties_khr(
    VkCommandBuffer command_buffer, uint32_t acceleration_structure_count,
    const VkAccelerationStructureKHR* p_acceleration_structures, VkQueryType query_type, VkQueryPool query_pool,
    uint32_t first_query) __asm("vkCmdWriteAccelerationStructuresPropertiesKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_write_acceleration_structures_properties_nv(
    VkCommandBuffer command_buffer, uint32_t acceleration_structure_count,
    const VkAccelerationStructureKHR* p_acceleration_structures, VkQueryType query_type, VkQueryPool query_pool,
    uint32_t first_query) __asm("vkCmdWriteAccelerationStructuresPropertiesNV");

VKAPI_ATTR VkResult VKAPI_CALL vk_compile_deferred_nv(VkDevice device, VkPipeline pipeline,
                                                      uint32_t shader) __asm("vkCompileDeferredNV");
#endif

#define vk_nv_representative_fragment_test 1
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION 2
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME "VK_NV_representative_fragment_test"
typedef struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        representative_fragment_test;
} VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;

typedef struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    VkStructureType s_type;
    const void*     p_next;
    VkBool32        representative_fragment_test_enable;
} VkPipelineRepresentativeFragmentTestStateCreateInfoNV;

#define vk_ext_filter_cubic 1
#define VK_EXT_FILTER_CUBIC_SPEC_VERSION 3
#define VK_EXT_FILTER_CUBIC_EXTENSION_NAME "VK_EXT_filter_cubic"
typedef struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    VkStructureType s_type;
    void*           p_next;
    VkImageViewType image_view_type;
} VkPhysicalDeviceImageViewImageFormatInfoEXT;

typedef struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        filter_cubic;
    VkBool32        filter_cubic_minmax;
} VkFilterCubicImageViewImageFormatPropertiesEXT;

#define vk_qcom_render_pass_shader_resolve 1
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION 4
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME "VK_QCOM_render_pass_shader_resolve"

#define vk_ext_global_priority 1
#define VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION 2
#define VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME "VK_EXT_global_priority"

typedef enum VkQueueGlobalPriorityEXT {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT      = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT   = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT     = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7fffffff
} VkQueueGlobalPriorityEXT;
typedef struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    VkStructureType          s_type;
    const void*              p_next;
    VkQueueGlobalPriorityEXT global_priority;
} VkDeviceQueueGlobalPriorityCreateInfoEXT;

#define vk_ext_external_memory_host 1
#define VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION 1
#define VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME "VK_EXT_external_memory_host"
typedef struct VkImportMemoryHostPointerInfoEXT {
    VkStructureType                    s_type;
    const void*                        p_next;
    VkExternalMemoryHandleTypeFlagBits handle_type;
    void*                              p_host_pointer;
} VkImportMemoryHostPointerInfoEXT;

typedef struct VkMemoryHostPointerPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        memory_type_bits;
} VkMemoryHostPointerPropertiesEXT;

typedef struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkDeviceSize    min_imported_host_pointer_alignment;
} VkPhysicalDeviceExternalMemoryHostPropertiesEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_get_memory_host_pointer_properties_ext)(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handle_type, const void* p_host_pointer,
    VkMemoryHostPointerPropertiesEXT* p_memory_host_pointer_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_memory_host_pointer_properties_ext(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handle_type, const void* p_host_pointer,
    VkMemoryHostPointerPropertiesEXT* p_memory_host_pointer_properties) __asm("vkGetMemoryHostPointerPropertiesEXT");
#endif

#define vk_amd_buffer_marker 1
#define VK_AMD_BUFFER_MARKER_SPEC_VERSION 1
#define VK_AMD_BUFFER_MARKER_EXTENSION_NAME "VK_AMD_buffer_marker"
typedef void(VKAPI_PTR* pfn_vk_cmd_write_buffer_marker_amd)(VkCommandBuffer         command_buffer,
                                                            VkPipelineStageFlagBits pipeline_stage, VkBuffer dst_buffer,
                                                            VkDeviceSize dst_offset, uint32_t marker);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_write_buffer_marker_amd(VkCommandBuffer         command_buffer,
                                                          VkPipelineStageFlagBits pipeline_stage, VkBuffer dst_buffer,
                                                          VkDeviceSize dst_offset,
                                                          uint32_t     marker) __asm("vkCmdWriteBufferMarkerAMD");
#endif

#define vk_amd_pipeline_compiler_control 1
#define VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION 1
#define VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME "VK_AMD_pipeline_compiler_control"

typedef enum VkPipelineCompilerControlFlagBitsAMD {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7fffffff
} VkPipelineCompilerControlFlagBitsAMD;
typedef VkFlags VkPipelineCompilerControlFlagsAMD;
typedef struct VkPipelineCompilerControlCreateInfoAMD {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkPipelineCompilerControlFlagsAMD compiler_control_flags;
} VkPipelineCompilerControlCreateInfoAMD;

#define vk_ext_calibrated_timestamps 1
#define VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION 1
#define VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME "VK_EXT_calibrated_timestamps"

typedef enum VkTimeDomainEXT {
    VK_TIME_DOMAIN_DEVICE_EXT                    = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT           = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT       = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    VK_TIME_DOMAIN_MAX_ENUM_EXT                  = 0x7fffffff
} VkTimeDomainEXT;
typedef struct VkCalibratedTimestampInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    VkTimeDomainEXT time_domain;
} VkCalibratedTimestampInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_calibrateable_time_domains_ext)(VkPhysicalDevice physical_device,
                                                                                       uint32_t* p_time_domain_count,
                                                                                       VkTimeDomainEXT* p_time_domains);
typedef VkResult(VKAPI_PTR* pfn_vk_get_calibrated_timestamps_ext)(VkDevice device, uint32_t timestamp_count,
                                                                  const VkCalibratedTimestampInfoEXT* p_timestamp_infos,
                                                                  uint64_t* p_timestamps, uint64_t* p_max_deviation);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_calibrateable_time_domains_ext(
    VkPhysicalDevice physical_device, uint32_t* p_time_domain_count,
    VkTimeDomainEXT* p_time_domains) __asm("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");

VKAPI_ATTR VkResult VKAPI_CALL vk_get_calibrated_timestamps_ext(
    VkDevice device, uint32_t timestamp_count, const VkCalibratedTimestampInfoEXT* p_timestamp_infos,
    uint64_t* p_timestamps, uint64_t* p_max_deviation) __asm("vkGetCalibratedTimestampsEXT");
#endif

#define vk_amd_shader_core_properties 1
#define VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION 2
#define VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME "VK_AMD_shader_core_properties"
typedef struct VkPhysicalDeviceShaderCorePropertiesAMD {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        shader_engine_count;
    uint32_t        shader_arrays_per_engine_count;
    uint32_t        compute_units_per_shader_array;
    uint32_t        simd_per_compute_unit;
    uint32_t        wavefronts_per_simd;
    uint32_t        wavefront_size;
    uint32_t        sgprs_per_simd;
    uint32_t        min_sgpr_allocation;
    uint32_t        max_sgpr_allocation;
    uint32_t        sgpr_allocation_granularity;
    uint32_t        vgprs_per_simd;
    uint32_t        min_vgpr_allocation;
    uint32_t        max_vgpr_allocation;
    uint32_t        vgpr_allocation_granularity;
} VkPhysicalDeviceShaderCorePropertiesAMD;

#define vk_amd_memory_overallocation_behavior 1
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION 1
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME "VK_AMD_memory_overallocation_behavior"

typedef enum VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD    = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD    = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD   = 0x7fffffff
} VkMemoryOverallocationBehaviorAMD;
typedef struct VkDeviceMemoryOverallocationCreateInfoAMD {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkMemoryOverallocationBehaviorAMD overallocation_behavior;
} VkDeviceMemoryOverallocationCreateInfoAMD;

#define vk_ext_vertex_attribute_divisor 1
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 3
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME "VK_EXT_vertex_attribute_divisor"
typedef struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_vertex_attrib_divisor;
} VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;

typedef struct VkVertexInputBindingDivisorDescriptionEXT {
    uint32_t binding;
    uint32_t divisor;
} VkVertexInputBindingDivisorDescriptionEXT;

typedef struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    VkStructureType                                  s_type;
    const void*                                      p_next;
    uint32_t                                         vertex_binding_divisor_count;
    const VkVertexInputBindingDivisorDescriptionEXT* p_vertex_binding_divisors;
} VkPipelineVertexInputDivisorStateCreateInfoEXT;

typedef struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        vertex_attribute_instance_rate_divisor;
    VkBool32        vertex_attribute_instance_rate_zero_divisor;
} VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;

#define vk_ext_pipeline_creation_feedback 1
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION 1
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME "VK_EXT_pipeline_creation_feedback"

typedef enum VkPipelineCreationFeedbackFlagBitsEXT {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT                          = 0x00000001,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 0x00000002,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT     = 0x00000004,
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT                 = 0x7fffffff
} VkPipelineCreationFeedbackFlagBitsEXT;
typedef VkFlags VkPipelineCreationFeedbackFlagsEXT;
typedef struct VkPipelineCreationFeedbackEXT {
    VkPipelineCreationFeedbackFlagsEXT flags;
    uint64_t                           duration;
} VkPipelineCreationFeedbackEXT;

typedef struct VkPipelineCreationFeedbackCreateInfoEXT {
    VkStructureType                s_type;
    const void*                    p_next;
    VkPipelineCreationFeedbackEXT* p_pipeline_creation_feedback;
    uint32_t                       pipeline_stage_creation_feedback_count;
    VkPipelineCreationFeedbackEXT* p_pipeline_stage_creation_feedbacks;
} VkPipelineCreationFeedbackCreateInfoEXT;

#define vk_nv_shader_subgroup_partitioned 1
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION 1
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME "VK_NV_shader_subgroup_partitioned"

#define vk_nv_compute_shader_derivatives 1
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME "VK_NV_compute_shader_derivatives"
typedef struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        compute_derivative_group_quads;
    VkBool32        compute_derivative_group_linear;
} VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;

#define vk_nv_mesh_shader 1
#define VK_NV_MESH_SHADER_SPEC_VERSION 1
#define VK_NV_MESH_SHADER_EXTENSION_NAME "VK_NV_mesh_shader"
typedef struct VkPhysicalDeviceMeshShaderFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        task_shader;
    VkBool32        mesh_shader;
} VkPhysicalDeviceMeshShaderFeaturesNV;

typedef struct VkPhysicalDeviceMeshShaderPropertiesNV {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_draw_mesh_tasks_count;
    uint32_t        max_task_work_group_invocations;
    uint32_t        max_task_work_group_size[3];
    uint32_t        max_task_total_memory_size;
    uint32_t        max_task_output_count;
    uint32_t        max_mesh_work_group_invocations;
    uint32_t        max_mesh_work_group_size[3];
    uint32_t        max_mesh_total_memory_size;
    uint32_t        max_mesh_output_vertices;
    uint32_t        max_mesh_output_primitives;
    uint32_t        max_mesh_multiview_view_count;
    uint32_t        mesh_output_per_vertex_granularity;
    uint32_t        mesh_output_per_primitive_granularity;
} VkPhysicalDeviceMeshShaderPropertiesNV;

typedef struct VkDrawMeshTasksIndirectCommandNV {
    uint32_t task_count;
    uint32_t first_task;
} VkDrawMeshTasksIndirectCommandNV;

typedef void(VKAPI_PTR* pfn_vk_cmd_draw_mesh_tasks_nv)(VkCommandBuffer command_buffer, uint32_t task_count,
                                                       uint32_t first_task);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_mesh_tasks_indirect_nv)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                                VkDeviceSize offset, uint32_t draw_count,
                                                                uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_mesh_tasks_indirect_count_nv)(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                                      VkDeviceSize offset, VkBuffer count_buffer,
                                                                      VkDeviceSize count_buffer_offset,
                                                                      uint32_t max_draw_count, uint32_t stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_mesh_tasks_nv(VkCommandBuffer command_buffer, uint32_t task_count,
                                                     uint32_t first_task) __asm("vkCmdDrawMeshTasksNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_mesh_tasks_indirect_nv(VkCommandBuffer command_buffer, VkBuffer buffer,
                                                              VkDeviceSize offset, uint32_t draw_count,
                                                              uint32_t stride) __asm("vkCmdDrawMeshTasksIndirectNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_mesh_tasks_indirect_count_nv(
    VkCommandBuffer command_buffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer count_buffer,
    VkDeviceSize count_buffer_offset, uint32_t max_draw_count,
    uint32_t stride) __asm("vkCmdDrawMeshTasksIndirectCountNV");
#endif

#define vk_nv_fragment_shader_barycentric 1
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME "VK_NV_fragment_shader_barycentric"
typedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        fragment_shader_barycentric;
} VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;

#define vk_nv_shader_image_footprint 1
#define VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION 2
#define VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME "VK_NV_shader_image_footprint"
typedef struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        image_footprint;
} VkPhysicalDeviceShaderImageFootprintFeaturesNV;

#define vk_nv_scissor_exclusive 1
#define VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION 1
#define VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME "VK_NV_scissor_exclusive"
typedef struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        exclusive_scissor_count;
    const VkRect2D* p_exclusive_scissors;
} VkPipelineViewportExclusiveScissorStateCreateInfoNV;

typedef struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        exclusive_scissor;
} VkPhysicalDeviceExclusiveScissorFeaturesNV;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_exclusive_scissor_nv)(VkCommandBuffer command_buffer,
                                                             uint32_t        first_exclusive_scissor,
                                                             uint32_t        exclusive_scissor_count,
                                                             const VkRect2D* p_exclusive_scissors);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_exclusive_scissor_nv(
    VkCommandBuffer command_buffer, uint32_t first_exclusive_scissor, uint32_t exclusive_scissor_count,
    const VkRect2D* p_exclusive_scissors) __asm("vkCmdSetExclusiveScissorNV");
#endif

#define vk_nv_device_diagnostic_checkpoints 1
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION 2
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME "VK_NV_device_diagnostic_checkpoints"
typedef struct VkQueueFamilyCheckpointPropertiesNV {
    VkStructureType      s_type;
    void*                p_next;
    VkPipelineStageFlags checkpoint_execution_stage_mask;
} VkQueueFamilyCheckpointPropertiesNV;

typedef struct VkCheckpointDataNV {
    VkStructureType         s_type;
    void*                   p_next;
    VkPipelineStageFlagBits stage;
    void*                   p_checkpoint_marker;
} VkCheckpointDataNV;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_checkpoint_nv)(VkCommandBuffer command_buffer, const void* p_checkpoint_marker);
typedef void(VKAPI_PTR* pfn_vk_get_queue_checkpoint_data_nv)(VkQueue queue, uint32_t* p_checkpoint_data_count,
                                                             VkCheckpointDataNV* p_checkpoint_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_checkpoint_nv(VkCommandBuffer command_buffer,
                                                    const void*     p_checkpoint_marker) __asm("vkCmdSetCheckpointNV");

VKAPI_ATTR void VKAPI_CALL
vk_get_queue_checkpoint_data_nv(VkQueue queue, uint32_t* p_checkpoint_data_count,
                                VkCheckpointDataNV* p_checkpoint_data) __asm("vkGetQueueCheckpointDataNV");
#endif

#define vk_intel_shader_integer_functions2 1
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION 1
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME "VK_INTEL_shader_integer_functions2"
typedef struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_integer_functions2;
} VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

#define vk_intel_performance_query 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPerformanceConfigurationINTEL)
#define VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION 2
#define VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME "VK_INTEL_performance_query"

typedef enum VkPerformanceConfigurationTypeINTEL {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL                                  = 0x7fffffff
} VkPerformanceConfigurationTypeINTEL;

typedef enum VkQueryPoolSamplingModeINTEL {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL   = 0,
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7fffffff
} VkQueryPoolSamplingModeINTEL;

typedef enum VkPerformanceOverrideTypeINTEL {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL    = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL         = 0x7fffffff
} VkPerformanceOverrideTypeINTEL;

typedef enum VkPerformanceParameterTypeINTEL {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL    = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL                 = 0x7fffffff
} VkPerformanceParameterTypeINTEL;

typedef enum VkPerformanceValueTypeINTEL {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL   = 0,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL   = 1,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL    = 2,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL     = 3,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL   = 4,
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7fffffff
} VkPerformanceValueTypeINTEL;
typedef union VkPerformanceValueDataINTEL {
    uint32_t    value32;
    uint64_t    value64;
    float       value_float;
    VkBool32    value_bool;
    const char* value_string;
} VkPerformanceValueDataINTEL;

typedef struct VkPerformanceValueINTEL {
    VkPerformanceValueTypeINTEL type;
    VkPerformanceValueDataINTEL data;
} VkPerformanceValueINTEL;

typedef struct VkInitializePerformanceApiInfoINTEL {
    VkStructureType s_type;
    const void*     p_next;
    void*           p_user_data;
} VkInitializePerformanceApiInfoINTEL;

typedef struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    VkStructureType              s_type;
    const void*                  p_next;
    VkQueryPoolSamplingModeINTEL performance_counters_sampling;
} VkQueryPoolPerformanceQueryCreateInfoINTEL;

typedef VkQueryPoolPerformanceQueryCreateInfoINTEL VkQueryPoolCreateInfoINTEL;

typedef struct VkPerformanceMarkerInfoINTEL {
    VkStructureType s_type;
    const void*     p_next;
    uint64_t        marker;
} VkPerformanceMarkerInfoINTEL;

typedef struct VkPerformanceStreamMarkerInfoINTEL {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        marker;
} VkPerformanceStreamMarkerInfoINTEL;

typedef struct VkPerformanceOverrideInfoINTEL {
    VkStructureType                s_type;
    const void*                    p_next;
    VkPerformanceOverrideTypeINTEL type;
    VkBool32                       enable;
    uint64_t                       parameter;
} VkPerformanceOverrideInfoINTEL;

typedef struct VkPerformanceConfigurationAcquireInfoINTEL {
    VkStructureType                     s_type;
    const void*                         p_next;
    VkPerformanceConfigurationTypeINTEL type;
} VkPerformanceConfigurationAcquireInfoINTEL;

typedef VkResult(VKAPI_PTR* pfn_vk_initialize_performance_api_intel)(
    VkDevice device, const VkInitializePerformanceApiInfoINTEL* p_initialize_info);
typedef void(VKAPI_PTR* pfn_vk_uninitialize_performance_api_intel)(VkDevice device);
typedef VkResult(VKAPI_PTR* pfn_vk_cmd_set_performance_marker_intel)(VkCommandBuffer                     command_buffer,
                                                                     const VkPerformanceMarkerInfoINTEL* p_marker_info);
typedef VkResult(VKAPI_PTR* pfn_vk_cmd_set_performance_stream_marker_intel)(
    VkCommandBuffer command_buffer, const VkPerformanceStreamMarkerInfoINTEL* p_marker_info);
typedef VkResult(VKAPI_PTR* pfn_vk_cmd_set_performance_override_intel)(
    VkCommandBuffer command_buffer, const VkPerformanceOverrideInfoINTEL* p_override_info);
typedef VkResult(VKAPI_PTR* pfn_vk_acquire_performance_configuration_intel)(
    VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* p_acquire_info,
    VkPerformanceConfigurationINTEL* p_configuration);
typedef VkResult(VKAPI_PTR* pfn_vk_release_performance_configuration_intel)(
    VkDevice device, VkPerformanceConfigurationINTEL configuration);
typedef VkResult(VKAPI_PTR* pfn_vk_queue_set_performance_configuration_intel)(
    VkQueue queue, VkPerformanceConfigurationINTEL configuration);
typedef VkResult(VKAPI_PTR* pfn_vk_get_performance_parameter_intel)(VkDevice                        device,
                                                                    VkPerformanceParameterTypeINTEL parameter,
                                                                    VkPerformanceValueINTEL*        p_value);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_initialize_performance_api_intel(
    VkDevice                                   device,
    const VkInitializePerformanceApiInfoINTEL* p_initialize_info) __asm("vkInitializePerformanceApiINTEL");

VKAPI_ATTR void VKAPI_CALL
vk_uninitialize_performance_api_intel(VkDevice device) __asm("vkUninitializePerformanceApiINTEL");

VKAPI_ATTR VkResult VKAPI_CALL vk_cmd_set_performance_marker_intel(
    VkCommandBuffer                     command_buffer,
    const VkPerformanceMarkerInfoINTEL* p_marker_info) __asm("vkCmdSetPerformanceMarkerINTEL");

VKAPI_ATTR VkResult VKAPI_CALL vk_cmd_set_performance_stream_marker_intel(
    VkCommandBuffer                           command_buffer,
    const VkPerformanceStreamMarkerInfoINTEL* p_marker_info) __asm("vkCmdSetPerformanceStreamMarkerINTEL");

VKAPI_ATTR VkResult VKAPI_CALL vk_cmd_set_performance_override_intel(
    VkCommandBuffer                       command_buffer,
    const VkPerformanceOverrideInfoINTEL* p_override_info) __asm("vkCmdSetPerformanceOverrideINTEL");

VKAPI_ATTR VkResult VKAPI_CALL vk_acquire_performance_configuration_intel(
    VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* p_acquire_info,
    VkPerformanceConfigurationINTEL* p_configuration) __asm("vkAcquirePerformanceConfigurationINTEL");

VKAPI_ATTR VkResult VKAPI_CALL vk_release_performance_configuration_intel(
    VkDevice device, VkPerformanceConfigurationINTEL configuration) __asm("vkReleasePerformanceConfigurationINTEL");

VKAPI_ATTR VkResult VKAPI_CALL vk_queue_set_performance_configuration_intel(
    VkQueue queue, VkPerformanceConfigurationINTEL configuration) __asm("vkQueueSetPerformanceConfigurationINTEL");

VKAPI_ATTR VkResult VKAPI_CALL
vk_get_performance_parameter_intel(VkDevice device, VkPerformanceParameterTypeINTEL parameter,
                                   VkPerformanceValueINTEL* p_value) __asm("vkGetPerformanceParameterINTEL");
#endif

#define vk_ext_pci_bus_info 1
#define VK_EXT_PCI_BUS_INFO_SPEC_VERSION 2
#define VK_EXT_PCI_BUS_INFO_EXTENSION_NAME "VK_EXT_pci_bus_info"
typedef struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        pci_domain;
    uint32_t        pci_bus;
    uint32_t        pci_device;
    uint32_t        pci_function;
} VkPhysicalDevicePCIBusInfoPropertiesEXT;

#define vk_amd_display_native_hdr 1
#define VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION 1
#define VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME "VK_AMD_display_native_hdr"
typedef struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        local_dimming_support;
} VkDisplayNativeHdrSurfaceCapabilitiesAMD;

typedef struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    VkStructureType s_type;
    const void*     p_next;
    VkBool32        local_dimming_enable;
} VkSwapchainDisplayNativeHdrCreateInfoAMD;

typedef void(VKAPI_PTR* pfn_vk_set_local_dimming_amd)(VkDevice device, VkSwapchainKHR swap_chain,
                                                      VkBool32 local_dimming_enable);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_set_local_dimming_amd(VkDevice device, VkSwapchainKHR swap_chain,
                                                    VkBool32 local_dimming_enable) __asm("vkSetLocalDimmingAMD");
#endif

#define vk_ext_fragment_density_map 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME "VK_EXT_fragment_density_map"
typedef struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        fragment_density_map;
    VkBool32        fragment_density_map_dynamic;
    VkBool32        fragment_density_map_non_subsampled_images;
} VkPhysicalDeviceFragmentDensityMapFeaturesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkExtent2D      min_fragment_density_texel_size;
    VkExtent2D      max_fragment_density_texel_size;
    VkBool32        fragment_density_invocations;
} VkPhysicalDeviceFragmentDensityMapPropertiesEXT;

typedef struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    VkStructureType       s_type;
    const void*           p_next;
    VkAttachmentReference fragment_density_map_attachment;
} VkRenderPassFragmentDensityMapCreateInfoEXT;

#define vk_ext_scalar_block_layout 1
#define VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION 1
#define VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME "VK_EXT_scalar_block_layout"
typedef VkPhysicalDeviceScalarBlockLayoutFeatures VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;

#define vk_google_hlsl_functionality1 1
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION 1
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME "VK_GOOGLE_hlsl_functionality1"

#define vk_google_decorate_string 1
#define VK_GOOGLE_DECORATE_STRING_SPEC_VERSION 1
#define VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME "VK_GOOGLE_decorate_string"

#define vk_ext_subgroup_size_control 1
#define VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION 2
#define VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME "VK_EXT_subgroup_size_control"
typedef struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        subgroup_size_control;
    VkBool32        compute_full_subgroups;
} VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;

typedef struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    VkStructureType    s_type;
    void*              p_next;
    uint32_t           min_subgroup_size;
    uint32_t           max_subgroup_size;
    uint32_t           max_compute_workgroup_subgroups;
    VkShaderStageFlags required_subgroup_size_stages;
} VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;

typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        required_subgroup_size;
} VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;

#define vk_amd_shader_core_properties2 1
#define VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION 1
#define VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME "VK_AMD_shader_core_properties2"

typedef enum VkShaderCorePropertiesFlagBitsAMD {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7fffffff
} VkShaderCorePropertiesFlagBitsAMD;
typedef VkFlags VkShaderCorePropertiesFlagsAMD;
typedef struct VkPhysicalDeviceShaderCoreProperties2AMD {
    VkStructureType                s_type;
    void*                          p_next;
    VkShaderCorePropertiesFlagsAMD shader_core_features;
    uint32_t                       active_compute_unit_count;
} VkPhysicalDeviceShaderCoreProperties2AMD;

#define vk_amd_device_coherent_memory 1
#define VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION 1
#define VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME "VK_AMD_device_coherent_memory"
typedef struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        device_coherent_memory;
} VkPhysicalDeviceCoherentMemoryFeaturesAMD;

#define vk_ext_memory_budget 1
#define VK_EXT_MEMORY_BUDGET_SPEC_VERSION 1
#define VK_EXT_MEMORY_BUDGET_EXTENSION_NAME "VK_EXT_memory_budget"
typedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkDeviceSize    heap_budget[VK_MAX_MEMORY_HEAPS];
    VkDeviceSize    heap_usage[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryBudgetPropertiesEXT;

#define vk_ext_memory_priority 1
#define VK_EXT_MEMORY_PRIORITY_SPEC_VERSION 1
#define VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME "VK_EXT_memory_priority"
typedef struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        memory_priority;
} VkPhysicalDeviceMemoryPriorityFeaturesEXT;

typedef struct VkMemoryPriorityAllocateInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    float           priority;
} VkMemoryPriorityAllocateInfoEXT;

#define vk_nv_dedicated_allocation_image_aliasing 1
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION 1
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME "VK_NV_dedicated_allocation_image_aliasing"
typedef struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        dedicated_allocation_image_aliasing;
} VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

#define vk_ext_buffer_device_address 1
#define VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 2
#define VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME "VK_EXT_buffer_device_address"
typedef struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        buffer_device_address;
    VkBool32        buffer_device_address_capture_replay;
    VkBool32        buffer_device_address_multi_device;
} VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

typedef VkPhysicalDeviceBufferDeviceAddressFeaturesEXT VkPhysicalDeviceBufferAddressFeaturesEXT;

typedef VkBufferDeviceAddressInfo VkBufferDeviceAddressInfoEXT;

typedef struct VkBufferDeviceAddressCreateInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    VkDeviceAddress device_address;
} VkBufferDeviceAddressCreateInfoEXT;

typedef VkDeviceAddress(VKAPI_PTR* pfn_vk_get_buffer_device_address_ext)(VkDevice                         device,
                                                                         const VkBufferDeviceAddressInfo* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vk_get_buffer_device_address_ext(
    VkDevice device, const VkBufferDeviceAddressInfo* p_info) __asm("vkGetBufferDeviceAddressEXT");
#endif

#define vk_ext_tooling_info 1
#define VK_EXT_TOOLING_INFO_SPEC_VERSION 1
#define VK_EXT_TOOLING_INFO_EXTENSION_NAME "VK_EXT_tooling_info"

typedef enum VkToolPurposeFlagBitsEXT {
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT          = 0x00000001,
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT           = 0x00000002,
    VK_TOOL_PURPOSE_TRACING_BIT_EXT             = 0x00000004,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 0x00000008,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT  = 0x00000010,
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT     = 0x00000020,
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT       = 0x00000040,
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT      = 0x7fffffff
} VkToolPurposeFlagBitsEXT;
typedef VkFlags VkToolPurposeFlagsEXT;
typedef struct VkPhysicalDeviceToolPropertiesEXT {
    VkStructureType       s_type;
    void*                 p_next;
    char                  name[VK_MAX_EXTENSION_NAME_SIZE];
    char                  version[VK_MAX_EXTENSION_NAME_SIZE];
    VkToolPurposeFlagsEXT purposes;
    char                  description[VK_MAX_DESCRIPTION_SIZE];
    char                  layer[VK_MAX_EXTENSION_NAME_SIZE];
} VkPhysicalDeviceToolPropertiesEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_tool_properties_ext)(
    VkPhysicalDevice physical_device, uint32_t* p_tool_count, VkPhysicalDeviceToolPropertiesEXT* p_tool_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_tool_properties_ext(
    VkPhysicalDevice physical_device, uint32_t* p_tool_count,
    VkPhysicalDeviceToolPropertiesEXT* p_tool_properties) __asm("vkGetPhysicalDeviceToolPropertiesEXT");
#endif

#define vk_ext_separate_stencil_usage 1
#define VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION 1
#define VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME "VK_EXT_separate_stencil_usage"
typedef VkImageStencilUsageCreateInfo VkImageStencilUsageCreateInfoEXT;

#define vk_ext_validation_features 1
#define VK_EXT_VALIDATION_FEATURES_SPEC_VERSION 4
#define VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME "VK_EXT_validation_features"

typedef enum VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT                      = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT                    = 2,
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT                      = 3,
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT        = 4,
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT                          = 0x7fffffff
} VkValidationFeatureEnableEXT;

typedef enum VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT              = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT          = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT    = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT   = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT      = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT   = 6,
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT         = 0x7fffffff
} VkValidationFeatureDisableEXT;
typedef struct VkValidationFeaturesEXT {
    VkStructureType                      s_type;
    const void*                          p_next;
    uint32_t                             enabled_validation_feature_count;
    const VkValidationFeatureEnableEXT*  p_enabled_validation_features;
    uint32_t                             disabled_validation_feature_count;
    const VkValidationFeatureDisableEXT* p_disabled_validation_features;
} VkValidationFeaturesEXT;

#define vk_nv_cooperative_matrix 1
#define VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION 1
#define VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME "VK_NV_cooperative_matrix"

typedef enum VkComponentTypeNV {
    VK_COMPONENT_TYPE_FLOAT16_NV  = 0,
    VK_COMPONENT_TYPE_FLOAT32_NV  = 1,
    VK_COMPONENT_TYPE_FLOAT64_NV  = 2,
    VK_COMPONENT_TYPE_SINT8_NV    = 3,
    VK_COMPONENT_TYPE_SINT16_NV   = 4,
    VK_COMPONENT_TYPE_SINT32_NV   = 5,
    VK_COMPONENT_TYPE_SINT64_NV   = 6,
    VK_COMPONENT_TYPE_UINT8_NV    = 7,
    VK_COMPONENT_TYPE_UINT16_NV   = 8,
    VK_COMPONENT_TYPE_UINT32_NV   = 9,
    VK_COMPONENT_TYPE_UINT64_NV   = 10,
    VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7fffffff
} VkComponentTypeNV;

typedef enum VkScopeNV {
    VK_SCOPE_DEVICE_NV       = 1,
    VK_SCOPE_WORKGROUP_NV    = 2,
    VK_SCOPE_SUBGROUP_NV     = 3,
    VK_SCOPE_QUEUE_FAMILY_NV = 5,
    VK_SCOPE_MAX_ENUM_NV     = 0x7fffffff
} VkScopeNV;
typedef struct VkCooperativeMatrixPropertiesNV {
    VkStructureType   s_type;
    void*             p_next;
    uint32_t          msize;
    uint32_t          nsize;
    uint32_t          ksize;
    VkComponentTypeNV atype;
    VkComponentTypeNV btype;
    VkComponentTypeNV ctype;
    VkComponentTypeNV dtype;
    VkScopeNV         scope;
} VkCooperativeMatrixPropertiesNV;

typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        cooperative_matrix;
    VkBool32        cooperative_matrix_robust_buffer_access;
} VkPhysicalDeviceCooperativeMatrixFeaturesNV;

typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    VkStructureType    s_type;
    void*              p_next;
    VkShaderStageFlags cooperative_matrix_supported_stages;
} VkPhysicalDeviceCooperativeMatrixPropertiesNV;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_cooperative_matrix_properties_nv)(
    VkPhysicalDevice physical_device, uint32_t* p_property_count, VkCooperativeMatrixPropertiesNV* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_cooperative_matrix_properties_nv(
    VkPhysicalDevice physical_device, uint32_t* p_property_count,
    VkCooperativeMatrixPropertiesNV* p_properties) __asm("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
#endif

#define vk_nv_coverage_reduction_mode 1
#define VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION 1
#define VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME "VK_NV_coverage_reduction_mode"

typedef enum VkCoverageReductionModeNV {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV    = 0,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7fffffff
} VkCoverageReductionModeNV;
typedef VkFlags VkPipelineCoverageReductionStateCreateFlagsNV;
typedef struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        coverage_reduction_mode;
} VkPhysicalDeviceCoverageReductionModeFeaturesNV;

typedef struct VkPipelineCoverageReductionStateCreateInfoNV {
    VkStructureType                               s_type;
    const void*                                   p_next;
    VkPipelineCoverageReductionStateCreateFlagsNV flags;
    VkCoverageReductionModeNV                     coverage_reduction_mode;
} VkPipelineCoverageReductionStateCreateInfoNV;

typedef struct VkFramebufferMixedSamplesCombinationNV {
    VkStructureType           s_type;
    void*                     p_next;
    VkCoverageReductionModeNV coverage_reduction_mode;
    VkSampleCountFlagBits     rasterization_samples;
    VkSampleCountFlags        depth_stencil_samples;
    VkSampleCountFlags        color_samples;
} VkFramebufferMixedSamplesCombinationNV;

typedef VkResult(VKAPI_PTR* pfn_vk_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv)(
    VkPhysicalDevice physical_device, uint32_t* p_combination_count,
    VkFramebufferMixedSamplesCombinationNV* p_combinations);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(
    VkPhysicalDevice physical_device, uint32_t* p_combination_count,
    VkFramebufferMixedSamplesCombinationNV*
        p_combinations) __asm("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
#endif

#define vk_ext_fragment_shader_interlock 1
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME "VK_EXT_fragment_shader_interlock"
typedef struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        fragment_shader_sample_interlock;
    VkBool32        fragment_shader_pixel_interlock;
    VkBool32        fragment_shader_shading_rate_interlock;
} VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;

#define vk_ext_ycbcr_image_arrays 1
#define VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION 1
#define VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME "VK_EXT_ycbcr_image_arrays"
typedef struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        ycbcr_image_arrays;
} VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;

#define vk_ext_headless_surface 1
#define VK_EXT_HEADLESS_SURFACE_SPEC_VERSION 1
#define VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME "VK_EXT_headless_surface"
typedef VkFlags VkHeadlessSurfaceCreateFlagsEXT;
typedef struct VkHeadlessSurfaceCreateInfoEXT {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkHeadlessSurfaceCreateFlagsEXT flags;
} VkHeadlessSurfaceCreateInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_create_headless_surface_ext)(VkInstance                            instance,
                                                                const VkHeadlessSurfaceCreateInfoEXT* p_create_info,
                                                                const VkAllocationCallbacks*          p_allocator,
                                                                VkSurfaceKHR*                         p_surface);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_headless_surface_ext(
    VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkSurfaceKHR* p_surface) __asm("vkCreateHeadlessSurfaceEXT");
#endif

#define vk_ext_line_rasterization 1
#define VK_EXT_LINE_RASTERIZATION_SPEC_VERSION 1
#define VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME "VK_EXT_line_rasterization"

typedef enum VkLineRasterizationModeEXT {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT            = 0,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT        = 1,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT          = 2,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT           = 0x7fffffff
} VkLineRasterizationModeEXT;
typedef struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        rectangular_lines;
    VkBool32        bresenham_lines;
    VkBool32        smooth_lines;
    VkBool32        stippled_rectangular_lines;
    VkBool32        stippled_bresenham_lines;
    VkBool32        stippled_smooth_lines;
} VkPhysicalDeviceLineRasterizationFeaturesEXT;

typedef struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        line_sub_pixel_precision_bits;
} VkPhysicalDeviceLineRasterizationPropertiesEXT;

typedef struct VkPipelineRasterizationLineStateCreateInfoEXT {
    VkStructureType            s_type;
    const void*                p_next;
    VkLineRasterizationModeEXT line_rasterization_mode;
    VkBool32                   stippled_line_enable;
    uint32_t                   line_stipple_factor;
    uint16_t                   line_stipple_pattern;
} VkPipelineRasterizationLineStateCreateInfoEXT;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_line_stipple_ext)(VkCommandBuffer command_buffer, uint32_t line_stipple_factor,
                                                         uint16_t line_stipple_pattern);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_line_stipple_ext(VkCommandBuffer command_buffer, uint32_t line_stipple_factor,
                                                       uint16_t line_stipple_pattern) __asm("vkCmdSetLineStippleEXT");
#endif

#define vk_ext_shader_atomic_float 1
#define VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION 1
#define VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME "VK_EXT_shader_atomic_float"
typedef struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_buffer_float32atomics;
    VkBool32        shader_buffer_float32atomic_add;
    VkBool32        shader_buffer_float64atomics;
    VkBool32        shader_buffer_float64atomic_add;
    VkBool32        shader_shared_float32atomics;
    VkBool32        shader_shared_float32atomic_add;
    VkBool32        shader_shared_float64atomics;
    VkBool32        shader_shared_float64atomic_add;
    VkBool32        shader_image_float32atomics;
    VkBool32        shader_image_float32atomic_add;
    VkBool32        sparse_image_float32atomics;
    VkBool32        sparse_image_float32atomic_add;
} VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;

#define vk_ext_host_query_reset 1
#define VK_EXT_HOST_QUERY_RESET_SPEC_VERSION 1
#define VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME "VK_EXT_host_query_reset"
typedef VkPhysicalDeviceHostQueryResetFeatures VkPhysicalDeviceHostQueryResetFeaturesEXT;

typedef void(VKAPI_PTR* pfn_vk_reset_query_pool_ext)(VkDevice device, VkQueryPool query_pool, uint32_t first_query,
                                                     uint32_t query_count);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_reset_query_pool_ext(VkDevice device, VkQueryPool query_pool, uint32_t first_query,
                                                   uint32_t query_count) __asm("vkResetQueryPoolEXT");
#endif

#define vk_ext_index_type_uint8 1
#define VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION 1
#define VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME "VK_EXT_index_type_uint8"
typedef struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        index_type_uint8;
} VkPhysicalDeviceIndexTypeUint8FeaturesEXT;

#define vk_ext_extended_dynamic_state 1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION 1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME "VK_EXT_extended_dynamic_state"
typedef struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        extended_dynamic_state;
} VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_cull_mode_ext)(VkCommandBuffer command_buffer, VkCullModeFlags cull_mode);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_front_face_ext)(VkCommandBuffer command_buffer, VkFrontFace front_face);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_primitive_topology_ext)(VkCommandBuffer     command_buffer,
                                                               VkPrimitiveTopology primitive_topology);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport_with_count_ext)(VkCommandBuffer command_buffer, uint32_t viewport_count,
                                                                const VkViewport* p_viewports);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_scissor_with_count_ext)(VkCommandBuffer command_buffer, uint32_t scissor_count,
                                                               const VkRect2D* p_scissors);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_vertex_buffers2ext)(VkCommandBuffer command_buffer, uint32_t first_binding,
                                                            uint32_t binding_count, const VkBuffer* p_buffers,
                                                            const VkDeviceSize* p_offsets, const VkDeviceSize* p_sizes,
                                                            const VkDeviceSize* p_strides);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_test_enable_ext)(VkCommandBuffer command_buffer,
                                                              VkBool32        depth_test_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_write_enable_ext)(VkCommandBuffer command_buffer,
                                                               VkBool32        depth_write_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_compare_op_ext)(VkCommandBuffer command_buffer,
                                                             VkCompareOp     depth_compare_op);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_bounds_test_enable_ext)(VkCommandBuffer command_buffer,
                                                                     VkBool32        depth_bounds_test_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_test_enable_ext)(VkCommandBuffer command_buffer,
                                                                VkBool32        stencil_test_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_op_ext)(VkCommandBuffer command_buffer, VkStencilFaceFlags face_mask,
                                                       VkStencilOp fail_op, VkStencilOp pass_op,
                                                       VkStencilOp depth_fail_op, VkCompareOp compare_op);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_cull_mode_ext(VkCommandBuffer command_buffer,
                                                    VkCullModeFlags cull_mode) __asm("vkCmdSetCullModeEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_front_face_ext(VkCommandBuffer command_buffer,
                                                     VkFrontFace     front_face) __asm("vkCmdSetFrontFaceEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_primitive_topology_ext(
    VkCommandBuffer command_buffer, VkPrimitiveTopology primitive_topology) __asm("vkCmdSetPrimitiveTopologyEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_set_viewport_with_count_ext(VkCommandBuffer command_buffer, uint32_t viewport_count,
                                   const VkViewport* p_viewports) __asm("vkCmdSetViewportWithCountEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_set_scissor_with_count_ext(VkCommandBuffer command_buffer, uint32_t scissor_count,
                                  const VkRect2D* p_scissors) __asm("vkCmdSetScissorWithCountEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_bind_vertex_buffers2ext(VkCommandBuffer command_buffer, uint32_t first_binding, uint32_t binding_count,
                               const VkBuffer* p_buffers, const VkDeviceSize* p_offsets, const VkDeviceSize* p_sizes,
                               const VkDeviceSize* p_strides) __asm("vkCmdBindVertexBuffers2EXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_test_enable_ext(
    VkCommandBuffer command_buffer, VkBool32 depth_test_enable) __asm("vkCmdSetDepthTestEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_write_enable_ext(
    VkCommandBuffer command_buffer, VkBool32 depth_write_enable) __asm("vkCmdSetDepthWriteEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_compare_op_ext(
    VkCommandBuffer command_buffer, VkCompareOp depth_compare_op) __asm("vkCmdSetDepthCompareOpEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_bounds_test_enable_ext(
    VkCommandBuffer command_buffer, VkBool32 depth_bounds_test_enable) __asm("vkCmdSetDepthBoundsTestEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_test_enable_ext(
    VkCommandBuffer command_buffer, VkBool32 stencil_test_enable) __asm("vkCmdSetStencilTestEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_op_ext(VkCommandBuffer command_buffer, VkStencilFaceFlags face_mask,
                                                     VkStencilOp fail_op, VkStencilOp pass_op,
                                                     VkStencilOp depth_fail_op,
                                                     VkCompareOp compare_op) __asm("vkCmdSetStencilOpEXT");
#endif

#define vk_ext_shader_demote_to_helper_invocation 1
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION 1
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME "VK_EXT_shader_demote_to_helper_invocation"
typedef struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        shader_demote_to_helper_invocation;
} VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;

#define vk_nv_device_generated_commands 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutNV)
#define VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 3
#define VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME "VK_NV_device_generated_commands"

typedef enum VkIndirectCommandsTokenTypeNV {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV  = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV   = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV  = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV  = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV          = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV    = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV      = 0x7fffffff
} VkIndirectCommandsTokenTypeNV;

typedef enum VkIndirectStateFlagBitsNV {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001,
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7fffffff
} VkIndirectStateFlagBitsNV;
typedef VkFlags VkIndirectStateFlagsNV;

typedef enum VkIndirectCommandsLayoutUsageFlagBitsNV {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV   = 0x00000002,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV      = 0x7fffffff
} VkIndirectCommandsLayoutUsageFlagBitsNV;
typedef VkFlags VkIndirectCommandsLayoutUsageFlagsNV;
typedef struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_graphics_shader_group_count;
    uint32_t        max_indirect_sequence_count;
    uint32_t        max_indirect_commands_token_count;
    uint32_t        max_indirect_commands_stream_count;
    uint32_t        max_indirect_commands_token_offset;
    uint32_t        max_indirect_commands_stream_stride;
    uint32_t        min_sequences_count_buffer_offset_alignment;
    uint32_t        min_sequences_index_buffer_offset_alignment;
    uint32_t        min_indirect_commands_buffer_offset_alignment;
} VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        device_generated_commands;
} VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

typedef struct VkGraphicsShaderGroupCreateInfoNV {
    VkStructureType                              s_type;
    const void*                                  p_next;
    uint32_t                                     stage_count;
    const VkPipelineShaderStageCreateInfo*       p_stages;
    const VkPipelineVertexInputStateCreateInfo*  p_vertex_input_state;
    const VkPipelineTessellationStateCreateInfo* p_tessellation_state;
} VkGraphicsShaderGroupCreateInfoNV;

typedef struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    VkStructureType                          s_type;
    const void*                              p_next;
    uint32_t                                 group_count;
    const VkGraphicsShaderGroupCreateInfoNV* p_groups;
    uint32_t                                 pipeline_count;
    const VkPipeline*                        p_pipelines;
} VkGraphicsPipelineShaderGroupsCreateInfoNV;

typedef struct VkBindShaderGroupIndirectCommandNV {
    uint32_t group_index;
} VkBindShaderGroupIndirectCommandNV;

typedef struct VkBindIndexBufferIndirectCommandNV {
    VkDeviceAddress buffer_address;
    uint32_t        size;
    VkIndexType     index_type;
} VkBindIndexBufferIndirectCommandNV;

typedef struct VkBindVertexBufferIndirectCommandNV {
    VkDeviceAddress buffer_address;
    uint32_t        size;
    uint32_t        stride;
} VkBindVertexBufferIndirectCommandNV;

typedef struct VkSetStateFlagsIndirectCommandNV {
    uint32_t data;
} VkSetStateFlagsIndirectCommandNV;

typedef struct VkIndirectCommandsStreamNV {
    VkBuffer     buffer;
    VkDeviceSize offset;
} VkIndirectCommandsStreamNV;

typedef struct VkIndirectCommandsLayoutTokenNV {
    VkStructureType               s_type;
    const void*                   p_next;
    VkIndirectCommandsTokenTypeNV token_type;
    uint32_t                      stream;
    uint32_t                      offset;
    uint32_t                      vertex_binding_unit;
    VkBool32                      vertex_dynamic_stride;
    VkPipelineLayout              pushconstant_pipeline_layout;
    VkShaderStageFlags            pushconstant_shader_stage_flags;
    uint32_t                      pushconstant_offset;
    uint32_t                      pushconstant_size;
    VkIndirectStateFlagsNV        indirect_state_flags;
    uint32_t                      index_type_count;
    const VkIndexType*            p_index_types;
    const uint32_t*               p_index_type_values;
} VkIndirectCommandsLayoutTokenNV;

typedef struct VkIndirectCommandsLayoutCreateInfoNV {
    VkStructureType                        s_type;
    const void*                            p_next;
    VkIndirectCommandsLayoutUsageFlagsNV   flags;
    VkPipelineBindPoint                    pipeline_bind_point;
    uint32_t                               token_count;
    const VkIndirectCommandsLayoutTokenNV* p_tokens;
    uint32_t                               stream_count;
    const uint32_t*                        p_stream_strides;
} VkIndirectCommandsLayoutCreateInfoNV;

typedef struct VkGeneratedCommandsInfoNV {
    VkStructureType                   s_type;
    const void*                       p_next;
    VkPipelineBindPoint               pipeline_bind_point;
    VkPipeline                        pipeline;
    VkIndirectCommandsLayoutNV        indirect_commands_layout;
    uint32_t                          stream_count;
    const VkIndirectCommandsStreamNV* p_streams;
    uint32_t                          sequences_count;
    VkBuffer                          preprocess_buffer;
    VkDeviceSize                      preprocess_offset;
    VkDeviceSize                      preprocess_size;
    VkBuffer                          sequences_count_buffer;
    VkDeviceSize                      sequences_count_offset;
    VkBuffer                          sequences_index_buffer;
    VkDeviceSize                      sequences_index_offset;
} VkGeneratedCommandsInfoNV;

typedef struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    VkStructureType            s_type;
    const void*                p_next;
    VkPipelineBindPoint        pipeline_bind_point;
    VkPipeline                 pipeline;
    VkIndirectCommandsLayoutNV indirect_commands_layout;
    uint32_t                   max_sequences_count;
} VkGeneratedCommandsMemoryRequirementsInfoNV;

typedef void(VKAPI_PTR* pfn_vk_get_generated_commands_memory_requirements_nv)(
    VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* p_info,
    VkMemoryRequirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_cmd_preprocess_generated_commands_nv)(
    VkCommandBuffer command_buffer, const VkGeneratedCommandsInfoNV* p_generated_commands_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_execute_generated_commands_nv)(
    VkCommandBuffer command_buffer, VkBool32 is_preprocessed,
    const VkGeneratedCommandsInfoNV* p_generated_commands_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_pipeline_shader_group_nv)(VkCommandBuffer     command_buffer,
                                                                  VkPipelineBindPoint pipeline_bind_point,
                                                                  VkPipeline pipeline, uint32_t group_index);
typedef VkResult(VKAPI_PTR* pfn_vk_create_indirect_commands_layout_nv)(
    VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* p_create_info,
    const VkAllocationCallbacks* p_allocator, VkIndirectCommandsLayoutNV* p_indirect_commands_layout);
typedef void(VKAPI_PTR* pfn_vk_destroy_indirect_commands_layout_nv)(VkDevice                   device,
                                                                    VkIndirectCommandsLayoutNV indirect_commands_layout,
                                                                    const VkAllocationCallbacks* p_allocator);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_generated_commands_memory_requirements_nv(
    VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* p_info,
    VkMemoryRequirements2* p_memory_requirements) __asm("vkGetGeneratedCommandsMemoryRequirementsNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_preprocess_generated_commands_nv(
    VkCommandBuffer                  command_buffer,
    const VkGeneratedCommandsInfoNV* p_generated_commands_info) __asm("vkCmdPreprocessGeneratedCommandsNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_execute_generated_commands_nv(
    VkCommandBuffer command_buffer, VkBool32 is_preprocessed,
    const VkGeneratedCommandsInfoNV* p_generated_commands_info) __asm("vkCmdExecuteGeneratedCommandsNV");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_bind_pipeline_shader_group_nv(VkCommandBuffer command_buffer, VkPipelineBindPoint pipeline_bind_point,
                                     VkPipeline pipeline, uint32_t group_index) __asm("vkCmdBindPipelineShaderGroupNV");

VKAPI_ATTR VkResult VKAPI_CALL vk_create_indirect_commands_layout_nv(
    VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* p_create_info,
    const VkAllocationCallbacks* p_allocator,
    VkIndirectCommandsLayoutNV*  p_indirect_commands_layout) __asm("vkCreateIndirectCommandsLayoutNV");

VKAPI_ATTR void VKAPI_CALL vk_destroy_indirect_commands_layout_nv(
    VkDevice device, VkIndirectCommandsLayoutNV indirect_commands_layout,
    const VkAllocationCallbacks* p_allocator) __asm("vkDestroyIndirectCommandsLayoutNV");
#endif

#define vk_ext_texel_buffer_alignment 1
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION 1
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME "VK_EXT_texel_buffer_alignment"
typedef struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        texel_buffer_alignment;
} VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;

typedef struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkDeviceSize    storage_texel_buffer_offset_alignment_bytes;
    VkBool32        storage_texel_buffer_offset_single_texel_alignment;
    VkDeviceSize    uniform_texel_buffer_offset_alignment_bytes;
    VkBool32        uniform_texel_buffer_offset_single_texel_alignment;
} VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;

#define vk_qcom_render_pass_transform 1
#define VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION 1
#define VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME "VK_QCOM_render_pass_transform"
typedef struct VkRenderPassTransformBeginInfoQCOM {
    VkStructureType               s_type;
    void*                         p_next;
    VkSurfaceTransformFlagBitsKHR transform;
} VkRenderPassTransformBeginInfoQCOM;

typedef struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    VkStructureType               s_type;
    void*                         p_next;
    VkSurfaceTransformFlagBitsKHR transform;
    VkRect2D                      render_area;
} VkCommandBufferInheritanceRenderPassTransformInfoQCOM;

#define vk_ext_robustness2 1
#define VK_EXT_ROBUSTNESS_2_SPEC_VERSION 1
#define VK_EXT_ROBUSTNESS_2_EXTENSION_NAME "VK_EXT_robustness2"
typedef struct VkPhysicalDeviceRobustness2FeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        robust_buffer_access2;
    VkBool32        robust_image_access2;
    VkBool32        null_descriptor;
} VkPhysicalDeviceRobustness2FeaturesEXT;

typedef struct VkPhysicalDeviceRobustness2PropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkDeviceSize    robust_storage_buffer_access_size_alignment;
    VkDeviceSize    robust_uniform_buffer_access_size_alignment;
} VkPhysicalDeviceRobustness2PropertiesEXT;

#define vk_ext_custom_border_color 1
#define VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION 12
#define VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME "VK_EXT_custom_border_color"
typedef struct VkSamplerCustomBorderColorCreateInfoEXT {
    VkStructureType   s_type;
    const void*       p_next;
    VkClearColorValue custom_border_color;
    VkFormat          format;
} VkSamplerCustomBorderColorCreateInfoEXT;

typedef struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    uint32_t        max_custom_border_color_samplers;
} VkPhysicalDeviceCustomBorderColorPropertiesEXT;

typedef struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        custom_border_colors;
    VkBool32        custom_border_color_without_format;
} VkPhysicalDeviceCustomBorderColorFeaturesEXT;

#define vk_google_user_type 1
#define VK_GOOGLE_USER_TYPE_SPEC_VERSION 1
#define VK_GOOGLE_USER_TYPE_EXTENSION_NAME "VK_GOOGLE_user_type"

#define vk_ext_private_data 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPrivateDataSlotEXT)
#define VK_EXT_PRIVATE_DATA_SPEC_VERSION 1
#define VK_EXT_PRIVATE_DATA_EXTENSION_NAME "VK_EXT_private_data"

typedef enum VkPrivateDataSlotCreateFlagBitsEXT {
    VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} VkPrivateDataSlotCreateFlagBitsEXT;
typedef VkFlags VkPrivateDataSlotCreateFlagsEXT;
typedef struct VkPhysicalDevicePrivateDataFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        private_data;
} VkPhysicalDevicePrivateDataFeaturesEXT;

typedef struct VkDevicePrivateDataCreateInfoEXT {
    VkStructureType s_type;
    const void*     p_next;
    uint32_t        private_data_slot_request_count;
} VkDevicePrivateDataCreateInfoEXT;

typedef struct VkPrivateDataSlotCreateInfoEXT {
    VkStructureType                 s_type;
    const void*                     p_next;
    VkPrivateDataSlotCreateFlagsEXT flags;
} VkPrivateDataSlotCreateInfoEXT;

typedef VkResult(VKAPI_PTR* pfn_vk_create_private_data_slot_ext)(VkDevice                              device,
                                                                 const VkPrivateDataSlotCreateInfoEXT* p_create_info,
                                                                 const VkAllocationCallbacks*          p_allocator,
                                                                 VkPrivateDataSlotEXT* p_private_data_slot);
typedef void(VKAPI_PTR* pfn_vk_destroy_private_data_slot_ext)(VkDevice device, VkPrivateDataSlotEXT private_data_slot,
                                                              const VkAllocationCallbacks* p_allocator);
typedef VkResult(VKAPI_PTR* pfn_vk_set_private_data_ext)(VkDevice device, VkObjectType object_type,
                                                         uint64_t object_handle, VkPrivateDataSlotEXT private_data_slot,
                                                         uint64_t data);
typedef void(VKAPI_PTR* pfn_vk_get_private_data_ext)(VkDevice device, VkObjectType object_type, uint64_t object_handle,
                                                     VkPrivateDataSlotEXT private_data_slot, uint64_t* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR VkResult VKAPI_CALL vk_create_private_data_slot_ext(
    VkDevice device, const VkPrivateDataSlotCreateInfoEXT* p_create_info, const VkAllocationCallbacks* p_allocator,
    VkPrivateDataSlotEXT* p_private_data_slot) __asm("vkCreatePrivateDataSlotEXT");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_private_data_slot_ext(VkDevice device, VkPrivateDataSlotEXT private_data_slot,
                                 const VkAllocationCallbacks* p_allocator) __asm("vkDestroyPrivateDataSlotEXT");

VKAPI_ATTR VkResult VKAPI_CALL vk_set_private_data_ext(VkDevice device, VkObjectType object_type,
                                                       uint64_t object_handle, VkPrivateDataSlotEXT private_data_slot,
                                                       uint64_t data) __asm("vkSetPrivateDataEXT");

VKAPI_ATTR void VKAPI_CALL vk_get_private_data_ext(VkDevice device, VkObjectType object_type, uint64_t object_handle,
                                                   VkPrivateDataSlotEXT private_data_slot,
                                                   uint64_t*            p_data) __asm("vkGetPrivateDataEXT");
#endif

#define vk_ext_pipeline_creation_cache_control 1
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION 3
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME "VK_EXT_pipeline_creation_cache_control"
typedef struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        pipeline_creation_cache_control;
} VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;

#define vk_nv_device_diagnostics_config 1
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION 1
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME "VK_NV_device_diagnostics_config"

typedef enum VkDeviceDiagnosticsConfigFlagBitsNV {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV     = 0x00000001,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV     = 0x00000002,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004,
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV               = 0x7fffffff
} VkDeviceDiagnosticsConfigFlagBitsNV;
typedef VkFlags VkDeviceDiagnosticsConfigFlagsNV;
typedef struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        diagnostics_config;
} VkPhysicalDeviceDiagnosticsConfigFeaturesNV;

typedef struct VkDeviceDiagnosticsConfigCreateInfoNV {
    VkStructureType                  s_type;
    const void*                      p_next;
    VkDeviceDiagnosticsConfigFlagsNV flags;
} VkDeviceDiagnosticsConfigCreateInfoNV;

#define vk_qcom_render_pass_store_ops 1
#define vk_qcom_render_pass_store_ops_spec_version 2
#define vk_qcom_render_pass_store_ops_extension_name "VK_QCOM_render_pass_store_ops"

#define vk_ext_fragment_density_map2 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME "VK_EXT_fragment_density_map2"
typedef struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        fragment_density_map_deferred;
} VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        subsampled_loads;
    VkBool32        subsampled_coarse_reconstruction_early_access;
    uint32_t        max_subsampled_array_layers;
    uint32_t        max_descriptor_set_subsampled_samplers;
} VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;

#define vk_ext_image_robustness 1
#define VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION 1
#define VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME "VK_EXT_image_robustness"
typedef struct VkPhysicalDeviceImageRobustnessFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        robust_image_access;
} VkPhysicalDeviceImageRobustnessFeaturesEXT;

#define vk_ext_4444_formats 1
#define VK_EXT_4444_FORMATS_SPEC_VERSION 1
#define VK_EXT_4444_FORMATS_EXTENSION_NAME "VK_EXT_4444_formats"
typedef struct VkPhysicalDevice4444FormatsFeaturesEXT {
    VkStructureType s_type;
    void*           p_next;
    VkBool32        format_a4r4g4b4;
    VkBool32        format_a4b4g4r4;
} VkPhysicalDevice4444FormatsFeaturesEXT;

#ifdef __cplusplus
}
#endif

#endif
