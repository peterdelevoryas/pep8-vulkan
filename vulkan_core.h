#ifndef VULKAN_CORE_H_
#define VULKAN_CORE_H_ 1

/*
** copyright (c) 2015-2020 the khronos group inc.
**
** SPDX-license-identifier: apache-2.0
*/

/*
** this header is generated from the khronos vulkan XML API registry.
**
*/

#ifdef __cplusplus
extern "C" {
#endif

#define VK_VERSION_1_0 1
#include "vk_platform.h"

#define VK_DEFINE_HANDLE(object) typedef struct object##_T* object;

#if !defined(VK_DEFINE_NON_DISPATCHABLE_HANDLE)
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__)) || defined(_M_X64)            \
    || defined(__ia64) || defined(_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
#define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T* object;
#else
#define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
#endif
#endif

#define VK_MAKE_VERSION(major, minor, patch)                                                                           \
    ((((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))

// DEPRECATED: this define has been removed. specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION
// macro, should be used instead.
//#define VK_API_VERSION VK_MAKE_VERSION(1, 0, 0) // patch version should always be set to 0

// vulkan 1.0 version number
#define VK_API_VERSION_1_0 VK_MAKE_VERSION(1, 0, 0) // patch version should always be set to 0

// version of this file
#define VK_HEADER_VERSION 154

// complete version of this file
#define VK_HEADER_VERSION_COMPLETE VK_MAKE_VERSION(1, 2, VK_HEADER_VERSION)

#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22)
#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3ff)
#define VK_VERSION_PATCH(version) ((uint32_t)(version) &0xfff)

#define VK_NULL_HANDLE 0

typedef uint32_t vk_bool32;
typedef uint64_t vk_device_address;
typedef uint64_t vk_device_size;
typedef uint32_t vk_flags;
typedef uint32_t vk_sample_mask;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_buffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_image)
VK_DEFINE_HANDLE(vk_instance)
VK_DEFINE_HANDLE(vk_physical_device)
VK_DEFINE_HANDLE(vk_device)
VK_DEFINE_HANDLE(vk_queue)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_semaphore)
VK_DEFINE_HANDLE(vk_command_buffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_fence)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_device_memory)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_event)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_query_pool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_buffer_view)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_image_view)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_shader_module)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_pipeline_cache)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_pipeline_layout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_pipeline)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_render_pass)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_descriptor_set_layout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_sampler)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_descriptor_set)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_descriptor_pool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_framebuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_command_pool)
#define VK_ATTACHMENT_UNUSED (~0U)
#define VK_FALSE 0
#define VK_LOD_CLAMP_NONE 1000.0f
#define VK_QUEUE_FAMILY_IGNORED (~0U)
#define VK_REMAINING_ARRAY_LAYERS (~0U)
#define VK_REMAINING_MIP_LEVELS (~0U)
#define VK_SUBPASS_EXTERNAL (~0U)
#define VK_TRUE 1
#define VK_WHOLE_SIZE (~0ULL)
#define VK_MAX_MEMORY_TYPES 32
#define VK_MAX_MEMORY_HEAPS 16
#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256
#define VK_UUID_SIZE 16
#define VK_MAX_EXTENSION_NAME_SIZE 256
#define VK_MAX_DESCRIPTION_SIZE 256

typedef enum vk_result {
    VK_SUCCESS                                            = 0,
    VK_NOT_READY                                          = 1,
    VK_TIMEOUT                                            = 2,
    VK_EVENT_SET                                          = 3,
    VK_EVENT_RESET                                        = 4,
    VK_INCOMPLETE                                         = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY                           = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY                         = -2,
    VK_ERROR_INITIALIZATION_FAILED                        = -3,
    VK_ERROR_DEVICE_LOST                                  = -4,
    VK_ERROR_MEMORY_MAP_FAILED                            = -5,
    VK_ERROR_LAYER_NOT_PRESENT                            = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT                        = -7,
    VK_ERROR_FEATURE_NOT_PRESENT                          = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER                          = -9,
    VK_ERROR_TOO_MANY_OBJECTS                             = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED                         = -11,
    VK_ERROR_FRAGMENTED_POOL                              = -12,
    VK_ERROR_UNKNOWN                                      = -13,
    VK_ERROR_OUT_OF_POOL_MEMORY                           = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE                      = -1000072003,
    VK_ERROR_FRAGMENTATION                                = -1000161000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS               = -1000257000,
    VK_ERROR_SURFACE_LOST_KHR                             = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR                     = -1000000001,
    VK_SUBOPTIMAL_KHR                                     = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR                              = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR                     = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT                        = -1000011001,
    VK_ERROR_INVALID_SHADER_NV                            = -1000012000,
    VK_ERROR_INCOMPATIBLE_VERSION_KHR                     = -1000150000,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_NOT_PERMITTED_EXT                            = -1000174001,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT          = -1000255000,
    VK_THREAD_IDLE_KHR                                    = 1000268000,
    VK_THREAD_DONE_KHR                                    = 1000268001,
    VK_OPERATION_DEFERRED_KHR                             = 1000268002,
    VK_OPERATION_NOT_DEFERRED_KHR                         = 1000268003,
    VK_PIPELINE_COMPILE_REQUIRED_EXT                      = 1000297000,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR                       = VK_ERROR_OUT_OF_POOL_MEMORY,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR                  = VK_ERROR_INVALID_EXTERNAL_HANDLE,
    VK_ERROR_FRAGMENTATION_EXT                            = VK_ERROR_FRAGMENTATION,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT                   = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR           = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT                = VK_PIPELINE_COMPILE_REQUIRED_EXT,
    VK_RESULT_MAX_ENUM                                    = 0x7fffffff
} vk_result;

typedef enum vk_structure_type {
    VK_STRUCTURE_TYPE_APPLICATION_INFO                                                = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO                                            = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO                                        = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO                                              = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO                                                     = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO                                            = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE                                             = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO                                                = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO                                               = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO                                           = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO                                               = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO                                          = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO                                              = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO                                         = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO                                               = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO                                          = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO                                       = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO                                      = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO                               = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                         = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO                       = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO                         = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO                             = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO                        = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                          = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                        = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                          = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO                              = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO                                   = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO                                    = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO                                     = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO                                             = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO                               = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO                                     = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO                                    = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET                                            = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET                                             = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO                                         = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO                                         = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO                                        = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO                                    = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO                                 = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO                                       = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO                                          = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER                                           = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER                                            = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER                                                  = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO                                     = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO                                       = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES                             = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO                                         = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO                                          = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES                          = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS                                   = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO                                  = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO                                      = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO                             = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO                          = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO                                        = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO                                   = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO                            = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO                             = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES                                = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO                                 = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2                               = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2                                = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2                         = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2                                           = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2                              = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2                                      = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2                                    = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2                                             = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2                                       = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2                             = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2                                       = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2                             = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2                                = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2                      = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES                       = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO                 = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO                                    = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO           = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO                               = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES                              = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES                            = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES                      = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO                                           = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES                       = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES                     = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2                                             = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO                            = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO                                   = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO                                    = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO                            = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES               = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES                = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO                          = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO                      = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES                                = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO                            = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES                                      = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES                                   = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO                              = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO                               = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO                                     = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO                             = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES                                       = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO                                        = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO                                    = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO                         = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES                                   = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES                        = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT                                   = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES                 = 1000063000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES                             = 49,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES                           = 50,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES                             = 51,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES                           = 52,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO                                   = 1000147000,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2                                        = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2                                          = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2                                           = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2                                            = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2                                       = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO                                              = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO                                                = 1000109006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES                           = 1000177000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES                               = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES                    = 1000180000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES                    = 1000082000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES                       = 1000197000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO                 = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES                    = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES                  = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO          = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT         = 1000161004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES                = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE                       = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES                    = 1000221000,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO                                 = 1000246000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES                = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO                              = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES                    = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES                  = 1000108000,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO                             = 1000108001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO                               = 1000108002,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO                               = 1000108003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES         = 1000253000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES         = 1000175000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES         = 1000241000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT                             = 1000241001,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT                           = 1000241002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES                       = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES                     = 1000207000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES                   = 1000207001,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO                                      = 1000207002,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO                                  = 1000207003,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO                                             = 1000207004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO                                           = 1000207005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES                  = 1000257000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO                                      = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO                       = 1000257002,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO                     = 1000257003,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO                       = 1000257004,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR                                       = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR                                                = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR                           = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR                                 = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR                            = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR                                     = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR                                   = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR                          = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR                                    = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR                                 = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR                                        = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR                                    = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR                                     = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR                                 = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR                                 = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR                                   = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT                           = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD            = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT                               = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT                                = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT                                    = 1000022002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV                       = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV                      = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV                    = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT                 = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT               = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT             = 1000028002,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX                                      = 1000030000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX                               = 1000030001,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD                        = 1000041000,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP                       = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV                = 1000050000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV                            = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV                                  = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV                              = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV                              = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV                       = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT                                            = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN                                       = 1000062000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT       = 1000066000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT                                 = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT                        = 1000067001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR                             = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR                             = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR                              = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR                                = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR                                       = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR                                        = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR                                          = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR                      = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                          = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                          = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR                                     = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR                             = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR                                    = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR                                       = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR                  = 1000080000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT       = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT              = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT                            = 1000081002,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR                                             = 1000084000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV                = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT                                      = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT                                          = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT                                           = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT                                          = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT                               = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE                                       = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX    = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV                  = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT                = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT                = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT       = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT       = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT                  = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT         = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT                                                = 1000105000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR                         = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR                              = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR                              = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR                                 = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR                                        = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR                                           = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR                  = 1000116000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR                = 1000116001,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR                          = 1000116002,
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR                               = 1000116003,
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR                                 = 1000116004,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR                                         = 1000116005,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR                             = 1000116006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR                              = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR                                      = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR                                            = 1000119002,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR                                        = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR                                  = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR                                   = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR                                        = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR                                = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK                                     = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK                                   = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT                                = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT                                 = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT                                           = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT                         = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT                           = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID                           = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID                      = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID               = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                     = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                 = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID                                         = 1000129005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT               = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT             = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT                   = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT            = 1000138003,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT                                       = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT                     = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT                 = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT                 = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT                                      = 1000143004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT           = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT         = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT             = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV                 = 1000149000,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR                     = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR                 = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR                  = 1000150000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR            = 1000150001,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR                  = 1000150002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR                  = 1000150003,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR              = 1000150004,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR              = 1000150005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR                             = 1000150006,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR             = 1000150008,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR                              = 1000150009,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR                            = 1000150010,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR                  = 1000150011,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR                  = 1000150012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR                        = 1000150013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR                      = 1000150014,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR                            = 1000150015,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR                        = 1000150016,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR                          = 1000150017,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR                  = 1000150018,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV               = 1000152000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV                  = 1000154000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV                = 1000154001,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT                         = 1000158000,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                              = 1000158001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT              = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT                  = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT              = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                        = 1000158005,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT                                = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT                  = 1000160001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR                 = 1000163000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR               = 1000163001,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV       = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV                  = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV                = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV      = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV                             = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV                           = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV                                                     = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV                                           = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV                                                = 1000165005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV              = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV                       = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV                         = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV                                  = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV        = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV      = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT                = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT             = 1000170001,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT                    = 1000174000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT                             = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT                              = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT             = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR                       = 1000181000,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD                       = 1000183000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT                                   = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD                      = 1000185000,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD                    = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT         = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT             = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT           = 1000190002,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP                                         = 1000191000,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT                      = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV          = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV                         = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV                       = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV         = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV              = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV        = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV                   = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV                                              = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV                           = 1000206001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL       = 1000209000,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL                  = 1000210000,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL                           = 1000210001,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL                                   = 1000210002,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL                            = 1000210003,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL                                 = 1000210004,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL                    = 1000210005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT                     = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD                     = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD                    = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA                           = 1000214000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT                                   = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT               = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT             = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT                = 1000218002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT            = 1000225000,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT    = 1000225001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT              = 1000225002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD                    = 1000227000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD                    = 1000229000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT                    = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT                    = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT                               = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR                              = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT              = 1000244000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT                           = 1000244002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT                             = 1000245000,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT                                         = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV                  = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV                                = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV                = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV             = 1000250000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV                = 1000250001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV                        = 1000250002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT          = 1000251000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT                 = 1000252000,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT                          = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT                  = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT                    = 1000255001,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT                                = 1000256000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT                 = 1000259000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT               = 1000259001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT               = 1000259002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT                = 1000260000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT                   = 1000265000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT             = 1000267000,
    VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR                                     = 1000268000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR     = 1000269000,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR                                               = 1000269001,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR                              = 1000269002,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR                                    = 1000269003,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR                               = 1000269004,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR                 = 1000269005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV         = 1000277000,
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV                            = 1000277001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV                  = 1000277002,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV                               = 1000277003,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV                         = 1000277004,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV                                      = 1000277005,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV                  = 1000277006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV           = 1000277007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT             = 1000281000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT           = 1000281001,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM      = 1000282000,
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM                           = 1000282001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT                       = 1000286000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT                     = 1000286001,
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT                     = 1000287000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT              = 1000287001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT                = 1000287002,
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR                                = 1000290000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT                       = 1000295000,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT                             = 1000295001,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT                               = 1000295002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT    = 1000297000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV                  = 1000300000,
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV                        = 1000300001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT             = 1000332000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT           = 1000332001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT                   = 1000335000,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR                                          = 1000337000,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR                                           = 1000337001,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR                                 = 1000337002,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR                                 = 1000337003,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR                                           = 1000337004,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR                                        = 1000337005,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR                                               = 1000337006,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR                                                = 1000337007,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR                                                = 1000337008,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR                                         = 1000337009,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR                                             = 1000337010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT                       = 1000340000,
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT                                = 1000346000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT           = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR  = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR           = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR         = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR                  = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR            = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR  = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR            = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR  = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR     = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR          = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR =
        VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR             = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR        = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR  = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR     = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR      = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR     = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR           = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR        = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR   = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR    = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR          = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR  = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR   = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR   = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR            = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR              = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR               = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR                = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR           = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR                  = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR                    = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR           = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR            = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR  = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR  = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR   = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR =
        VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR                = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR   = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR        = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR        = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR         = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR  = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT =
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT =
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT =
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV =
        VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV =
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR =
        VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR     = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR            = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR          = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR =
        VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT      = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR =
        VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR =
        VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR =
        VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT =
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7fffffff
} vk_structure_type;

typedef enum vk_image_layout {
    VK_IMAGE_LAYOUT_UNDEFINED                                  = 0,
    VK_IMAGE_LAYOUT_GENERAL                                    = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL                   = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL           = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL            = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL                   = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL                       = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL                       = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED                             = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL                   = 1000241000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL                    = 1000241001,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL                 = 1000241002,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL                  = 1000241003,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR                            = 1000001002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR                         = 1000111000,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV                    = 1000164003,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT           = 1000218000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR =
        VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR =
        VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR   = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR    = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR  = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_MAX_ENUM                       = 0x7fffffff
} vk_image_layout;

typedef enum vk_object_type {
    VK_OBJECT_TYPE_UNKNOWN                         = 0,
    VK_OBJECT_TYPE_INSTANCE                        = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE                 = 2,
    VK_OBJECT_TYPE_DEVICE                          = 3,
    VK_OBJECT_TYPE_QUEUE                           = 4,
    VK_OBJECT_TYPE_SEMAPHORE                       = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER                  = 6,
    VK_OBJECT_TYPE_FENCE                           = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY                   = 8,
    VK_OBJECT_TYPE_BUFFER                          = 9,
    VK_OBJECT_TYPE_IMAGE                           = 10,
    VK_OBJECT_TYPE_EVENT                           = 11,
    VK_OBJECT_TYPE_QUERY_POOL                      = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW                     = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW                      = 14,
    VK_OBJECT_TYPE_SHADER_MODULE                   = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE                  = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT                 = 17,
    VK_OBJECT_TYPE_RENDER_PASS                     = 18,
    VK_OBJECT_TYPE_PIPELINE                        = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT           = 20,
    VK_OBJECT_TYPE_SAMPLER                         = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL                 = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET                  = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER                     = 24,
    VK_OBJECT_TYPE_COMMAND_POOL                    = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION        = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE      = 1000085000,
    VK_OBJECT_TYPE_SURFACE_KHR                     = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR                   = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR                     = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR                = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT       = 1000011000,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT       = 1000128000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR      = 1000165000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT            = 1000160000,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR          = 1000268000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV     = 1000277000,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT           = 1000295000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR  = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR    = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV       = VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
    VK_OBJECT_TYPE_MAX_ENUM                        = 0x7fffffff
} vk_object_type;

typedef enum vk_vendor_id {
    VK_VENDOR_ID_VIV      = 0x10001,
    VK_VENDOR_ID_VSI      = 0x10002,
    VK_VENDOR_ID_KAZAN    = 0x10003,
    VK_VENDOR_ID_CODEPLAY = 0x10004,
    VK_VENDOR_ID_MESA     = 0x10005,
    VK_VENDOR_ID_MAX_ENUM = 0x7fffffff
} vk_vendor_id;

typedef enum vk_pipeline_cache_header_version {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE      = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7fffffff
} vk_pipeline_cache_header_version;

typedef enum vk_system_allocation_scope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND  = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT   = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE    = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE   = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7fffffff
} vk_system_allocation_scope;

typedef enum vk_internal_allocation_type {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM   = 0x7fffffff
} vk_internal_allocation_type;

typedef enum vk_format {
    VK_FORMAT_UNDEFINED                                      = 0,
    VK_FORMAT_R4G4_UNORM_PACK8                               = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16                          = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16                          = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16                            = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16                            = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16                          = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16                          = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16                          = 8,
    VK_FORMAT_R8_UNORM                                       = 9,
    VK_FORMAT_R8_SNORM                                       = 10,
    VK_FORMAT_R8_USCALED                                     = 11,
    VK_FORMAT_R8_SSCALED                                     = 12,
    VK_FORMAT_R8_UINT                                        = 13,
    VK_FORMAT_R8_SINT                                        = 14,
    VK_FORMAT_R8_SRGB                                        = 15,
    VK_FORMAT_R8G8_UNORM                                     = 16,
    VK_FORMAT_R8G8_SNORM                                     = 17,
    VK_FORMAT_R8G8_USCALED                                   = 18,
    VK_FORMAT_R8G8_SSCALED                                   = 19,
    VK_FORMAT_R8G8_UINT                                      = 20,
    VK_FORMAT_R8G8_SINT                                      = 21,
    VK_FORMAT_R8G8_SRGB                                      = 22,
    VK_FORMAT_R8G8B8_UNORM                                   = 23,
    VK_FORMAT_R8G8B8_SNORM                                   = 24,
    VK_FORMAT_R8G8B8_USCALED                                 = 25,
    VK_FORMAT_R8G8B8_SSCALED                                 = 26,
    VK_FORMAT_R8G8B8_UINT                                    = 27,
    VK_FORMAT_R8G8B8_SINT                                    = 28,
    VK_FORMAT_R8G8B8_SRGB                                    = 29,
    VK_FORMAT_B8G8R8_UNORM                                   = 30,
    VK_FORMAT_B8G8R8_SNORM                                   = 31,
    VK_FORMAT_B8G8R8_USCALED                                 = 32,
    VK_FORMAT_B8G8R8_SSCALED                                 = 33,
    VK_FORMAT_B8G8R8_UINT                                    = 34,
    VK_FORMAT_B8G8R8_SINT                                    = 35,
    VK_FORMAT_B8G8R8_SRGB                                    = 36,
    VK_FORMAT_R8G8B8A8_UNORM                                 = 37,
    VK_FORMAT_R8G8B8A8_SNORM                                 = 38,
    VK_FORMAT_R8G8B8A8_USCALED                               = 39,
    VK_FORMAT_R8G8B8A8_SSCALED                               = 40,
    VK_FORMAT_R8G8B8A8_UINT                                  = 41,
    VK_FORMAT_R8G8B8A8_SINT                                  = 42,
    VK_FORMAT_R8G8B8A8_SRGB                                  = 43,
    VK_FORMAT_B8G8R8A8_UNORM                                 = 44,
    VK_FORMAT_B8G8R8A8_SNORM                                 = 45,
    VK_FORMAT_B8G8R8A8_USCALED                               = 46,
    VK_FORMAT_B8G8R8A8_SSCALED                               = 47,
    VK_FORMAT_B8G8R8A8_UINT                                  = 48,
    VK_FORMAT_B8G8R8A8_SINT                                  = 49,
    VK_FORMAT_B8G8R8A8_SRGB                                  = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32                          = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32                          = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32                        = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32                        = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32                           = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32                           = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32                           = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32                       = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32                       = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32                     = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32                     = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32                        = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32                        = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32                       = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32                       = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32                     = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32                     = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32                        = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32                        = 69,
    VK_FORMAT_R16_UNORM                                      = 70,
    VK_FORMAT_R16_SNORM                                      = 71,
    VK_FORMAT_R16_USCALED                                    = 72,
    VK_FORMAT_R16_SSCALED                                    = 73,
    VK_FORMAT_R16_UINT                                       = 74,
    VK_FORMAT_R16_SINT                                       = 75,
    VK_FORMAT_R16_SFLOAT                                     = 76,
    VK_FORMAT_R16G16_UNORM                                   = 77,
    VK_FORMAT_R16G16_SNORM                                   = 78,
    VK_FORMAT_R16G16_USCALED                                 = 79,
    VK_FORMAT_R16G16_SSCALED                                 = 80,
    VK_FORMAT_R16G16_UINT                                    = 81,
    VK_FORMAT_R16G16_SINT                                    = 82,
    VK_FORMAT_R16G16_SFLOAT                                  = 83,
    VK_FORMAT_R16G16B16_UNORM                                = 84,
    VK_FORMAT_R16G16B16_SNORM                                = 85,
    VK_FORMAT_R16G16B16_USCALED                              = 86,
    VK_FORMAT_R16G16B16_SSCALED                              = 87,
    VK_FORMAT_R16G16B16_UINT                                 = 88,
    VK_FORMAT_R16G16B16_SINT                                 = 89,
    VK_FORMAT_R16G16B16_SFLOAT                               = 90,
    VK_FORMAT_R16G16B16A16_UNORM                             = 91,
    VK_FORMAT_R16G16B16A16_SNORM                             = 92,
    VK_FORMAT_R16G16B16A16_USCALED                           = 93,
    VK_FORMAT_R16G16B16A16_SSCALED                           = 94,
    VK_FORMAT_R16G16B16A16_UINT                              = 95,
    VK_FORMAT_R16G16B16A16_SINT                              = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT                            = 97,
    VK_FORMAT_R32_UINT                                       = 98,
    VK_FORMAT_R32_SINT                                       = 99,
    VK_FORMAT_R32_SFLOAT                                     = 100,
    VK_FORMAT_R32G32_UINT                                    = 101,
    VK_FORMAT_R32G32_SINT                                    = 102,
    VK_FORMAT_R32G32_SFLOAT                                  = 103,
    VK_FORMAT_R32G32B32_UINT                                 = 104,
    VK_FORMAT_R32G32B32_SINT                                 = 105,
    VK_FORMAT_R32G32B32_SFLOAT                               = 106,
    VK_FORMAT_R32G32B32A32_UINT                              = 107,
    VK_FORMAT_R32G32B32A32_SINT                              = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT                            = 109,
    VK_FORMAT_R64_UINT                                       = 110,
    VK_FORMAT_R64_SINT                                       = 111,
    VK_FORMAT_R64_SFLOAT                                     = 112,
    VK_FORMAT_R64G64_UINT                                    = 113,
    VK_FORMAT_R64G64_SINT                                    = 114,
    VK_FORMAT_R64G64_SFLOAT                                  = 115,
    VK_FORMAT_R64G64B64_UINT                                 = 116,
    VK_FORMAT_R64G64B64_SINT                                 = 117,
    VK_FORMAT_R64G64B64_SFLOAT                               = 118,
    VK_FORMAT_R64G64B64A64_UINT                              = 119,
    VK_FORMAT_R64G64B64A64_SINT                              = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT                            = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32                        = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                         = 123,
    VK_FORMAT_D16_UNORM                                      = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32                            = 125,
    VK_FORMAT_D32_SFLOAT                                     = 126,
    VK_FORMAT_S8_UINT                                        = 127,
    VK_FORMAT_D16_UNORM_S8_UINT                              = 128,
    VK_FORMAT_D24_UNORM_S8_UINT                              = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT                             = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK                            = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK                             = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK                           = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK                            = 134,
    VK_FORMAT_BC2_UNORM_BLOCK                                = 135,
    VK_FORMAT_BC2_SRGB_BLOCK                                 = 136,
    VK_FORMAT_BC3_UNORM_BLOCK                                = 137,
    VK_FORMAT_BC3_SRGB_BLOCK                                 = 138,
    VK_FORMAT_BC4_UNORM_BLOCK                                = 139,
    VK_FORMAT_BC4_SNORM_BLOCK                                = 140,
    VK_FORMAT_BC5_UNORM_BLOCK                                = 141,
    VK_FORMAT_BC5_SNORM_BLOCK                                = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK                              = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK                              = 144,
    VK_FORMAT_BC7_UNORM_BLOCK                                = 145,
    VK_FORMAT_BC7_SRGB_BLOCK                                 = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                        = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                         = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                      = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                       = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                      = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                       = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK                            = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK                            = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK                         = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK                         = 156,
    vk_format_astc_4x4_unorm_block                           = 157,
    vk_format_astc_4x4_srgb_block                            = 158,
    vk_format_astc_5x4_unorm_block                           = 159,
    vk_format_astc_5x4_srgb_block                            = 160,
    vk_format_astc_5x5_unorm_block                           = 161,
    vk_format_astc_5x5_srgb_block                            = 162,
    vk_format_astc_6x5_unorm_block                           = 163,
    vk_format_astc_6x5_srgb_block                            = 164,
    vk_format_astc_6x6_unorm_block                           = 165,
    vk_format_astc_6x6_srgb_block                            = 166,
    vk_format_astc_8x5_unorm_block                           = 167,
    vk_format_astc_8x5_srgb_block                            = 168,
    vk_format_astc_8x6_unorm_block                           = 169,
    vk_format_astc_8x6_srgb_block                            = 170,
    vk_format_astc_8x8_unorm_block                           = 171,
    vk_format_astc_8x8_srgb_block                            = 172,
    vk_format_astc_10x5_unorm_block                          = 173,
    vk_format_astc_10x5_srgb_block                           = 174,
    vk_format_astc_10x6_unorm_block                          = 175,
    vk_format_astc_10x6_srgb_block                           = 176,
    vk_format_astc_10x8_unorm_block                          = 177,
    vk_format_astc_10x8_srgb_block                           = 178,
    vk_format_astc_10x10_unorm_block                         = 179,
    vk_format_astc_10x10_srgb_block                          = 180,
    vk_format_astc_12x10_unorm_block                         = 181,
    vk_format_astc_12x10_srgb_block                          = 182,
    vk_format_astc_12x12_unorm_block                         = 183,
    vk_format_astc_12x12_srgb_block                          = 184,
    VK_FORMAT_G8B8G8R8_422_UNORM                             = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM                             = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM                      = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM                       = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM                      = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM                       = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM                      = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16                             = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16                       = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16             = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16         = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16         = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16     = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16      = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16     = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16      = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16     = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16                             = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16                       = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16             = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16         = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16         = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16     = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16      = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16     = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16      = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16     = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM                         = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM                         = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM                   = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM                    = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM                   = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM                    = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM                   = 1000156033,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG                    = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG                    = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG                    = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG                    = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG                     = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG                     = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG                     = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG                     = 1000054007,
    vk_format_astc_4x4_sfloat_block_ext                      = 1000066000,
    vk_format_astc_5x4_sfloat_block_ext                      = 1000066001,
    vk_format_astc_5x5_sfloat_block_ext                      = 1000066002,
    vk_format_astc_6x5_sfloat_block_ext                      = 1000066003,
    vk_format_astc_6x6_sfloat_block_ext                      = 1000066004,
    vk_format_astc_8x5_sfloat_block_ext                      = 1000066005,
    vk_format_astc_8x6_sfloat_block_ext                      = 1000066006,
    vk_format_astc_8x8_sfloat_block_ext                      = 1000066007,
    vk_format_astc_10x5_sfloat_block_ext                     = 1000066008,
    vk_format_astc_10x6_sfloat_block_ext                     = 1000066009,
    vk_format_astc_10x8_sfloat_block_ext                     = 1000066010,
    vk_format_astc_10x10_sfloat_block_ext                    = 1000066011,
    vk_format_astc_12x10_sfloat_block_ext                    = 1000066012,
    vk_format_astc_12x12_sfloat_block_ext                    = 1000066013,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT                      = 1000340000,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT                      = 1000340001,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR                         = VK_FORMAT_G8B8G8R8_422_UNORM,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR                         = VK_FORMAT_B8G8R8G8_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR                  = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR                   = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR                  = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR                   = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR                  = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR                         = VK_FORMAT_R10X6_UNORM_PACK16,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR                   = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR         = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR     = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR     = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR  = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR  = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR                         = VK_FORMAT_R12X4_UNORM_PACK16,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR                   = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR         = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR     = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR     = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR  = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR  = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR                     = VK_FORMAT_G16B16G16R16_422_UNORM,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR                     = VK_FORMAT_B16G16R16G16_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR               = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR                = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR               = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR                = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR               = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    VK_FORMAT_MAX_ENUM                                       = 0x7fffffff
} vk_format;

typedef enum vk_image_tiling {
    VK_IMAGE_TILING_OPTIMAL                 = 0,
    VK_IMAGE_TILING_LINEAR                  = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    VK_IMAGE_TILING_MAX_ENUM                = 0x7fffffff
} vk_image_tiling;

typedef enum vk_image_type {
    VK_IMAGE_TYPE_1D       = 0,
    VK_IMAGE_TYPE_2D       = 1,
    VK_IMAGE_TYPE_3D       = 2,
    VK_IMAGE_TYPE_MAX_ENUM = 0x7fffffff
} vk_image_type;

typedef enum vk_physical_device_type {
    VK_PHYSICAL_DEVICE_TYPE_OTHER          = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU            = 4,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM       = 0x7fffffff
} vk_physical_device_type;

typedef enum vk_query_type {
    VK_QUERY_TYPE_OCCLUSION                                     = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS                           = 1,
    VK_QUERY_TYPE_TIMESTAMP                                     = 2,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT                 = 1000028004,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR                         = 1000116000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR     = 1000165000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL                       = 1000210000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR,
    VK_QUERY_TYPE_MAX_ENUM                                 = 0x7fffffff
} vk_query_type;

typedef enum vk_sharing_mode {
    VK_SHARING_MODE_EXCLUSIVE  = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_MAX_ENUM   = 0x7fffffff
} vk_sharing_mode;

typedef enum vk_component_swizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO     = 1,
    VK_COMPONENT_SWIZZLE_ONE      = 2,
    VK_COMPONENT_SWIZZLE_R        = 3,
    VK_COMPONENT_SWIZZLE_G        = 4,
    VK_COMPONENT_SWIZZLE_B        = 5,
    VK_COMPONENT_SWIZZLE_A        = 6,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7fffffff
} vk_component_swizzle;

typedef enum vk_image_view_type {
    VK_IMAGE_VIEW_TYPE_1D         = 0,
    VK_IMAGE_VIEW_TYPE_2D         = 1,
    VK_IMAGE_VIEW_TYPE_3D         = 2,
    VK_IMAGE_VIEW_TYPE_CUBE       = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY   = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY   = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM   = 0x7fffffff
} vk_image_view_type;

typedef enum vk_blend_factor {
    VK_BLEND_FACTOR_ZERO                     = 0,
    VK_BLEND_FACTOR_ONE                      = 1,
    VK_BLEND_FACTOR_SRC_COLOR                = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR      = 3,
    VK_BLEND_FACTOR_DST_COLOR                = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR      = 5,
    VK_BLEND_FACTOR_SRC_ALPHA                = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA      = 7,
    VK_BLEND_FACTOR_DST_ALPHA                = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA      = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR           = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA           = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE       = 14,
    VK_BLEND_FACTOR_SRC1_COLOR               = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR     = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA               = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA     = 18,
    VK_BLEND_FACTOR_MAX_ENUM                 = 0x7fffffff
} vk_blend_factor;

typedef enum vk_blend_op {
    VK_BLEND_OP_ADD                    = 0,
    VK_BLEND_OP_SUBTRACT               = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT       = 2,
    VK_BLEND_OP_MIN                    = 3,
    VK_BLEND_OP_MAX                    = 4,
    VK_BLEND_OP_ZERO_EXT               = 1000148000,
    VK_BLEND_OP_SRC_EXT                = 1000148001,
    VK_BLEND_OP_DST_EXT                = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT           = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT           = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT             = 1000148005,
    VK_BLEND_OP_DST_IN_EXT             = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT            = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT            = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT           = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT           = 1000148010,
    VK_BLEND_OP_XOR_EXT                = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT           = 1000148012,
    VK_BLEND_OP_SCREEN_EXT             = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT            = 1000148014,
    VK_BLEND_OP_DARKEN_EXT             = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT            = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT         = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT          = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT          = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT          = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT         = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT          = 1000148022,
    VK_BLEND_OP_INVERT_EXT             = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT         = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT        = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT         = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT         = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT        = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT           = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT            = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT            = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT     = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT          = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT     = 1000148034,
    VK_BLEND_OP_PLUS_EXT               = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT       = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT        = 1000148038,
    VK_BLEND_OP_MINUS_EXT              = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT      = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT           = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT         = 1000148042,
    VK_BLEND_OP_RED_EXT                = 1000148043,
    VK_BLEND_OP_GREEN_EXT              = 1000148044,
    VK_BLEND_OP_BLUE_EXT               = 1000148045,
    VK_BLEND_OP_MAX_ENUM               = 0x7fffffff
} vk_blend_op;

typedef enum vk_compare_op {
    VK_COMPARE_OP_NEVER            = 0,
    VK_COMPARE_OP_LESS             = 1,
    VK_COMPARE_OP_EQUAL            = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL    = 3,
    VK_COMPARE_OP_GREATER          = 4,
    VK_COMPARE_OP_NOT_EQUAL        = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS           = 7,
    VK_COMPARE_OP_MAX_ENUM         = 0x7fffffff
} vk_compare_op;

typedef enum vk_dynamic_state {
    VK_DYNAMIC_STATE_VIEWPORT                         = 0,
    VK_DYNAMIC_STATE_SCISSOR                          = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH                       = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS                       = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS                  = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS                     = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK             = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK               = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE                = 8,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV            = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT            = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT             = 1000143000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV  = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV             = 1000205001,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT                 = 1000259000,
    VK_DYNAMIC_STATE_CULL_MODE_EXT                    = 1000267000,
    VK_DYNAMIC_STATE_FRONT_FACE_EXT                   = 1000267001,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT           = 1000267002,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT          = 1000267003,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT           = 1000267004,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT  = 1000267005,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT            = 1000267006,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT           = 1000267007,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT             = 1000267008,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT     = 1000267009,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT          = 1000267010,
    VK_DYNAMIC_STATE_STENCIL_OP_EXT                   = 1000267011,
    VK_DYNAMIC_STATE_MAX_ENUM                         = 0x7fffffff
} vk_dynamic_state;

typedef enum vk_front_face {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE         = 1,
    VK_FRONT_FACE_MAX_ENUM          = 0x7fffffff
} vk_front_face;

typedef enum vk_vertex_input_rate {
    VK_VERTEX_INPUT_RATE_VERTEX   = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7fffffff
} vk_vertex_input_rate;

typedef enum vk_primitive_topology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST                    = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST                     = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP                    = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST                 = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP                = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN                  = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY      = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY     = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY  = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST                    = 10,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM                      = 0x7fffffff
} vk_primitive_topology;

typedef enum vk_polygon_mode {
    VK_POLYGON_MODE_FILL              = 0,
    VK_POLYGON_MODE_LINE              = 1,
    VK_POLYGON_MODE_POINT             = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_MAX_ENUM          = 0x7fffffff
} vk_polygon_mode;

typedef enum vk_stencil_op {
    VK_STENCIL_OP_KEEP                = 0,
    VK_STENCIL_OP_ZERO                = 1,
    VK_STENCIL_OP_REPLACE             = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT              = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP  = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP  = 7,
    VK_STENCIL_OP_MAX_ENUM            = 0x7fffffff
} vk_stencil_op;

typedef enum vk_logic_op {
    VK_LOGIC_OP_CLEAR         = 0,
    VK_LOGIC_OP_AND           = 1,
    VK_LOGIC_OP_AND_REVERSE   = 2,
    VK_LOGIC_OP_COPY          = 3,
    VK_LOGIC_OP_AND_INVERTED  = 4,
    VK_LOGIC_OP_NO_OP         = 5,
    VK_LOGIC_OP_XOR           = 6,
    VK_LOGIC_OP_OR            = 7,
    VK_LOGIC_OP_NOR           = 8,
    VK_LOGIC_OP_EQUIVALENT    = 9,
    VK_LOGIC_OP_INVERT        = 10,
    VK_LOGIC_OP_OR_REVERSE    = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED   = 13,
    VK_LOGIC_OP_NAND          = 14,
    VK_LOGIC_OP_SET           = 15,
    VK_LOGIC_OP_MAX_ENUM      = 0x7fffffff
} vk_logic_op;

typedef enum vk_border_color {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK   = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK      = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK        = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE      = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE        = 5,
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT        = 1000287003,
    VK_BORDER_COLOR_INT_CUSTOM_EXT          = 1000287004,
    VK_BORDER_COLOR_MAX_ENUM                = 0x7fffffff
} vk_border_color;

typedef enum vk_filter {
    VK_FILTER_NEAREST   = 0,
    VK_FILTER_LINEAR    = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
    VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
    VK_FILTER_MAX_ENUM  = 0x7fffffff
} vk_filter;

typedef enum vk_sampler_address_mode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT                   = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT          = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE            = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER          = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE     = 4,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM                 = 0x7fffffff
} vk_sampler_address_mode;

typedef enum vk_sampler_mipmap_mode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST  = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR   = 1,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7fffffff
} vk_sampler_mipmap_mode;

typedef enum vk_descriptor_type {
    VK_DESCRIPTOR_TYPE_SAMPLER                    = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER     = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE              = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE              = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER       = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER       = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER             = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER             = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC     = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC     = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT           = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT   = 1000138000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV  = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,
    VK_DESCRIPTOR_TYPE_MAX_ENUM                   = 0x7fffffff
} vk_descriptor_type;

typedef enum vk_attachment_load_op {
    VK_ATTACHMENT_LOAD_OP_LOAD      = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR     = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM  = 0x7fffffff
} vk_attachment_load_op;

typedef enum vk_attachment_store_op {
    VK_ATTACHMENT_STORE_OP_STORE     = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM  = 0x7fffffff
} vk_attachment_store_op;

typedef enum vk_pipeline_bind_point {
    VK_PIPELINE_BIND_POINT_GRAPHICS        = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE         = 1,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV  = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
    VK_PIPELINE_BIND_POINT_MAX_ENUM        = 0x7fffffff
} vk_pipeline_bind_point;

typedef enum vk_command_buffer_level {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY   = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM  = 0x7fffffff
} vk_command_buffer_level;

typedef enum vk_index_type {
    VK_INDEX_TYPE_UINT16    = 0,
    VK_INDEX_TYPE_UINT32    = 1,
    VK_INDEX_TYPE_NONE_KHR  = 1000165000,
    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
    VK_INDEX_TYPE_NONE_NV   = VK_INDEX_TYPE_NONE_KHR,
    VK_INDEX_TYPE_MAX_ENUM  = 0x7fffffff
} vk_index_type;

typedef enum vk_subpass_contents {
    VK_SUBPASS_CONTENTS_INLINE                    = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_MAX_ENUM                  = 0x7fffffff
} vk_subpass_contents;

typedef enum vk_access_flag_bits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT                 = 0x00000001,
    VK_ACCESS_INDEX_READ_BIT                            = 0x00000002,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT                 = 0x00000004,
    VK_ACCESS_UNIFORM_READ_BIT                          = 0x00000008,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT                 = 0x00000010,
    VK_ACCESS_SHADER_READ_BIT                           = 0x00000020,
    VK_ACCESS_SHADER_WRITE_BIT                          = 0x00000040,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT                 = 0x00000080,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT                = 0x00000100,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT         = 0x00000200,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT        = 0x00000400,
    VK_ACCESS_TRANSFER_READ_BIT                         = 0x00000800,
    VK_ACCESS_TRANSFER_WRITE_BIT                        = 0x00001000,
    VK_ACCESS_HOST_READ_BIT                             = 0x00002000,
    VK_ACCESS_HOST_WRITE_BIT                            = 0x00004000,
    VK_ACCESS_MEMORY_READ_BIT                           = 0x00008000,
    VK_ACCESS_MEMORY_WRITE_BIT                          = 0x00010000,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT          = 0x02000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT   = 0x04000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT  = 0x08000000,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT        = 0x00100000,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR       = 0x00200000,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR      = 0x00400000,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV            = 0x00800000,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT         = 0x01000000,
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV            = 0x00020000,
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV           = 0x00040000,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV        = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV       = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
    VK_ACCESS_FLAG_BITS_MAX_ENUM                        = 0x7fffffff
} vk_access_flag_bits;
typedef vk_flags vk_access_flags;

typedef enum vk_image_aspect_flag_bits {
    VK_IMAGE_ASPECT_COLOR_BIT              = 0x00000001,
    VK_IMAGE_ASPECT_DEPTH_BIT              = 0x00000002,
    VK_IMAGE_ASPECT_STENCIL_BIT            = 0x00000004,
    VK_IMAGE_ASPECT_METADATA_BIT           = 0x00000008,
    VK_IMAGE_ASPECT_PLANE_0_BIT            = 0x00000010,
    VK_IMAGE_ASPECT_PLANE_1_BIT            = 0x00000020,
    VK_IMAGE_ASPECT_PLANE_2_BIT            = 0x00000040,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR        = VK_IMAGE_ASPECT_PLANE_0_BIT,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR        = VK_IMAGE_ASPECT_PLANE_1_BIT,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR        = VK_IMAGE_ASPECT_PLANE_2_BIT,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM     = 0x7fffffff
} vk_image_aspect_flag_bits;
typedef vk_flags vk_image_aspect_flags;

typedef enum vk_format_feature_flag_bits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT                                                           = 0x00000001,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT                                                           = 0x00000002,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT                                                    = 0x00000004,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT                                                    = 0x00000008,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT                                                    = 0x00000010,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT                                             = 0x00000020,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT                                                           = 0x00000040,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT                                                        = 0x00000080,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT                                                  = 0x00000100,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT                                                = 0x00000200,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT                                                                = 0x00000400,
    VK_FORMAT_FEATURE_BLIT_DST_BIT                                                                = 0x00000800,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT                                             = 0x00001000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT                                                            = 0x00004000,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT                                                            = 0x00008000,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT                                                 = 0x00020000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT                            = 0x00040000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT           = 0x00080000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT           = 0x00100000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
    VK_FORMAT_FEATURE_DISJOINT_BIT                                                                = 0x00400000,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT                                                  = 0x00800000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT                                             = 0x00010000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG                                          = 0x00002000,
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR                                = 0x20000000,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT                                                = 0x01000000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR                = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR                = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR     = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR =
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR                   = VK_FORMAT_FEATURE_DISJOINT_BIT,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR     = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM                 = 0x7fffffff
} vk_format_feature_flag_bits;
typedef vk_flags vk_format_feature_flags;

typedef enum vk_image_create_flag_bits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT                        = 0x00000001,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT                      = 0x00000002,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT                        = 0x00000004,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT                        = 0x00000008,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT                       = 0x00000010,
    VK_IMAGE_CREATE_ALIAS_BIT                                 = 0x00000400,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT           = 0x00000040,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT                   = 0x00000020,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT           = 0x00000080,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT                        = 0x00000100,
    VK_IMAGE_CREATE_PROTECTED_BIT                             = 0x00000800,
    VK_IMAGE_CREATE_DISJOINT_BIT                              = 0x00000200,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV                     = 0x00002000,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT                        = 0x00004000,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR       = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR               = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR       = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR                    = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR                          = VK_IMAGE_CREATE_DISJOINT_BIT,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR                             = VK_IMAGE_CREATE_ALIAS_BIT,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM                        = 0x7fffffff
} vk_image_create_flag_bits;
typedef vk_flags vk_image_create_flags;

typedef enum vk_sample_count_flag_bits {
    VK_SAMPLE_COUNT_1_BIT              = 0x00000001,
    VK_SAMPLE_COUNT_2_BIT              = 0x00000002,
    VK_SAMPLE_COUNT_4_BIT              = 0x00000004,
    VK_SAMPLE_COUNT_8_BIT              = 0x00000008,
    VK_SAMPLE_COUNT_16_BIT             = 0x00000010,
    VK_SAMPLE_COUNT_32_BIT             = 0x00000020,
    VK_SAMPLE_COUNT_64_BIT             = 0x00000040,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_sample_count_flag_bits;
typedef vk_flags vk_sample_count_flags;

typedef enum vk_image_usage_flag_bits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT             = 0x00000001,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT             = 0x00000002,
    VK_IMAGE_USAGE_SAMPLED_BIT                  = 0x00000004,
    VK_IMAGE_USAGE_STORAGE_BIT                  = 0x00000008,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT         = 0x00000010,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT     = 0x00000040,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT         = 0x00000080,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV    = 0x00000100,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM           = 0x7fffffff
} vk_image_usage_flag_bits;
typedef vk_flags vk_image_usage_flags;
typedef vk_flags vk_instance_create_flags;

typedef enum vk_memory_heap_flag_bits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT       = 0x00000001,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT     = 0x00000002,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM     = 0x7fffffff
} vk_memory_heap_flag_bits;
typedef vk_flags vk_memory_heap_flags;

typedef enum vk_memory_property_flag_bits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT        = 0x00000001,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT        = 0x00000002,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT       = 0x00000004,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT         = 0x00000008,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT    = 0x00000010,
    VK_MEMORY_PROPERTY_PROTECTED_BIT           = 0x00000020,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM      = 0x7fffffff
} vk_memory_property_flag_bits;
typedef vk_flags vk_memory_property_flags;

typedef enum vk_queue_flag_bits {
    VK_QUEUE_GRAPHICS_BIT       = 0x00000001,
    VK_QUEUE_COMPUTE_BIT        = 0x00000002,
    VK_QUEUE_TRANSFER_BIT       = 0x00000004,
    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
    VK_QUEUE_PROTECTED_BIT      = 0x00000010,
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_queue_flag_bits;
typedef vk_flags vk_queue_flags;
typedef vk_flags vk_device_create_flags;

typedef enum vk_device_queue_create_flag_bits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT      = 0x00000001,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_device_queue_create_flag_bits;
typedef vk_flags vk_device_queue_create_flags;

typedef enum vk_pipeline_stage_flag_bits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT                      = 0x00000001,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT                    = 0x00000002,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT                     = 0x00000004,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT                    = 0x00000008,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT      = 0x00000010,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT   = 0x00000020,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT                  = 0x00000040,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT                  = 0x00000080,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT             = 0x00000100,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT              = 0x00000200,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT          = 0x00000400,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT                   = 0x00000800,
    VK_PIPELINE_STAGE_TRANSFER_BIT                         = 0x00001000,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT                   = 0x00002000,
    VK_PIPELINE_STAGE_HOST_BIT                             = 0x00004000,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT                     = 0x00008000,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT                     = 0x00010000,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT           = 0x01000000,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT        = 0x00040000,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR           = 0x00200000,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV            = 0x00400000,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV                   = 0x00080000,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV                   = 0x00100000,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT     = 0x00800000,
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV            = 0x00020000,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV            = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV  = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM                   = 0x7fffffff
} vk_pipeline_stage_flag_bits;
typedef vk_flags vk_pipeline_stage_flags;
typedef vk_flags vk_memory_map_flags;

typedef enum vk_sparse_memory_bind_flag_bits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT       = 0x00000001,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_sparse_memory_bind_flag_bits;
typedef vk_flags vk_sparse_memory_bind_flags;

typedef enum vk_sparse_image_format_flag_bits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT         = 0x00000001,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT       = 0x00000002,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM         = 0x7fffffff
} vk_sparse_image_format_flag_bits;
typedef vk_flags vk_sparse_image_format_flags;

typedef enum vk_fence_create_flag_bits {
    VK_FENCE_CREATE_SIGNALED_BIT       = 0x00000001,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_fence_create_flag_bits;
typedef vk_flags vk_fence_create_flags;
typedef vk_flags vk_semaphore_create_flags;
typedef vk_flags vk_event_create_flags;

typedef enum vk_query_pipeline_statistic_flag_bits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT                    = 0x00000001,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT                  = 0x00000002,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT                  = 0x00000004,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT                = 0x00000008,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT                 = 0x00000010,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT                       = 0x00000020,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT                        = 0x00000040,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT                = 0x00000080,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT        = 0x00000100,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT                 = 0x00000400,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM                             = 0x7fffffff
} vk_query_pipeline_statistic_flag_bits;
typedef vk_flags vk_query_pipeline_statistic_flags;
typedef vk_flags vk_query_pool_create_flags;

typedef enum vk_query_result_flag_bits {
    VK_QUERY_RESULT_64_BIT                = 0x00000001,
    VK_QUERY_RESULT_WAIT_BIT              = 0x00000002,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
    VK_QUERY_RESULT_PARTIAL_BIT           = 0x00000008,
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM    = 0x7fffffff
} vk_query_result_flag_bits;
typedef vk_flags vk_query_result_flags;

typedef enum vk_buffer_create_flag_bits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT                    = 0x00000001,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT                  = 0x00000002,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT                    = 0x00000004,
    VK_BUFFER_CREATE_PROTECTED_BIT                         = 0x00000008,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT     = 0x00000010,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM                    = 0x7fffffff
} vk_buffer_create_flag_bits;
typedef vk_flags vk_buffer_create_flags;

typedef enum vk_buffer_usage_flag_bits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT                          = 0x00000001,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT                          = 0x00000002,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT                  = 0x00000004,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT                  = 0x00000008,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT                        = 0x00000010,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT                        = 0x00000020,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT                          = 0x00000040,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT                         = 0x00000080,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT                       = 0x00000100,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT                 = 0x00020000,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT         = 0x00000800,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT             = 0x00000200,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR                       = 0x00000400,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV                        = VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT             = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR             = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM                        = 0x7fffffff
} vk_buffer_usage_flag_bits;
typedef vk_flags vk_buffer_usage_flags;
typedef vk_flags vk_buffer_view_create_flags;

typedef enum vk_image_view_create_flag_bits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT  = 0x00000001,
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 0x00000002,
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM                    = 0x7fffffff
} vk_image_view_create_flag_bits;
typedef vk_flags vk_image_view_create_flags;

typedef enum vk_shader_module_create_flag_bits {
    VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_shader_module_create_flag_bits;
typedef vk_flags vk_shader_module_create_flags;

typedef enum vk_pipeline_cache_create_flag_bits {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 0x00000001,
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM              = 0x7fffffff
} vk_pipeline_cache_create_flag_bits;
typedef vk_flags vk_pipeline_cache_create_flags;

typedef enum vk_color_component_flag_bits {
    VK_COLOR_COMPONENT_R_BIT              = 0x00000001,
    VK_COLOR_COMPONENT_G_BIT              = 0x00000002,
    VK_COLOR_COMPONENT_B_BIT              = 0x00000004,
    VK_COLOR_COMPONENT_A_BIT              = 0x00000008,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_color_component_flag_bits;
typedef vk_flags vk_color_component_flags;

typedef enum vk_pipeline_create_flag_bits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT                         = 0x00000001,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT                            = 0x00000002,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT                                   = 0x00000004,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT                 = 0x00000008,
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT                                = 0x00000010,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR      = 0x00004000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR  = 0x00008000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR         = 0x00010000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR               = 0x00001000,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR                   = 0x00002000,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV                             = 0x00000020,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR                       = 0x00000040,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR         = 0x00000080,
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV                         = 0x00040000,
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR                                  = 0x00000800,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT        = 0x00000100,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT                  = 0x00000200,
    VK_PIPELINE_CREATE_DISPATCH_BASE                                    = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR                    = VK_PIPELINE_CREATE_DISPATCH_BASE,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM                   = 0x7fffffff
} vk_pipeline_create_flag_bits;
typedef vk_flags vk_pipeline_create_flags;

typedef enum vk_pipeline_shader_stage_create_flag_bits {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000001,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT      = 0x00000002,
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM                  = 0x7fffffff
} vk_pipeline_shader_stage_create_flag_bits;
typedef vk_flags vk_pipeline_shader_stage_create_flags;

typedef enum vk_shader_stage_flag_bits {
    VK_SHADER_STAGE_VERTEX_BIT                  = 0x00000001,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT    = 0x00000002,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    VK_SHADER_STAGE_GEOMETRY_BIT                = 0x00000008,
    VK_SHADER_STAGE_FRAGMENT_BIT                = 0x00000010,
    VK_SHADER_STAGE_COMPUTE_BIT                 = 0x00000020,
    VK_SHADER_STAGE_ALL_GRAPHICS                = 0x0000001f,
    VK_SHADER_STAGE_ALL                         = 0x7fffffff,
    VK_SHADER_STAGE_RAYGEN_BIT_KHR              = 0x00000100,
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR             = 0x00000200,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR         = 0x00000400,
    VK_SHADER_STAGE_MISS_BIT_KHR                = 0x00000800,
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR        = 0x00001000,
    VK_SHADER_STAGE_CALLABLE_BIT_KHR            = 0x00002000,
    VK_SHADER_STAGE_TASK_BIT_NV                 = 0x00000040,
    VK_SHADER_STAGE_MESH_BIT_NV                 = 0x00000080,
    VK_SHADER_STAGE_RAYGEN_BIT_NV               = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
    VK_SHADER_STAGE_ANY_HIT_BIT_NV              = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV          = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
    VK_SHADER_STAGE_MISS_BIT_NV                 = VK_SHADER_STAGE_MISS_BIT_KHR,
    VK_SHADER_STAGE_INTERSECTION_BIT_NV         = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
    VK_SHADER_STAGE_CALLABLE_BIT_NV             = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM          = 0x7fffffff
} vk_shader_stage_flag_bits;

typedef enum vk_cull_mode_flag_bits {
    VK_CULL_MODE_NONE               = 0,
    VK_CULL_MODE_FRONT_BIT          = 0x00000001,
    VK_CULL_MODE_BACK_BIT           = 0x00000002,
    VK_CULL_MODE_FRONT_AND_BACK     = 0x00000003,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_cull_mode_flag_bits;
typedef vk_flags vk_cull_mode_flags;
typedef vk_flags vk_pipeline_vertex_input_state_create_flags;
typedef vk_flags vk_pipeline_input_assembly_state_create_flags;
typedef vk_flags vk_pipeline_tessellation_state_create_flags;
typedef vk_flags vk_pipeline_viewport_state_create_flags;
typedef vk_flags vk_pipeline_rasterization_state_create_flags;
typedef vk_flags vk_pipeline_multisample_state_create_flags;
typedef vk_flags vk_pipeline_depth_stencil_state_create_flags;
typedef vk_flags vk_pipeline_color_blend_state_create_flags;
typedef vk_flags vk_pipeline_dynamic_state_create_flags;
typedef vk_flags vk_pipeline_layout_create_flags;
typedef vk_flags vk_shader_stage_flags;

typedef enum vk_sampler_create_flag_bits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT                       = 0x00000001,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002,
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM                       = 0x7fffffff
} vk_sampler_create_flag_bits;
typedef vk_flags vk_sampler_create_flags;

typedef enum vk_descriptor_pool_create_flag_bits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT   = 0x00000001,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT     = 0x00000002,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM        = 0x7fffffff
} vk_descriptor_pool_create_flag_bits;
typedef vk_flags vk_descriptor_pool_create_flags;
typedef vk_flags vk_descriptor_pool_reset_flags;

typedef enum vk_descriptor_set_layout_create_flag_bits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR    = 0x00000001,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT =
        VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_descriptor_set_layout_create_flag_bits;
typedef vk_flags vk_descriptor_set_layout_create_flags;

typedef enum vk_attachment_description_flag_bits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT      = 0x00000001,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_attachment_description_flag_bits;
typedef vk_flags vk_attachment_description_flags;

typedef enum vk_dependency_flag_bits {
    VK_DEPENDENCY_BY_REGION_BIT        = 0x00000001,
    VK_DEPENDENCY_DEVICE_GROUP_BIT     = 0x00000004,
    VK_DEPENDENCY_VIEW_LOCAL_BIT       = 0x00000002,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR   = VK_DEPENDENCY_VIEW_LOCAL_BIT,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM   = 0x7fffffff
} vk_dependency_flag_bits;
typedef vk_flags vk_dependency_flags;

typedef enum vk_framebuffer_create_flag_bits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT      = 0x00000001,
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR  = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_framebuffer_create_flag_bits;
typedef vk_flags vk_framebuffer_create_flags;

typedef enum vk_render_pass_create_flag_bits {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002,
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_render_pass_create_flag_bits;
typedef vk_flags vk_render_pass_create_flags;

typedef enum vk_subpass_description_flag_bits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX      = 0x00000001,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM         = 0x00000004,
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM          = 0x00000008,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM               = 0x7fffffff
} vk_subpass_description_flag_bits;
typedef vk_flags vk_subpass_description_flags;

typedef enum vk_command_pool_create_flag_bits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT            = 0x00000001,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT            = 0x00000004,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} vk_command_pool_create_flag_bits;
typedef vk_flags vk_command_pool_create_flags;

typedef enum vk_command_pool_reset_flag_bits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM    = 0x7fffffff
} vk_command_pool_reset_flag_bits;
typedef vk_flags vk_command_pool_reset_flags;

typedef enum vk_command_buffer_usage_flag_bits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT      = 0x00000001,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT     = 0x00000004,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} vk_command_buffer_usage_flag_bits;
typedef vk_flags vk_command_buffer_usage_flags;

typedef enum vk_query_control_flag_bits {
    VK_QUERY_CONTROL_PRECISE_BIT        = 0x00000001,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_query_control_flag_bits;
typedef vk_flags vk_query_control_flags;

typedef enum vk_command_buffer_reset_flag_bits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM    = 0x7fffffff
} vk_command_buffer_reset_flag_bits;
typedef vk_flags vk_command_buffer_reset_flags;

typedef enum vk_stencil_face_flag_bits {
    VK_STENCIL_FACE_FRONT_BIT          = 0x00000001,
    VK_STENCIL_FACE_BACK_BIT           = 0x00000002,
    VK_STENCIL_FACE_FRONT_AND_BACK     = 0x00000003,
    VK_STENCIL_FRONT_AND_BACK          = VK_STENCIL_FACE_FRONT_AND_BACK,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_stencil_face_flag_bits;
typedef vk_flags vk_stencil_face_flags;
typedef struct vk_extent2d {
    uint32_t width;
    uint32_t height;
} vk_extent2d;

typedef struct vk_extent3d {
    uint32_t width;
    uint32_t height;
    uint32_t depth;
} vk_extent3d;

typedef struct vk_offset2d {
    int32_t x;
    int32_t y;
} vk_offset2d;

typedef struct vk_offset3d {
    int32_t x;
    int32_t y;
    int32_t z;
} vk_offset3d;

typedef struct vk_rect2d {
    vk_offset2d offset;
    vk_extent2d extent;
} vk_rect2d;

typedef struct vk_base_in_structure {
    vk_structure_type                  s_type;
    const struct vk_base_in_structure* p_next;
} vk_base_in_structure;

typedef struct vk_base_out_structure {
    vk_structure_type             s_type;
    struct vk_base_out_structure* p_next;
} vk_base_out_structure;

typedef struct vk_buffer_memory_barrier {
    vk_structure_type s_type;
    const void*       p_next;
    vk_access_flags   src_access_mask;
    vk_access_flags   dst_access_mask;
    uint32_t          src_queue_family_index;
    uint32_t          dst_queue_family_index;
    vk_buffer         buffer;
    vk_device_size    offset;
    vk_device_size    size;
} vk_buffer_memory_barrier;

typedef struct vk_dispatch_indirect_command {
    uint32_t x;
    uint32_t y;
    uint32_t z;
} vk_dispatch_indirect_command;

typedef struct vk_draw_indexed_indirect_command {
    uint32_t index_count;
    uint32_t instance_count;
    uint32_t first_index;
    int32_t  vertex_offset;
    uint32_t first_instance;
} vk_draw_indexed_indirect_command;

typedef struct vk_draw_indirect_command {
    uint32_t vertex_count;
    uint32_t instance_count;
    uint32_t first_vertex;
    uint32_t first_instance;
} vk_draw_indirect_command;

typedef struct vk_image_subresource_range {
    vk_image_aspect_flags aspect_mask;
    uint32_t              base_mip_level;
    uint32_t              level_count;
    uint32_t              base_array_layer;
    uint32_t              layer_count;
} vk_image_subresource_range;

typedef struct vk_image_memory_barrier {
    vk_structure_type          s_type;
    const void*                p_next;
    vk_access_flags            src_access_mask;
    vk_access_flags            dst_access_mask;
    vk_image_layout            old_layout;
    vk_image_layout            new_layout;
    uint32_t                   src_queue_family_index;
    uint32_t                   dst_queue_family_index;
    vk_image                   image;
    vk_image_subresource_range subresource_range;
} vk_image_memory_barrier;

typedef struct vk_memory_barrier {
    vk_structure_type s_type;
    const void*       p_next;
    vk_access_flags   src_access_mask;
    vk_access_flags   dst_access_mask;
} vk_memory_barrier;

typedef void*(VKAPI_PTR* pfn_vk_allocation_function)(void* p_user_data, size_t size, size_t alignment,
                                                     vk_system_allocation_scope allocation_scope);

typedef void(VKAPI_PTR* pfn_vk_free_function)(void* p_user_data, void* p_memory);

typedef void(VKAPI_PTR* pfn_vk_internal_allocation_notification)(void* p_user_data, size_t size,
                                                                 vk_internal_allocation_type allocation_type,
                                                                 vk_system_allocation_scope  allocation_scope);

typedef void(VKAPI_PTR* pfn_vk_internal_free_notification)(void* p_user_data, size_t size,
                                                           vk_internal_allocation_type allocation_type,
                                                           vk_system_allocation_scope  allocation_scope);

typedef void*(VKAPI_PTR* pfn_vk_reallocation_function)(void* p_user_data, void* p_original, size_t size,
                                                       size_t alignment, vk_system_allocation_scope allocation_scope);

typedef void(VKAPI_PTR* pfn_vk_void_function)(void);
typedef struct vk_allocation_callbacks {
    void*                                   p_user_data;
    pfn_vk_allocation_function              pfn_allocation;
    pfn_vk_reallocation_function            pfn_reallocation;
    pfn_vk_free_function                    pfn_free;
    pfn_vk_internal_allocation_notification pfn_internal_allocation;
    pfn_vk_internal_free_notification       pfn_internal_free;
} vk_allocation_callbacks;

typedef struct vk_application_info {
    vk_structure_type s_type;
    const void*       p_next;
    const char*       p_application_name;
    uint32_t          application_version;
    const char*       p_engine_name;
    uint32_t          engine_version;
    uint32_t          api_version;
} vk_application_info;

typedef struct vk_format_properties {
    vk_format_feature_flags linear_tiling_features;
    vk_format_feature_flags optimal_tiling_features;
    vk_format_feature_flags buffer_features;
} vk_format_properties;

typedef struct vk_image_format_properties {
    vk_extent3d           max_extent;
    uint32_t              max_mip_levels;
    uint32_t              max_array_layers;
    vk_sample_count_flags sample_counts;
    vk_device_size        max_resource_size;
} vk_image_format_properties;

typedef struct vk_instance_create_info {
    vk_structure_type          s_type;
    const void*                p_next;
    vk_instance_create_flags   flags;
    const vk_application_info* p_application_info;
    uint32_t                   enabled_layer_count;
    const char* const*         pp_enabled_layer_names;
    uint32_t                   enabled_extension_count;
    const char* const*         pp_enabled_extension_names;
} vk_instance_create_info;

typedef struct vk_memory_heap {
    vk_device_size       size;
    vk_memory_heap_flags flags;
} vk_memory_heap;

typedef struct vk_memory_type {
    vk_memory_property_flags property_flags;
    uint32_t                 heap_index;
} vk_memory_type;

typedef struct vk_physical_device_features {
    vk_bool32 robust_buffer_access;
    vk_bool32 full_draw_index_uint32;
    vk_bool32 image_cube_array;
    vk_bool32 independent_blend;
    vk_bool32 geometry_shader;
    vk_bool32 tessellation_shader;
    vk_bool32 sample_rate_shading;
    vk_bool32 dual_src_blend;
    vk_bool32 logic_op;
    vk_bool32 multi_draw_indirect;
    vk_bool32 draw_indirect_first_instance;
    vk_bool32 depth_clamp;
    vk_bool32 depth_bias_clamp;
    vk_bool32 fill_mode_non_solid;
    vk_bool32 depth_bounds;
    vk_bool32 wide_lines;
    vk_bool32 large_points;
    vk_bool32 alpha_to_one;
    vk_bool32 multi_viewport;
    vk_bool32 sampler_anisotropy;
    vk_bool32 texture_compression_etc2;
    vk_bool32 texture_compression_astc_ldr;
    vk_bool32 texture_compression_bc;
    vk_bool32 occlusion_query_precise;
    vk_bool32 pipeline_statistics_query;
    vk_bool32 vertex_pipeline_stores_and_atomics;
    vk_bool32 fragment_stores_and_atomics;
    vk_bool32 shader_tessellation_and_geometry_point_size;
    vk_bool32 shader_image_gather_extended;
    vk_bool32 shader_storage_image_extended_formats;
    vk_bool32 shader_storage_image_multisample;
    vk_bool32 shader_storage_image_read_without_format;
    vk_bool32 shader_storage_image_write_without_format;
    vk_bool32 shader_uniform_buffer_array_dynamic_indexing;
    vk_bool32 shader_sampled_image_array_dynamic_indexing;
    vk_bool32 shader_storage_buffer_array_dynamic_indexing;
    vk_bool32 shader_storage_image_array_dynamic_indexing;
    vk_bool32 shader_clip_distance;
    vk_bool32 shader_cull_distance;
    vk_bool32 shader_float64;
    vk_bool32 shader_int64;
    vk_bool32 shader_int16;
    vk_bool32 shader_resource_residency;
    vk_bool32 shader_resource_min_lod;
    vk_bool32 sparse_binding;
    vk_bool32 sparse_residency_buffer;
    vk_bool32 sparse_residency_image2d;
    vk_bool32 sparse_residency_image3d;
    vk_bool32 sparse_residency2samples;
    vk_bool32 sparse_residency4samples;
    vk_bool32 sparse_residency8samples;
    vk_bool32 sparse_residency16samples;
    vk_bool32 sparse_residency_aliased;
    vk_bool32 variable_multisample_rate;
    vk_bool32 inherited_queries;
} vk_physical_device_features;

typedef struct vk_physical_device_limits {
    uint32_t              max_image_dimension1d;
    uint32_t              max_image_dimension2d;
    uint32_t              max_image_dimension3d;
    uint32_t              max_image_dimension_cube;
    uint32_t              max_image_array_layers;
    uint32_t              max_texel_buffer_elements;
    uint32_t              max_uniform_buffer_range;
    uint32_t              max_storage_buffer_range;
    uint32_t              max_push_constants_size;
    uint32_t              max_memory_allocation_count;
    uint32_t              max_sampler_allocation_count;
    vk_device_size        buffer_image_granularity;
    vk_device_size        sparse_address_space_size;
    uint32_t              max_bound_descriptor_sets;
    uint32_t              max_per_stage_descriptor_samplers;
    uint32_t              max_per_stage_descriptor_uniform_buffers;
    uint32_t              max_per_stage_descriptor_storage_buffers;
    uint32_t              max_per_stage_descriptor_sampled_images;
    uint32_t              max_per_stage_descriptor_storage_images;
    uint32_t              max_per_stage_descriptor_input_attachments;
    uint32_t              max_per_stage_resources;
    uint32_t              max_descriptor_set_samplers;
    uint32_t              max_descriptor_set_uniform_buffers;
    uint32_t              max_descriptor_set_uniform_buffers_dynamic;
    uint32_t              max_descriptor_set_storage_buffers;
    uint32_t              max_descriptor_set_storage_buffers_dynamic;
    uint32_t              max_descriptor_set_sampled_images;
    uint32_t              max_descriptor_set_storage_images;
    uint32_t              max_descriptor_set_input_attachments;
    uint32_t              max_vertex_input_attributes;
    uint32_t              max_vertex_input_bindings;
    uint32_t              max_vertex_input_attribute_offset;
    uint32_t              max_vertex_input_binding_stride;
    uint32_t              max_vertex_output_components;
    uint32_t              max_tessellation_generation_level;
    uint32_t              max_tessellation_patch_size;
    uint32_t              max_tessellation_control_per_vertex_input_components;
    uint32_t              max_tessellation_control_per_vertex_output_components;
    uint32_t              max_tessellation_control_per_patch_output_components;
    uint32_t              max_tessellation_control_total_output_components;
    uint32_t              max_tessellation_evaluation_input_components;
    uint32_t              max_tessellation_evaluation_output_components;
    uint32_t              max_geometry_shader_invocations;
    uint32_t              max_geometry_input_components;
    uint32_t              max_geometry_output_components;
    uint32_t              max_geometry_output_vertices;
    uint32_t              max_geometry_total_output_components;
    uint32_t              max_fragment_input_components;
    uint32_t              max_fragment_output_attachments;
    uint32_t              max_fragment_dual_src_attachments;
    uint32_t              max_fragment_combined_output_resources;
    uint32_t              max_compute_shared_memory_size;
    uint32_t              max_compute_work_group_count[3];
    uint32_t              max_compute_work_group_invocations;
    uint32_t              max_compute_work_group_size[3];
    uint32_t              sub_pixel_precision_bits;
    uint32_t              sub_texel_precision_bits;
    uint32_t              mipmap_precision_bits;
    uint32_t              max_draw_indexed_index_value;
    uint32_t              max_draw_indirect_count;
    float                 max_sampler_lod_bias;
    float                 max_sampler_anisotropy;
    uint32_t              max_viewports;
    uint32_t              max_viewport_dimensions[2];
    float                 viewport_bounds_range[2];
    uint32_t              viewport_sub_pixel_bits;
    size_t                min_memory_map_alignment;
    vk_device_size        min_texel_buffer_offset_alignment;
    vk_device_size        min_uniform_buffer_offset_alignment;
    vk_device_size        min_storage_buffer_offset_alignment;
    int32_t               min_texel_offset;
    uint32_t              max_texel_offset;
    int32_t               min_texel_gather_offset;
    uint32_t              max_texel_gather_offset;
    float                 min_interpolation_offset;
    float                 max_interpolation_offset;
    uint32_t              sub_pixel_interpolation_offset_bits;
    uint32_t              max_framebuffer_width;
    uint32_t              max_framebuffer_height;
    uint32_t              max_framebuffer_layers;
    vk_sample_count_flags framebuffer_color_sample_counts;
    vk_sample_count_flags framebuffer_depth_sample_counts;
    vk_sample_count_flags framebuffer_stencil_sample_counts;
    vk_sample_count_flags framebuffer_no_attachments_sample_counts;
    uint32_t              max_color_attachments;
    vk_sample_count_flags sampled_image_color_sample_counts;
    vk_sample_count_flags sampled_image_integer_sample_counts;
    vk_sample_count_flags sampled_image_depth_sample_counts;
    vk_sample_count_flags sampled_image_stencil_sample_counts;
    vk_sample_count_flags storage_image_sample_counts;
    uint32_t              max_sample_mask_words;
    vk_bool32             timestamp_compute_and_graphics;
    float                 timestamp_period;
    uint32_t              max_clip_distances;
    uint32_t              max_cull_distances;
    uint32_t              max_combined_clip_and_cull_distances;
    uint32_t              discrete_queue_priorities;
    float                 point_size_range[2];
    float                 line_width_range[2];
    float                 point_size_granularity;
    float                 line_width_granularity;
    vk_bool32             strict_lines;
    vk_bool32             standard_sample_locations;
    vk_device_size        optimal_buffer_copy_offset_alignment;
    vk_device_size        optimal_buffer_copy_row_pitch_alignment;
    vk_device_size        non_coherent_atom_size;
} vk_physical_device_limits;

typedef struct vk_physical_device_memory_properties {
    uint32_t       memory_type_count;
    vk_memory_type memory_types[VK_MAX_MEMORY_TYPES];
    uint32_t       memory_heap_count;
    vk_memory_heap memory_heaps[VK_MAX_MEMORY_HEAPS];
} vk_physical_device_memory_properties;

typedef struct vk_physical_device_sparse_properties {
    vk_bool32 residency_standard2dblock_shape;
    vk_bool32 residency_standard2dmultisample_block_shape;
    vk_bool32 residency_standard3dblock_shape;
    vk_bool32 residency_aligned_mip_size;
    vk_bool32 residency_non_resident_strict;
} vk_physical_device_sparse_properties;

typedef struct vk_physical_device_properties {
    uint32_t                             api_version;
    uint32_t                             driver_version;
    uint32_t                             vendor_id;
    uint32_t                             device_id;
    vk_physical_device_type              device_type;
    char                                 device_name[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
    uint8_t                              pipeline_cache_uuid[VK_UUID_SIZE];
    vk_physical_device_limits            limits;
    vk_physical_device_sparse_properties sparse_properties;
} vk_physical_device_properties;

typedef struct vk_queue_family_properties {
    vk_queue_flags queue_flags;
    uint32_t       queue_count;
    uint32_t       timestamp_valid_bits;
    vk_extent3d    min_image_transfer_granularity;
} vk_queue_family_properties;

typedef struct vk_device_queue_create_info {
    vk_structure_type            s_type;
    const void*                  p_next;
    vk_device_queue_create_flags flags;
    uint32_t                     queue_family_index;
    uint32_t                     queue_count;
    const float*                 p_queue_priorities;
} vk_device_queue_create_info;

typedef struct vk_device_create_info {
    vk_structure_type                  s_type;
    const void*                        p_next;
    vk_device_create_flags             flags;
    uint32_t                           queue_create_info_count;
    const vk_device_queue_create_info* p_queue_create_infos;
    uint32_t                           enabled_layer_count;
    const char* const*                 pp_enabled_layer_names;
    uint32_t                           enabled_extension_count;
    const char* const*                 pp_enabled_extension_names;
    const vk_physical_device_features* p_enabled_features;
} vk_device_create_info;

typedef struct vk_extension_properties {
    char     extension_name[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t spec_version;
} vk_extension_properties;

typedef struct vk_layer_properties {
    char     layer_name[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t spec_version;
    uint32_t implementation_version;
    char     description[VK_MAX_DESCRIPTION_SIZE];
} vk_layer_properties;

typedef struct vk_submit_info {
    vk_structure_type              s_type;
    const void*                    p_next;
    uint32_t                       wait_semaphore_count;
    const vk_semaphore*            p_wait_semaphores;
    const vk_pipeline_stage_flags* p_wait_dst_stage_mask;
    uint32_t                       command_buffer_count;
    const vk_command_buffer*       p_command_buffers;
    uint32_t                       signal_semaphore_count;
    const vk_semaphore*            p_signal_semaphores;
} vk_submit_info;

typedef struct vk_mapped_memory_range {
    vk_structure_type s_type;
    const void*       p_next;
    vk_device_memory  memory;
    vk_device_size    offset;
    vk_device_size    size;
} vk_mapped_memory_range;

typedef struct vk_memory_allocate_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_device_size    allocation_size;
    uint32_t          memory_type_index;
} vk_memory_allocate_info;

typedef struct vk_memory_requirements {
    vk_device_size size;
    vk_device_size alignment;
    uint32_t       memory_type_bits;
} vk_memory_requirements;

typedef struct vk_sparse_memory_bind {
    vk_device_size              resource_offset;
    vk_device_size              size;
    vk_device_memory            memory;
    vk_device_size              memory_offset;
    vk_sparse_memory_bind_flags flags;
} vk_sparse_memory_bind;

typedef struct vk_sparse_buffer_memory_bind_info {
    vk_buffer                    buffer;
    uint32_t                     bind_count;
    const vk_sparse_memory_bind* p_binds;
} vk_sparse_buffer_memory_bind_info;

typedef struct vk_sparse_image_opaque_memory_bind_info {
    vk_image                     image;
    uint32_t                     bind_count;
    const vk_sparse_memory_bind* p_binds;
} vk_sparse_image_opaque_memory_bind_info;

typedef struct vk_image_subresource {
    vk_image_aspect_flags aspect_mask;
    uint32_t              mip_level;
    uint32_t              array_layer;
} vk_image_subresource;

typedef struct vk_sparse_image_memory_bind {
    vk_image_subresource        subresource;
    vk_offset3d                 offset;
    vk_extent3d                 extent;
    vk_device_memory            memory;
    vk_device_size              memory_offset;
    vk_sparse_memory_bind_flags flags;
} vk_sparse_image_memory_bind;

typedef struct vk_sparse_image_memory_bind_info {
    vk_image                           image;
    uint32_t                           bind_count;
    const vk_sparse_image_memory_bind* p_binds;
} vk_sparse_image_memory_bind_info;

typedef struct vk_bind_sparse_info {
    vk_structure_type                              s_type;
    const void*                                    p_next;
    uint32_t                                       wait_semaphore_count;
    const vk_semaphore*                            p_wait_semaphores;
    uint32_t                                       buffer_bind_count;
    const vk_sparse_buffer_memory_bind_info*       p_buffer_binds;
    uint32_t                                       image_opaque_bind_count;
    const vk_sparse_image_opaque_memory_bind_info* p_image_opaque_binds;
    uint32_t                                       image_bind_count;
    const vk_sparse_image_memory_bind_info*        p_image_binds;
    uint32_t                                       signal_semaphore_count;
    const vk_semaphore*                            p_signal_semaphores;
} vk_bind_sparse_info;

typedef struct vk_sparse_image_format_properties {
    vk_image_aspect_flags        aspect_mask;
    vk_extent3d                  image_granularity;
    vk_sparse_image_format_flags flags;
} vk_sparse_image_format_properties;

typedef struct vk_sparse_image_memory_requirements {
    vk_sparse_image_format_properties format_properties;
    uint32_t                          image_mip_tail_first_lod;
    vk_device_size                    image_mip_tail_size;
    vk_device_size                    image_mip_tail_offset;
    vk_device_size                    image_mip_tail_stride;
} vk_sparse_image_memory_requirements;

typedef struct vk_fence_create_info {
    vk_structure_type     s_type;
    const void*           p_next;
    vk_fence_create_flags flags;
} vk_fence_create_info;

typedef struct vk_semaphore_create_info {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_semaphore_create_flags flags;
} vk_semaphore_create_info;

typedef struct vk_event_create_info {
    vk_structure_type     s_type;
    const void*           p_next;
    vk_event_create_flags flags;
} vk_event_create_info;

typedef struct vk_query_pool_create_info {
    vk_structure_type                 s_type;
    const void*                       p_next;
    vk_query_pool_create_flags        flags;
    vk_query_type                     query_type;
    uint32_t                          query_count;
    vk_query_pipeline_statistic_flags pipeline_statistics;
} vk_query_pool_create_info;

typedef struct vk_buffer_create_info {
    vk_structure_type      s_type;
    const void*            p_next;
    vk_buffer_create_flags flags;
    vk_device_size         size;
    vk_buffer_usage_flags  usage;
    vk_sharing_mode        sharing_mode;
    uint32_t               queue_family_index_count;
    const uint32_t*        p_queue_family_indices;
} vk_buffer_create_info;

typedef struct vk_buffer_view_create_info {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_buffer_view_create_flags flags;
    vk_buffer                   buffer;
    vk_format                   format;
    vk_device_size              offset;
    vk_device_size              range;
} vk_buffer_view_create_info;

typedef struct vk_image_create_info {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_image_create_flags     flags;
    vk_image_type             image_type;
    vk_format                 format;
    vk_extent3d               extent;
    uint32_t                  mip_levels;
    uint32_t                  array_layers;
    vk_sample_count_flag_bits samples;
    vk_image_tiling           tiling;
    vk_image_usage_flags      usage;
    vk_sharing_mode           sharing_mode;
    uint32_t                  queue_family_index_count;
    const uint32_t*           p_queue_family_indices;
    vk_image_layout           initial_layout;
} vk_image_create_info;

typedef struct vk_subresource_layout {
    vk_device_size offset;
    vk_device_size size;
    vk_device_size row_pitch;
    vk_device_size array_pitch;
    vk_device_size depth_pitch;
} vk_subresource_layout;

typedef struct vk_component_mapping {
    vk_component_swizzle r;
    vk_component_swizzle g;
    vk_component_swizzle b;
    vk_component_swizzle a;
} vk_component_mapping;

typedef struct vk_image_view_create_info {
    vk_structure_type          s_type;
    const void*                p_next;
    vk_image_view_create_flags flags;
    vk_image                   image;
    vk_image_view_type         view_type;
    vk_format                  format;
    vk_component_mapping       components;
    vk_image_subresource_range subresource_range;
} vk_image_view_create_info;

typedef struct vk_shader_module_create_info {
    vk_structure_type             s_type;
    const void*                   p_next;
    vk_shader_module_create_flags flags;
    size_t                        code_size;
    const uint32_t*               p_code;
} vk_shader_module_create_info;

typedef struct vk_pipeline_cache_create_info {
    vk_structure_type              s_type;
    const void*                    p_next;
    vk_pipeline_cache_create_flags flags;
    size_t                         initial_data_size;
    const void*                    p_initial_data;
} vk_pipeline_cache_create_info;

typedef struct vk_specialization_map_entry {
    uint32_t constant_id;
    uint32_t offset;
    size_t   size;
} vk_specialization_map_entry;

typedef struct vk_specialization_info {
    uint32_t                           map_entry_count;
    const vk_specialization_map_entry* p_map_entries;
    size_t                             data_size;
    const void*                        p_data;
} vk_specialization_info;

typedef struct vk_pipeline_shader_stage_create_info {
    vk_structure_type                     s_type;
    const void*                           p_next;
    vk_pipeline_shader_stage_create_flags flags;
    vk_shader_stage_flag_bits             stage;
    vk_shader_module                      module;
    const char*                           p_name;
    const vk_specialization_info*         p_specialization_info;
} vk_pipeline_shader_stage_create_info;

typedef struct vk_compute_pipeline_create_info {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_pipeline_create_flags             flags;
    vk_pipeline_shader_stage_create_info stage;
    vk_pipeline_layout                   layout;
    vk_pipeline                          base_pipeline_handle;
    int32_t                              base_pipeline_index;
} vk_compute_pipeline_create_info;

typedef struct vk_vertex_input_binding_description {
    uint32_t             binding;
    uint32_t             stride;
    vk_vertex_input_rate input_rate;
} vk_vertex_input_binding_description;

typedef struct vk_vertex_input_attribute_description {
    uint32_t  location;
    uint32_t  binding;
    vk_format format;
    uint32_t  offset;
} vk_vertex_input_attribute_description;

typedef struct vk_pipeline_vertex_input_state_create_info {
    vk_structure_type                            s_type;
    const void*                                  p_next;
    vk_pipeline_vertex_input_state_create_flags  flags;
    uint32_t                                     vertex_binding_description_count;
    const vk_vertex_input_binding_description*   p_vertex_binding_descriptions;
    uint32_t                                     vertex_attribute_description_count;
    const vk_vertex_input_attribute_description* p_vertex_attribute_descriptions;
} vk_pipeline_vertex_input_state_create_info;

typedef struct vk_pipeline_input_assembly_state_create_info {
    vk_structure_type                             s_type;
    const void*                                   p_next;
    vk_pipeline_input_assembly_state_create_flags flags;
    vk_primitive_topology                         topology;
    vk_bool32                                     primitive_restart_enable;
} vk_pipeline_input_assembly_state_create_info;

typedef struct vk_pipeline_tessellation_state_create_info {
    vk_structure_type                           s_type;
    const void*                                 p_next;
    vk_pipeline_tessellation_state_create_flags flags;
    uint32_t                                    patch_control_points;
} vk_pipeline_tessellation_state_create_info;

typedef struct vk_viewport {
    float x;
    float y;
    float width;
    float height;
    float min_depth;
    float max_depth;
} vk_viewport;

typedef struct vk_pipeline_viewport_state_create_info {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_pipeline_viewport_state_create_flags flags;
    uint32_t                                viewport_count;
    const vk_viewport*                      p_viewports;
    uint32_t                                scissor_count;
    const vk_rect2d*                        p_scissors;
} vk_pipeline_viewport_state_create_info;

typedef struct vk_pipeline_rasterization_state_create_info {
    vk_structure_type                            s_type;
    const void*                                  p_next;
    vk_pipeline_rasterization_state_create_flags flags;
    vk_bool32                                    depth_clamp_enable;
    vk_bool32                                    rasterizer_discard_enable;
    vk_polygon_mode                              polygon_mode;
    vk_cull_mode_flags                           cull_mode;
    vk_front_face                                front_face;
    vk_bool32                                    depth_bias_enable;
    float                                        depth_bias_constant_factor;
    float                                        depth_bias_clamp;
    float                                        depth_bias_slope_factor;
    float                                        line_width;
} vk_pipeline_rasterization_state_create_info;

typedef struct vk_pipeline_multisample_state_create_info {
    vk_structure_type                          s_type;
    const void*                                p_next;
    vk_pipeline_multisample_state_create_flags flags;
    vk_sample_count_flag_bits                  rasterization_samples;
    vk_bool32                                  sample_shading_enable;
    float                                      min_sample_shading;
    const vk_sample_mask*                      p_sample_mask;
    vk_bool32                                  alpha_to_coverage_enable;
    vk_bool32                                  alpha_to_one_enable;
} vk_pipeline_multisample_state_create_info;

typedef struct vk_stencil_op_state {
    vk_stencil_op fail_op;
    vk_stencil_op pass_op;
    vk_stencil_op depth_fail_op;
    vk_compare_op compare_op;
    uint32_t      compare_mask;
    uint32_t      write_mask;
    uint32_t      reference;
} vk_stencil_op_state;

typedef struct vk_pipeline_depth_stencil_state_create_info {
    vk_structure_type                            s_type;
    const void*                                  p_next;
    vk_pipeline_depth_stencil_state_create_flags flags;
    vk_bool32                                    depth_test_enable;
    vk_bool32                                    depth_write_enable;
    vk_compare_op                                depth_compare_op;
    vk_bool32                                    depth_bounds_test_enable;
    vk_bool32                                    stencil_test_enable;
    vk_stencil_op_state                          front;
    vk_stencil_op_state                          back;
    float                                        min_depth_bounds;
    float                                        max_depth_bounds;
} vk_pipeline_depth_stencil_state_create_info;

typedef struct vk_pipeline_color_blend_attachment_state {
    vk_bool32                blend_enable;
    vk_blend_factor          src_color_blend_factor;
    vk_blend_factor          dst_color_blend_factor;
    vk_blend_op              color_blend_op;
    vk_blend_factor          src_alpha_blend_factor;
    vk_blend_factor          dst_alpha_blend_factor;
    vk_blend_op              alpha_blend_op;
    vk_color_component_flags color_write_mask;
} vk_pipeline_color_blend_attachment_state;

typedef struct vk_pipeline_color_blend_state_create_info {
    vk_structure_type                               s_type;
    const void*                                     p_next;
    vk_pipeline_color_blend_state_create_flags      flags;
    vk_bool32                                       logic_op_enable;
    vk_logic_op                                     logic_op;
    uint32_t                                        attachment_count;
    const vk_pipeline_color_blend_attachment_state* p_attachments;
    float                                           blend_constants[4];
} vk_pipeline_color_blend_state_create_info;

typedef struct vk_pipeline_dynamic_state_create_info {
    vk_structure_type                      s_type;
    const void*                            p_next;
    vk_pipeline_dynamic_state_create_flags flags;
    uint32_t                               dynamic_state_count;
    const vk_dynamic_state*                p_dynamic_states;
} vk_pipeline_dynamic_state_create_info;

typedef struct vk_graphics_pipeline_create_info {
    vk_structure_type                                   s_type;
    const void*                                         p_next;
    vk_pipeline_create_flags                            flags;
    uint32_t                                            stage_count;
    const vk_pipeline_shader_stage_create_info*         p_stages;
    const vk_pipeline_vertex_input_state_create_info*   p_vertex_input_state;
    const vk_pipeline_input_assembly_state_create_info* p_input_assembly_state;
    const vk_pipeline_tessellation_state_create_info*   p_tessellation_state;
    const vk_pipeline_viewport_state_create_info*       p_viewport_state;
    const vk_pipeline_rasterization_state_create_info*  p_rasterization_state;
    const vk_pipeline_multisample_state_create_info*    p_multisample_state;
    const vk_pipeline_depth_stencil_state_create_info*  p_depth_stencil_state;
    const vk_pipeline_color_blend_state_create_info*    p_color_blend_state;
    const vk_pipeline_dynamic_state_create_info*        p_dynamic_state;
    vk_pipeline_layout                                  layout;
    vk_render_pass                                      render_pass;
    uint32_t                                            subpass;
    vk_pipeline                                         base_pipeline_handle;
    int32_t                                             base_pipeline_index;
} vk_graphics_pipeline_create_info;

typedef struct vk_push_constant_range {
    vk_shader_stage_flags stage_flags;
    uint32_t              offset;
    uint32_t              size;
} vk_push_constant_range;

typedef struct vk_pipeline_layout_create_info {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_pipeline_layout_create_flags flags;
    uint32_t                        set_layout_count;
    const vk_descriptor_set_layout* p_set_layouts;
    uint32_t                        push_constant_range_count;
    const vk_push_constant_range*   p_push_constant_ranges;
} vk_pipeline_layout_create_info;

typedef struct vk_sampler_create_info {
    vk_structure_type       s_type;
    const void*             p_next;
    vk_sampler_create_flags flags;
    vk_filter               mag_filter;
    vk_filter               min_filter;
    vk_sampler_mipmap_mode  mipmap_mode;
    vk_sampler_address_mode address_mode_u;
    vk_sampler_address_mode address_mode_v;
    vk_sampler_address_mode address_mode_w;
    float                   mip_lod_bias;
    vk_bool32               anisotropy_enable;
    float                   max_anisotropy;
    vk_bool32               compare_enable;
    vk_compare_op           compare_op;
    float                   min_lod;
    float                   max_lod;
    vk_border_color         border_color;
    vk_bool32               unnormalized_coordinates;
} vk_sampler_create_info;

typedef struct vk_copy_descriptor_set {
    vk_structure_type s_type;
    const void*       p_next;
    vk_descriptor_set src_set;
    uint32_t          src_binding;
    uint32_t          src_array_element;
    vk_descriptor_set dst_set;
    uint32_t          dst_binding;
    uint32_t          dst_array_element;
    uint32_t          descriptor_count;
} vk_copy_descriptor_set;

typedef struct vk_descriptor_buffer_info {
    vk_buffer      buffer;
    vk_device_size offset;
    vk_device_size range;
} vk_descriptor_buffer_info;

typedef struct vk_descriptor_image_info {
    vk_sampler      sampler;
    vk_image_view   image_view;
    vk_image_layout image_layout;
} vk_descriptor_image_info;

typedef struct vk_descriptor_pool_size {
    vk_descriptor_type type;
    uint32_t           descriptor_count;
} vk_descriptor_pool_size;

typedef struct vk_descriptor_pool_create_info {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_descriptor_pool_create_flags flags;
    uint32_t                        max_sets;
    uint32_t                        pool_size_count;
    const vk_descriptor_pool_size*  p_pool_sizes;
} vk_descriptor_pool_create_info;

typedef struct vk_descriptor_set_allocate_info {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_descriptor_pool              descriptor_pool;
    uint32_t                        descriptor_set_count;
    const vk_descriptor_set_layout* p_set_layouts;
} vk_descriptor_set_allocate_info;

typedef struct vk_descriptor_set_layout_binding {
    uint32_t              binding;
    vk_descriptor_type    descriptor_type;
    uint32_t              descriptor_count;
    vk_shader_stage_flags stage_flags;
    const vk_sampler*     p_immutable_samplers;
} vk_descriptor_set_layout_binding;

typedef struct vk_descriptor_set_layout_create_info {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_descriptor_set_layout_create_flags   flags;
    uint32_t                                binding_count;
    const vk_descriptor_set_layout_binding* p_bindings;
} vk_descriptor_set_layout_create_info;

typedef struct vk_write_descriptor_set {
    vk_structure_type                s_type;
    const void*                      p_next;
    vk_descriptor_set                dst_set;
    uint32_t                         dst_binding;
    uint32_t                         dst_array_element;
    uint32_t                         descriptor_count;
    vk_descriptor_type               descriptor_type;
    const vk_descriptor_image_info*  p_image_info;
    const vk_descriptor_buffer_info* p_buffer_info;
    const vk_buffer_view*            p_texel_buffer_view;
} vk_write_descriptor_set;

typedef struct vk_attachment_description {
    vk_attachment_description_flags flags;
    vk_format                       format;
    vk_sample_count_flag_bits       samples;
    vk_attachment_load_op           load_op;
    vk_attachment_store_op          store_op;
    vk_attachment_load_op           stencil_load_op;
    vk_attachment_store_op          stencil_store_op;
    vk_image_layout                 initial_layout;
    vk_image_layout                 final_layout;
} vk_attachment_description;

typedef struct vk_attachment_reference {
    uint32_t        attachment;
    vk_image_layout layout;
} vk_attachment_reference;

typedef struct vk_framebuffer_create_info {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_framebuffer_create_flags flags;
    vk_render_pass              render_pass;
    uint32_t                    attachment_count;
    const vk_image_view*        p_attachments;
    uint32_t                    width;
    uint32_t                    height;
    uint32_t                    layers;
} vk_framebuffer_create_info;

typedef struct vk_subpass_description {
    vk_subpass_description_flags   flags;
    vk_pipeline_bind_point         pipeline_bind_point;
    uint32_t                       input_attachment_count;
    const vk_attachment_reference* p_input_attachments;
    uint32_t                       color_attachment_count;
    const vk_attachment_reference* p_color_attachments;
    const vk_attachment_reference* p_resolve_attachments;
    const vk_attachment_reference* p_depth_stencil_attachment;
    uint32_t                       preserve_attachment_count;
    const uint32_t*                p_preserve_attachments;
} vk_subpass_description;

typedef struct vk_subpass_dependency {
    uint32_t                src_subpass;
    uint32_t                dst_subpass;
    vk_pipeline_stage_flags src_stage_mask;
    vk_pipeline_stage_flags dst_stage_mask;
    vk_access_flags         src_access_mask;
    vk_access_flags         dst_access_mask;
    vk_dependency_flags     dependency_flags;
} vk_subpass_dependency;

typedef struct vk_render_pass_create_info {
    vk_structure_type                s_type;
    const void*                      p_next;
    vk_render_pass_create_flags      flags;
    uint32_t                         attachment_count;
    const vk_attachment_description* p_attachments;
    uint32_t                         subpass_count;
    const vk_subpass_description*    p_subpasses;
    uint32_t                         dependency_count;
    const vk_subpass_dependency*     p_dependencies;
} vk_render_pass_create_info;

typedef struct vk_command_pool_create_info {
    vk_structure_type            s_type;
    const void*                  p_next;
    vk_command_pool_create_flags flags;
    uint32_t                     queue_family_index;
} vk_command_pool_create_info;

typedef struct vk_command_buffer_allocate_info {
    vk_structure_type       s_type;
    const void*             p_next;
    vk_command_pool         command_pool;
    vk_command_buffer_level level;
    uint32_t                command_buffer_count;
} vk_command_buffer_allocate_info;

typedef struct vk_command_buffer_inheritance_info {
    vk_structure_type                 s_type;
    const void*                       p_next;
    vk_render_pass                    render_pass;
    uint32_t                          subpass;
    vk_framebuffer                    framebuffer;
    vk_bool32                         occlusion_query_enable;
    vk_query_control_flags            query_flags;
    vk_query_pipeline_statistic_flags pipeline_statistics;
} vk_command_buffer_inheritance_info;

typedef struct vk_command_buffer_begin_info {
    vk_structure_type                         s_type;
    const void*                               p_next;
    vk_command_buffer_usage_flags             flags;
    const vk_command_buffer_inheritance_info* p_inheritance_info;
} vk_command_buffer_begin_info;

typedef struct vk_buffer_copy {
    vk_device_size src_offset;
    vk_device_size dst_offset;
    vk_device_size size;
} vk_buffer_copy;

typedef struct vk_image_subresource_layers {
    vk_image_aspect_flags aspect_mask;
    uint32_t              mip_level;
    uint32_t              base_array_layer;
    uint32_t              layer_count;
} vk_image_subresource_layers;

typedef struct vk_buffer_image_copy {
    vk_device_size              buffer_offset;
    uint32_t                    buffer_row_length;
    uint32_t                    buffer_image_height;
    vk_image_subresource_layers image_subresource;
    vk_offset3d                 image_offset;
    vk_extent3d                 image_extent;
} vk_buffer_image_copy;

typedef union vk_clear_color_value {
    float    float32[4];
    int32_t  int32[4];
    uint32_t uint32[4];
} vk_clear_color_value;

typedef struct vk_clear_depth_stencil_value {
    float    depth;
    uint32_t stencil;
} vk_clear_depth_stencil_value;

typedef union vk_clear_value {
    vk_clear_color_value         color;
    vk_clear_depth_stencil_value depth_stencil;
} vk_clear_value;

typedef struct vk_clear_attachment {
    vk_image_aspect_flags aspect_mask;
    uint32_t              color_attachment;
    vk_clear_value        clear_value;
} vk_clear_attachment;

typedef struct vk_clear_rect {
    vk_rect2d rect;
    uint32_t  base_array_layer;
    uint32_t  layer_count;
} vk_clear_rect;

typedef struct vk_image_blit {
    vk_image_subresource_layers src_subresource;
    vk_offset3d                 src_offsets[2];
    vk_image_subresource_layers dst_subresource;
    vk_offset3d                 dst_offsets[2];
} vk_image_blit;

typedef struct vk_image_copy {
    vk_image_subresource_layers src_subresource;
    vk_offset3d                 src_offset;
    vk_image_subresource_layers dst_subresource;
    vk_offset3d                 dst_offset;
    vk_extent3d                 extent;
} vk_image_copy;

typedef struct vk_image_resolve {
    vk_image_subresource_layers src_subresource;
    vk_offset3d                 src_offset;
    vk_image_subresource_layers dst_subresource;
    vk_offset3d                 dst_offset;
    vk_extent3d                 extent;
} vk_image_resolve;

typedef struct vk_render_pass_begin_info {
    vk_structure_type     s_type;
    const void*           p_next;
    vk_render_pass        render_pass;
    vk_framebuffer        framebuffer;
    vk_rect2d             render_area;
    uint32_t              clear_value_count;
    const vk_clear_value* p_clear_values;
} vk_render_pass_begin_info;

typedef vk_result(VKAPI_PTR* pfn_vk_create_instance)(const vk_instance_create_info* p_create_info,
                                                     const vk_allocation_callbacks* p_allocator,
                                                     vk_instance*                   p_instance);
typedef void(VKAPI_PTR* pfn_vk_destroy_instance)(vk_instance instance, const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_physical_devices)(vk_instance instance, uint32_t* p_physical_device_count,
                                                                vk_physical_device* p_physical_devices);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_features)(vk_physical_device           physical_device,
                                                             vk_physical_device_features* p_features);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_format_properties)(vk_physical_device    physical_device,
                                                                      vk_format             format,
                                                                      vk_format_properties* p_format_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_image_format_properties)(
    vk_physical_device physical_device, vk_format format, vk_image_type type, vk_image_tiling tiling,
    vk_image_usage_flags usage, vk_image_create_flags flags, vk_image_format_properties* p_image_format_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_properties)(vk_physical_device             physical_device,
                                                               vk_physical_device_properties* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_properties)(
    vk_physical_device physical_device, uint32_t* p_queue_family_property_count,
    vk_queue_family_properties* p_queue_family_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_memory_properties)(
    vk_physical_device physical_device, vk_physical_device_memory_properties* p_memory_properties);
typedef pfn_vk_void_function(VKAPI_PTR* pfn_vk_get_instance_proc_addr)(vk_instance instance, const char* p_name);
typedef pfn_vk_void_function(VKAPI_PTR* pfn_vk_get_device_proc_addr)(vk_device device, const char* p_name);
typedef vk_result(VKAPI_PTR* pfn_vk_create_device)(vk_physical_device             physical_device,
                                                   const vk_device_create_info*   p_create_info,
                                                   const vk_allocation_callbacks* p_allocator, vk_device* p_device);
typedef void(VKAPI_PTR* pfn_vk_destroy_device)(vk_device device, const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_instance_extension_properties)(const char*              p_layer_name,
                                                                             uint32_t*                p_property_count,
                                                                             vk_extension_properties* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_device_extension_properties)(vk_physical_device       physical_device,
                                                                           const char*              p_layer_name,
                                                                           uint32_t*                p_property_count,
                                                                           vk_extension_properties* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_instance_layer_properties)(uint32_t*            p_property_count,
                                                                         vk_layer_properties* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_device_layer_properties)(vk_physical_device   physical_device,
                                                                       uint32_t*            p_property_count,
                                                                       vk_layer_properties* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_device_queue)(vk_device device, uint32_t queue_family_index, uint32_t queue_index,
                                                 vk_queue* p_queue);
typedef vk_result(VKAPI_PTR* pfn_vk_queue_submit)(vk_queue queue, uint32_t submit_count,
                                                  const vk_submit_info* p_submits, vk_fence fence);
typedef vk_result(VKAPI_PTR* pfn_vk_queue_wait_idle)(vk_queue queue);
typedef vk_result(VKAPI_PTR* pfn_vk_device_wait_idle)(vk_device device);
typedef vk_result(VKAPI_PTR* pfn_vk_allocate_memory)(vk_device device, const vk_memory_allocate_info* p_allocate_info,
                                                     const vk_allocation_callbacks* p_allocator,
                                                     vk_device_memory*              p_memory);
typedef void(VKAPI_PTR* pfn_vk_free_memory)(vk_device device, vk_device_memory memory,
                                            const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_map_memory)(vk_device device, vk_device_memory memory, vk_device_size offset,
                                                vk_device_size size, vk_memory_map_flags flags, void** pp_data);
typedef void(VKAPI_PTR* pfn_vk_unmap_memory)(vk_device device, vk_device_memory memory);
typedef vk_result(VKAPI_PTR* pfn_vk_flush_mapped_memory_ranges)(vk_device device, uint32_t memory_range_count,
                                                                const vk_mapped_memory_range* p_memory_ranges);
typedef vk_result(VKAPI_PTR* pfn_vk_invalidate_mapped_memory_ranges)(vk_device device, uint32_t memory_range_count,
                                                                     const vk_mapped_memory_range* p_memory_ranges);
typedef void(VKAPI_PTR* pfn_vk_get_device_memory_commitment)(vk_device device, vk_device_memory memory,
                                                             vk_device_size* p_committed_memory_in_bytes);
typedef vk_result(VKAPI_PTR* pfn_vk_bind_buffer_memory)(vk_device device, vk_buffer buffer, vk_device_memory memory,
                                                        vk_device_size memory_offset);
typedef vk_result(VKAPI_PTR* pfn_vk_bind_image_memory)(vk_device device, vk_image image, vk_device_memory memory,
                                                       vk_device_size memory_offset);
typedef void(VKAPI_PTR* pfn_vk_get_buffer_memory_requirements)(vk_device device, vk_buffer buffer,
                                                               vk_memory_requirements* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_memory_requirements)(vk_device device, vk_image image,
                                                              vk_memory_requirements* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_sparse_memory_requirements)(
    vk_device device, vk_image image, uint32_t* p_sparse_memory_requirement_count,
    vk_sparse_image_memory_requirements* p_sparse_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_sparse_image_format_properties)(
    vk_physical_device physical_device, vk_format format, vk_image_type type, vk_sample_count_flag_bits samples,
    vk_image_usage_flags usage, vk_image_tiling tiling, uint32_t* p_property_count,
    vk_sparse_image_format_properties* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_queue_bind_sparse)(vk_queue queue, uint32_t bind_info_count,
                                                       const vk_bind_sparse_info* p_bind_info, vk_fence fence);
typedef vk_result(VKAPI_PTR* pfn_vk_create_fence)(vk_device device, const vk_fence_create_info* p_create_info,
                                                  const vk_allocation_callbacks* p_allocator, vk_fence* p_fence);
typedef void(VKAPI_PTR* pfn_vk_destroy_fence)(vk_device device, vk_fence fence,
                                              const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_reset_fences)(vk_device device, uint32_t fence_count, const vk_fence* p_fences);
typedef vk_result(VKAPI_PTR* pfn_vk_get_fence_status)(vk_device device, vk_fence fence);
typedef vk_result(VKAPI_PTR* pfn_vk_wait_for_fences)(vk_device device, uint32_t fence_count, const vk_fence* p_fences,
                                                     vk_bool32 wait_all, uint64_t timeout);
typedef vk_result(VKAPI_PTR* pfn_vk_create_semaphore)(vk_device device, const vk_semaphore_create_info* p_create_info,
                                                      const vk_allocation_callbacks* p_allocator,
                                                      vk_semaphore*                  p_semaphore);
typedef void(VKAPI_PTR* pfn_vk_destroy_semaphore)(vk_device device, vk_semaphore semaphore,
                                                  const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_event)(vk_device device, const vk_event_create_info* p_create_info,
                                                  const vk_allocation_callbacks* p_allocator, vk_event* p_event);
typedef void(VKAPI_PTR* pfn_vk_destroy_event)(vk_device device, vk_event event,
                                              const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_get_event_status)(vk_device device, vk_event event);
typedef vk_result(VKAPI_PTR* pfn_vk_set_event)(vk_device device, vk_event event);
typedef vk_result(VKAPI_PTR* pfn_vk_reset_event)(vk_device device, vk_event event);
typedef vk_result(VKAPI_PTR* pfn_vk_create_query_pool)(vk_device device, const vk_query_pool_create_info* p_create_info,
                                                       const vk_allocation_callbacks* p_allocator,
                                                       vk_query_pool*                 p_query_pool);
typedef void(VKAPI_PTR* pfn_vk_destroy_query_pool)(vk_device device, vk_query_pool query_pool,
                                                   const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_get_query_pool_results)(vk_device device, vk_query_pool query_pool,
                                                            uint32_t first_query, uint32_t query_count,
                                                            size_t data_size, void* p_data, vk_device_size stride,
                                                            vk_query_result_flags flags);
typedef vk_result(VKAPI_PTR* pfn_vk_create_buffer)(vk_device device, const vk_buffer_create_info* p_create_info,
                                                   const vk_allocation_callbacks* p_allocator, vk_buffer* p_buffer);
typedef void(VKAPI_PTR* pfn_vk_destroy_buffer)(vk_device device, vk_buffer buffer,
                                               const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_buffer_view)(vk_device                         device,
                                                        const vk_buffer_view_create_info* p_create_info,
                                                        const vk_allocation_callbacks*    p_allocator,
                                                        vk_buffer_view*                   p_view);
typedef void(VKAPI_PTR* pfn_vk_destroy_buffer_view)(vk_device device, vk_buffer_view buffer_view,
                                                    const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_image)(vk_device device, const vk_image_create_info* p_create_info,
                                                  const vk_allocation_callbacks* p_allocator, vk_image* p_image);
typedef void(VKAPI_PTR* pfn_vk_destroy_image)(vk_device device, vk_image image,
                                              const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_get_image_subresource_layout)(vk_device device, vk_image image,
                                                             const vk_image_subresource* p_subresource,
                                                             vk_subresource_layout*      p_layout);
typedef vk_result(VKAPI_PTR* pfn_vk_create_image_view)(vk_device device, const vk_image_view_create_info* p_create_info,
                                                       const vk_allocation_callbacks* p_allocator,
                                                       vk_image_view*                 p_view);
typedef void(VKAPI_PTR* pfn_vk_destroy_image_view)(vk_device device, vk_image_view image_view,
                                                   const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_shader_module)(vk_device                           device,
                                                          const vk_shader_module_create_info* p_create_info,
                                                          const vk_allocation_callbacks*      p_allocator,
                                                          vk_shader_module*                   p_shader_module);
typedef void(VKAPI_PTR* pfn_vk_destroy_shader_module)(vk_device device, vk_shader_module shader_module,
                                                      const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_pipeline_cache)(vk_device                            device,
                                                           const vk_pipeline_cache_create_info* p_create_info,
                                                           const vk_allocation_callbacks*       p_allocator,
                                                           vk_pipeline_cache*                   p_pipeline_cache);
typedef void(VKAPI_PTR* pfn_vk_destroy_pipeline_cache)(vk_device device, vk_pipeline_cache pipeline_cache,
                                                       const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_get_pipeline_cache_data)(vk_device device, vk_pipeline_cache pipeline_cache,
                                                             size_t* p_data_size, void* p_data);
typedef vk_result(VKAPI_PTR* pfn_vk_merge_pipeline_caches)(vk_device device, vk_pipeline_cache dst_cache,
                                                           uint32_t                 src_cache_count,
                                                           const vk_pipeline_cache* p_src_caches);
typedef vk_result(VKAPI_PTR* pfn_vk_create_graphics_pipelines)(vk_device device, vk_pipeline_cache pipeline_cache,
                                                               uint32_t create_info_count,
                                                               const vk_graphics_pipeline_create_info* p_create_infos,
                                                               const vk_allocation_callbacks*          p_allocator,
                                                               vk_pipeline*                            p_pipelines);
typedef vk_result(VKAPI_PTR* pfn_vk_create_compute_pipelines)(vk_device device, vk_pipeline_cache pipeline_cache,
                                                              uint32_t                               create_info_count,
                                                              const vk_compute_pipeline_create_info* p_create_infos,
                                                              const vk_allocation_callbacks*         p_allocator,
                                                              vk_pipeline*                           p_pipelines);
typedef void(VKAPI_PTR* pfn_vk_destroy_pipeline)(vk_device device, vk_pipeline pipeline,
                                                 const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_pipeline_layout)(vk_device                             device,
                                                            const vk_pipeline_layout_create_info* p_create_info,
                                                            const vk_allocation_callbacks*        p_allocator,
                                                            vk_pipeline_layout*                   p_pipeline_layout);
typedef void(VKAPI_PTR* pfn_vk_destroy_pipeline_layout)(vk_device device, vk_pipeline_layout pipeline_layout,
                                                        const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_sampler)(vk_device device, const vk_sampler_create_info* p_create_info,
                                                    const vk_allocation_callbacks* p_allocator, vk_sampler* p_sampler);
typedef void(VKAPI_PTR* pfn_vk_destroy_sampler)(vk_device device, vk_sampler sampler,
                                                const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_descriptor_set_layout)(
    vk_device device, const vk_descriptor_set_layout_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_descriptor_set_layout* p_set_layout);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_set_layout)(vk_device                      device,
                                                              vk_descriptor_set_layout       descriptor_set_layout,
                                                              const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_descriptor_pool)(vk_device                             device,
                                                            const vk_descriptor_pool_create_info* p_create_info,
                                                            const vk_allocation_callbacks*        p_allocator,
                                                            vk_descriptor_pool*                   p_descriptor_pool);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_pool)(vk_device device, vk_descriptor_pool descriptor_pool,
                                                        const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_reset_descriptor_pool)(vk_device device, vk_descriptor_pool descriptor_pool,
                                                           vk_descriptor_pool_reset_flags flags);
typedef vk_result(VKAPI_PTR* pfn_vk_allocate_descriptor_sets)(vk_device                              device,
                                                              const vk_descriptor_set_allocate_info* p_allocate_info,
                                                              vk_descriptor_set*                     p_descriptor_sets);
typedef vk_result(VKAPI_PTR* pfn_vk_free_descriptor_sets)(vk_device device, vk_descriptor_pool descriptor_pool,
                                                          uint32_t                 descriptor_set_count,
                                                          const vk_descriptor_set* p_descriptor_sets);
typedef void(VKAPI_PTR* pfn_vk_update_descriptor_sets)(vk_device device, uint32_t descriptor_write_count,
                                                       const vk_write_descriptor_set* p_descriptor_writes,
                                                       uint32_t                       descriptor_copy_count,
                                                       const vk_copy_descriptor_set*  p_descriptor_copies);
typedef vk_result(VKAPI_PTR* pfn_vk_create_framebuffer)(vk_device                         device,
                                                        const vk_framebuffer_create_info* p_create_info,
                                                        const vk_allocation_callbacks*    p_allocator,
                                                        vk_framebuffer*                   p_framebuffer);
typedef void(VKAPI_PTR* pfn_vk_destroy_framebuffer)(vk_device device, vk_framebuffer framebuffer,
                                                    const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_render_pass)(vk_device                         device,
                                                        const vk_render_pass_create_info* p_create_info,
                                                        const vk_allocation_callbacks*    p_allocator,
                                                        vk_render_pass*                   p_render_pass);
typedef void(VKAPI_PTR* pfn_vk_destroy_render_pass)(vk_device device, vk_render_pass render_pass,
                                                    const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_get_render_area_granularity)(vk_device device, vk_render_pass render_pass,
                                                            vk_extent2d* p_granularity);
typedef vk_result(VKAPI_PTR* pfn_vk_create_command_pool)(vk_device                          device,
                                                         const vk_command_pool_create_info* p_create_info,
                                                         const vk_allocation_callbacks*     p_allocator,
                                                         vk_command_pool*                   p_command_pool);
typedef void(VKAPI_PTR* pfn_vk_destroy_command_pool)(vk_device device, vk_command_pool command_pool,
                                                     const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_reset_command_pool)(vk_device device, vk_command_pool command_pool,
                                                        vk_command_pool_reset_flags flags);
typedef vk_result(VKAPI_PTR* pfn_vk_allocate_command_buffers)(vk_device                              device,
                                                              const vk_command_buffer_allocate_info* p_allocate_info,
                                                              vk_command_buffer*                     p_command_buffers);
typedef void(VKAPI_PTR* pfn_vk_free_command_buffers)(vk_device device, vk_command_pool command_pool,
                                                     uint32_t                 command_buffer_count,
                                                     const vk_command_buffer* p_command_buffers);
typedef vk_result(VKAPI_PTR* pfn_vk_begin_command_buffer)(vk_command_buffer                   command_buffer,
                                                          const vk_command_buffer_begin_info* p_begin_info);
typedef vk_result(VKAPI_PTR* pfn_vk_end_command_buffer)(vk_command_buffer command_buffer);
typedef vk_result(VKAPI_PTR* pfn_vk_reset_command_buffer)(vk_command_buffer             command_buffer,
                                                          vk_command_buffer_reset_flags flags);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_pipeline)(vk_command_buffer      command_buffer,
                                                  vk_pipeline_bind_point pipeline_bind_point, vk_pipeline pipeline);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport)(vk_command_buffer command_buffer, uint32_t first_viewport,
                                                 uint32_t viewport_count, const vk_viewport* p_viewports);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_scissor)(vk_command_buffer command_buffer, uint32_t first_scissor,
                                                uint32_t scissor_count, const vk_rect2d* p_scissors);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_line_width)(vk_command_buffer command_buffer, float line_width);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_bias)(vk_command_buffer command_buffer, float depth_bias_constant_factor,
                                                   float depth_bias_clamp, float depth_bias_slope_factor);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_blend_constants)(vk_command_buffer command_buffer,
                                                        const float       blend_constants[4]);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_bounds)(vk_command_buffer command_buffer, float min_depth_bounds,
                                                     float max_depth_bounds);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_compare_mask)(vk_command_buffer     command_buffer,
                                                             vk_stencil_face_flags face_mask, uint32_t compare_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_write_mask)(vk_command_buffer     command_buffer,
                                                           vk_stencil_face_flags face_mask, uint32_t write_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_reference)(vk_command_buffer     command_buffer,
                                                          vk_stencil_face_flags face_mask, uint32_t reference);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_descriptor_sets)(
    vk_command_buffer command_buffer, vk_pipeline_bind_point pipeline_bind_point, vk_pipeline_layout layout,
    uint32_t first_set, uint32_t descriptor_set_count, const vk_descriptor_set* p_descriptor_sets,
    uint32_t dynamic_offset_count, const uint32_t* p_dynamic_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_index_buffer)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                      vk_device_size offset, vk_index_type index_type);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_vertex_buffers)(vk_command_buffer command_buffer, uint32_t first_binding,
                                                        uint32_t binding_count, const vk_buffer* p_buffers,
                                                        const vk_device_size* p_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw)(vk_command_buffer command_buffer, uint32_t vertex_count,
                                         uint32_t instance_count, uint32_t first_vertex, uint32_t first_instance);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed)(vk_command_buffer command_buffer, uint32_t index_count,
                                                 uint32_t instance_count, uint32_t first_index, int32_t vertex_offset,
                                                 uint32_t first_instance);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                  vk_device_size offset, uint32_t draw_count, uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                          vk_device_size offset, uint32_t draw_count, uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch)(vk_command_buffer command_buffer, uint32_t group_count_x,
                                             uint32_t group_count_y, uint32_t group_count_z);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch_indirect)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                      vk_device_size offset);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer)(vk_command_buffer command_buffer, vk_buffer src_buffer,
                                                vk_buffer dst_buffer, uint32_t region_count,
                                                const vk_buffer_copy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image)(vk_command_buffer command_buffer, vk_image src_image,
                                               vk_image_layout src_image_layout, vk_image dst_image,
                                               vk_image_layout dst_image_layout, uint32_t region_count,
                                               const vk_image_copy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_blit_image)(vk_command_buffer command_buffer, vk_image src_image,
                                               vk_image_layout src_image_layout, vk_image dst_image,
                                               vk_image_layout dst_image_layout, uint32_t region_count,
                                               const vk_image_blit* p_regions, vk_filter filter);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer_to_image)(vk_command_buffer command_buffer, vk_buffer src_buffer,
                                                         vk_image dst_image, vk_image_layout dst_image_layout,
                                                         uint32_t region_count, const vk_buffer_image_copy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image_to_buffer)(vk_command_buffer command_buffer, vk_image src_image,
                                                         vk_image_layout src_image_layout, vk_buffer dst_buffer,
                                                         uint32_t region_count, const vk_buffer_image_copy* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_update_buffer)(vk_command_buffer command_buffer, vk_buffer dst_buffer,
                                                  vk_device_size dst_offset, vk_device_size data_size,
                                                  const void* p_data);
typedef void(VKAPI_PTR* pfn_vk_cmd_fill_buffer)(vk_command_buffer command_buffer, vk_buffer dst_buffer,
                                                vk_device_size dst_offset, vk_device_size size, uint32_t data);
typedef void(VKAPI_PTR* pfn_vk_cmd_clear_color_image)(vk_command_buffer command_buffer, vk_image image,
                                                      vk_image_layout image_layout, const vk_clear_color_value* p_color,
                                                      uint32_t range_count, const vk_image_subresource_range* p_ranges);
typedef void(VKAPI_PTR* pfn_vk_cmd_clear_depth_stencil_image)(vk_command_buffer command_buffer, vk_image image,
                                                              vk_image_layout                     image_layout,
                                                              const vk_clear_depth_stencil_value* p_depth_stencil,
                                                              uint32_t                            range_count,
                                                              const vk_image_subresource_range*   p_ranges);
typedef void(VKAPI_PTR* pfn_vk_cmd_clear_attachments)(vk_command_buffer command_buffer, uint32_t attachment_count,
                                                      const vk_clear_attachment* p_attachments, uint32_t rect_count,
                                                      const vk_clear_rect* p_rects);
typedef void(VKAPI_PTR* pfn_vk_cmd_resolve_image)(vk_command_buffer command_buffer, vk_image src_image,
                                                  vk_image_layout src_image_layout, vk_image dst_image,
                                                  vk_image_layout dst_image_layout, uint32_t region_count,
                                                  const vk_image_resolve* p_regions);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_event)(vk_command_buffer command_buffer, vk_event event,
                                              vk_pipeline_stage_flags stage_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_reset_event)(vk_command_buffer command_buffer, vk_event event,
                                                vk_pipeline_stage_flags stage_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_wait_events)(vk_command_buffer command_buffer, uint32_t event_count,
                                                const vk_event* p_events, vk_pipeline_stage_flags src_stage_mask,
                                                vk_pipeline_stage_flags dst_stage_mask, uint32_t memory_barrier_count,
                                                const vk_memory_barrier*        p_memory_barriers,
                                                uint32_t                        buffer_memory_barrier_count,
                                                const vk_buffer_memory_barrier* p_buffer_memory_barriers,
                                                uint32_t                        image_memory_barrier_count,
                                                const vk_image_memory_barrier*  p_image_memory_barriers);
typedef void(VKAPI_PTR* pfn_vk_cmd_pipeline_barrier)(
    vk_command_buffer command_buffer, vk_pipeline_stage_flags src_stage_mask, vk_pipeline_stage_flags dst_stage_mask,
    vk_dependency_flags dependency_flags, uint32_t memory_barrier_count, const vk_memory_barrier* p_memory_barriers,
    uint32_t buffer_memory_barrier_count, const vk_buffer_memory_barrier* p_buffer_memory_barriers,
    uint32_t image_memory_barrier_count, const vk_image_memory_barrier* p_image_memory_barriers);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_query)(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                uint32_t query, vk_query_control_flags flags);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_query)(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                              uint32_t query);
typedef void(VKAPI_PTR* pfn_vk_cmd_reset_query_pool)(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                     uint32_t first_query, uint32_t query_count);
typedef void(VKAPI_PTR* pfn_vk_cmd_write_timestamp)(vk_command_buffer           command_buffer,
                                                    vk_pipeline_stage_flag_bits pipeline_stage,
                                                    vk_query_pool query_pool, uint32_t query);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_query_pool_results)(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                            uint32_t first_query, uint32_t query_count,
                                                            vk_buffer dst_buffer, vk_device_size dst_offset,
                                                            vk_device_size stride, vk_query_result_flags flags);
typedef void(VKAPI_PTR* pfn_vk_cmd_push_constants)(vk_command_buffer command_buffer, vk_pipeline_layout layout,
                                                   vk_shader_stage_flags stage_flags, uint32_t offset, uint32_t size,
                                                   const void* p_values);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_render_pass)(vk_command_buffer                command_buffer,
                                                      const vk_render_pass_begin_info* p_render_pass_begin,
                                                      vk_subpass_contents              contents);
typedef void(VKAPI_PTR* pfn_vk_cmd_next_subpass)(vk_command_buffer command_buffer, vk_subpass_contents contents);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_render_pass)(vk_command_buffer command_buffer);
typedef void(VKAPI_PTR* pfn_vk_cmd_execute_commands)(vk_command_buffer command_buffer, uint32_t command_buffer_count,
                                                     const vk_command_buffer* p_command_buffers);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_instance(const vk_instance_create_info* p_create_info,
                                                   const vk_allocation_callbacks* p_allocator,
                                                   vk_instance*                   p_instance) __asm("vkCreateInstance");

VKAPI_ATTR void VKAPI_CALL vk_destroy_instance(vk_instance                    instance,
                                               const vk_allocation_callbacks* p_allocator) __asm("vkDestroyInstance");

VKAPI_ATTR vk_result VKAPI_CALL
vk_enumerate_physical_devices(vk_instance instance, uint32_t* p_physical_device_count,
                              vk_physical_device* p_physical_devices) __asm("vkEnumeratePhysicalDevices");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_features(
    vk_physical_device physical_device, vk_physical_device_features* p_features) __asm("vkGetPhysicalDeviceFeatures");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_format_properties(
    vk_physical_device physical_device, vk_format format,
    vk_format_properties* p_format_properties) __asm("vkGetPhysicalDeviceFormatProperties");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_image_format_properties(
    vk_physical_device physical_device, vk_format format, vk_image_type type, vk_image_tiling tiling,
    vk_image_usage_flags usage, vk_image_create_flags flags,
    vk_image_format_properties* p_image_format_properties) __asm("vkGetPhysicalDeviceImageFormatProperties");

VKAPI_ATTR void VKAPI_CALL
vk_get_physical_device_properties(vk_physical_device             physical_device,
                                  vk_physical_device_properties* p_properties) __asm("vkGetPhysicalDeviceProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_properties(
    vk_physical_device physical_device, uint32_t* p_queue_family_property_count,
    vk_queue_family_properties* p_queue_family_properties) __asm("vkGetPhysicalDeviceQueueFamilyProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_memory_properties(
    vk_physical_device                    physical_device,
    vk_physical_device_memory_properties* p_memory_properties) __asm("vkGetPhysicalDeviceMemoryProperties");

VKAPI_ATTR pfn_vk_void_function VKAPI_CALL vk_get_instance_proc_addr(vk_instance instance,
                                                                     const char* p_name) __asm("vkGetInstanceProcAddr");

VKAPI_ATTR pfn_vk_void_function VKAPI_CALL vk_get_device_proc_addr(vk_device   device,
                                                                   const char* p_name) __asm("vkGetDeviceProcAddr");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_device(vk_physical_device             physical_device,
                                                 const vk_device_create_info*   p_create_info,
                                                 const vk_allocation_callbacks* p_allocator,
                                                 vk_device*                     p_device) __asm("vkCreateDevice");

VKAPI_ATTR void VKAPI_CALL vk_destroy_device(vk_device                      device,
                                             const vk_allocation_callbacks* p_allocator) __asm("vkDestroyDevice");

VKAPI_ATTR vk_result VKAPI_CALL vk_enumerate_instance_extension_properties(
    const char* p_layer_name, uint32_t* p_property_count,
    vk_extension_properties* p_properties) __asm("vkEnumerateInstanceExtensionProperties");

VKAPI_ATTR vk_result VKAPI_CALL vk_enumerate_device_extension_properties(
    vk_physical_device physical_device, const char* p_layer_name, uint32_t* p_property_count,
    vk_extension_properties* p_properties) __asm("vkEnumerateDeviceExtensionProperties");

VKAPI_ATTR vk_result VKAPI_CALL vk_enumerate_instance_layer_properties(
    uint32_t* p_property_count, vk_layer_properties* p_properties) __asm("vkEnumerateInstanceLayerProperties");

VKAPI_ATTR vk_result VKAPI_CALL
vk_enumerate_device_layer_properties(vk_physical_device physical_device, uint32_t* p_property_count,
                                     vk_layer_properties* p_properties) __asm("vkEnumerateDeviceLayerProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_device_queue(vk_device device, uint32_t queue_family_index, uint32_t queue_index,
                                               vk_queue* p_queue) __asm("vkGetDeviceQueue");

VKAPI_ATTR vk_result VKAPI_CALL vk_queue_submit(vk_queue queue, uint32_t submit_count, const vk_submit_info* p_submits,
                                                vk_fence fence) __asm("vkQueueSubmit");

VKAPI_ATTR vk_result VKAPI_CALL vk_queue_wait_idle(vk_queue queue) __asm("vkQueueWaitIdle");

VKAPI_ATTR vk_result VKAPI_CALL vk_device_wait_idle(vk_device device) __asm("vkDeviceWaitIdle");

VKAPI_ATTR vk_result VKAPI_CALL vk_allocate_memory(vk_device device, const vk_memory_allocate_info* p_allocate_info,
                                                   const vk_allocation_callbacks* p_allocator,
                                                   vk_device_memory*              p_memory) __asm("vkAllocateMemory");

VKAPI_ATTR void VKAPI_CALL vk_free_memory(vk_device device, vk_device_memory memory,
                                          const vk_allocation_callbacks* p_allocator) __asm("vkFreeMemory");

VKAPI_ATTR vk_result VKAPI_CALL vk_map_memory(vk_device device, vk_device_memory memory, vk_device_size offset,
                                              vk_device_size size, vk_memory_map_flags flags,
                                              void** pp_data) __asm("vkMapMemory");

VKAPI_ATTR void VKAPI_CALL vk_unmap_memory(vk_device device, vk_device_memory memory) __asm("vkUnmapMemory");

VKAPI_ATTR vk_result VKAPI_CALL
vk_flush_mapped_memory_ranges(vk_device device, uint32_t memory_range_count,
                              const vk_mapped_memory_range* p_memory_ranges) __asm("vkFlushMappedMemoryRanges");

VKAPI_ATTR vk_result VKAPI_CALL vk_invalidate_mapped_memory_ranges(
    vk_device device, uint32_t memory_range_count,
    const vk_mapped_memory_range* p_memory_ranges) __asm("vkInvalidateMappedMemoryRanges");

VKAPI_ATTR void VKAPI_CALL
vk_get_device_memory_commitment(vk_device device, vk_device_memory memory,
                                vk_device_size* p_committed_memory_in_bytes) __asm("vkGetDeviceMemoryCommitment");

VKAPI_ATTR vk_result VKAPI_CALL vk_bind_buffer_memory(vk_device device, vk_buffer buffer, vk_device_memory memory,
                                                      vk_device_size memory_offset) __asm("vkBindBufferMemory");

VKAPI_ATTR vk_result VKAPI_CALL vk_bind_image_memory(vk_device device, vk_image image, vk_device_memory memory,
                                                     vk_device_size memory_offset) __asm("vkBindImageMemory");

VKAPI_ATTR void VKAPI_CALL
vk_get_buffer_memory_requirements(vk_device device, vk_buffer buffer,
                                  vk_memory_requirements* p_memory_requirements) __asm("vkGetBufferMemoryRequirements");

VKAPI_ATTR void VKAPI_CALL
vk_get_image_memory_requirements(vk_device device, vk_image image,
                                 vk_memory_requirements* p_memory_requirements) __asm("vkGetImageMemoryRequirements");

VKAPI_ATTR void VKAPI_CALL vk_get_image_sparse_memory_requirements(
    vk_device device, vk_image image, uint32_t* p_sparse_memory_requirement_count,
    vk_sparse_image_memory_requirements* p_sparse_memory_requirements) __asm("vkGetImageSparseMemoryRequirements");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_sparse_image_format_properties(
    vk_physical_device physical_device, vk_format format, vk_image_type type, vk_sample_count_flag_bits samples,
    vk_image_usage_flags usage, vk_image_tiling tiling, uint32_t* p_property_count,
    vk_sparse_image_format_properties* p_properties) __asm("vkGetPhysicalDeviceSparseImageFormatProperties");

VKAPI_ATTR vk_result VKAPI_CALL vk_queue_bind_sparse(vk_queue queue, uint32_t bind_info_count,
                                                     const vk_bind_sparse_info* p_bind_info,
                                                     vk_fence                   fence) __asm("vkQueueBindSparse");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_fence(vk_device device, const vk_fence_create_info* p_create_info,
                                                const vk_allocation_callbacks* p_allocator,
                                                vk_fence*                      p_fence) __asm("vkCreateFence");

VKAPI_ATTR void VKAPI_CALL vk_destroy_fence(vk_device device, vk_fence fence,
                                            const vk_allocation_callbacks* p_allocator) __asm("vkDestroyFence");

VKAPI_ATTR vk_result VKAPI_CALL vk_reset_fences(vk_device device, uint32_t fence_count,
                                                const vk_fence* p_fences) __asm("vkResetFences");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_fence_status(vk_device device, vk_fence fence) __asm("vkGetFenceStatus");

VKAPI_ATTR vk_result VKAPI_CALL vk_wait_for_fences(vk_device device, uint32_t fence_count, const vk_fence* p_fences,
                                                   vk_bool32 wait_all, uint64_t timeout) __asm("vkWaitForFences");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_semaphore(vk_device device, const vk_semaphore_create_info* p_create_info,
                                                    const vk_allocation_callbacks* p_allocator,
                                                    vk_semaphore* p_semaphore) __asm("vkCreateSemaphore");

VKAPI_ATTR void VKAPI_CALL vk_destroy_semaphore(vk_device device, vk_semaphore semaphore,
                                                const vk_allocation_callbacks* p_allocator) __asm("vkDestroySemaphore");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_event(vk_device device, const vk_event_create_info* p_create_info,
                                                const vk_allocation_callbacks* p_allocator,
                                                vk_event*                      p_event) __asm("vkCreateEvent");

VKAPI_ATTR void VKAPI_CALL vk_destroy_event(vk_device device, vk_event event,
                                            const vk_allocation_callbacks* p_allocator) __asm("vkDestroyEvent");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_event_status(vk_device device, vk_event event) __asm("vkGetEventStatus");

VKAPI_ATTR vk_result VKAPI_CALL vk_set_event(vk_device device, vk_event event) __asm("vkSetEvent");

VKAPI_ATTR vk_result VKAPI_CALL vk_reset_event(vk_device device, vk_event event) __asm("vkResetEvent");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_query_pool(vk_device device, const vk_query_pool_create_info* p_create_info,
                                                     const vk_allocation_callbacks* p_allocator,
                                                     vk_query_pool* p_query_pool) __asm("vkCreateQueryPool");

VKAPI_ATTR void VKAPI_CALL vk_destroy_query_pool(
    vk_device device, vk_query_pool query_pool, const vk_allocation_callbacks* p_allocator) __asm("vkDestroyQueryPool");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_query_pool_results(vk_device device, vk_query_pool query_pool,
                                                          uint32_t first_query, uint32_t query_count, size_t data_size,
                                                          void* p_data, vk_device_size stride,
                                                          vk_query_result_flags flags) __asm("vkGetQueryPoolResults");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_buffer(vk_device device, const vk_buffer_create_info* p_create_info,
                                                 const vk_allocation_callbacks* p_allocator,
                                                 vk_buffer*                     p_buffer) __asm("vkCreateBuffer");

VKAPI_ATTR void VKAPI_CALL vk_destroy_buffer(vk_device device, vk_buffer buffer,
                                             const vk_allocation_callbacks* p_allocator) __asm("vkDestroyBuffer");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_buffer_view(vk_device device, const vk_buffer_view_create_info* p_create_info,
                                                      const vk_allocation_callbacks* p_allocator,
                                                      vk_buffer_view* p_view) __asm("vkCreateBufferView");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_buffer_view(vk_device device, vk_buffer_view buffer_view,
                       const vk_allocation_callbacks* p_allocator) __asm("vkDestroyBufferView");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_image(vk_device device, const vk_image_create_info* p_create_info,
                                                const vk_allocation_callbacks* p_allocator,
                                                vk_image*                      p_image) __asm("vkCreateImage");

VKAPI_ATTR void VKAPI_CALL vk_destroy_image(vk_device device, vk_image image,
                                            const vk_allocation_callbacks* p_allocator) __asm("vkDestroyImage");

VKAPI_ATTR void VKAPI_CALL
vk_get_image_subresource_layout(vk_device device, vk_image image, const vk_image_subresource* p_subresource,
                                vk_subresource_layout* p_layout) __asm("vkGetImageSubresourceLayout");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_image_view(vk_device device, const vk_image_view_create_info* p_create_info,
                                                     const vk_allocation_callbacks* p_allocator,
                                                     vk_image_view*                 p_view) __asm("vkCreateImageView");

VKAPI_ATTR void VKAPI_CALL vk_destroy_image_view(
    vk_device device, vk_image_view image_view, const vk_allocation_callbacks* p_allocator) __asm("vkDestroyImageView");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_shader_module(
    vk_device device, const vk_shader_module_create_info* p_create_info, const vk_allocation_callbacks* p_allocator,
    vk_shader_module* p_shader_module) __asm("vkCreateShaderModule");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_shader_module(vk_device device, vk_shader_module shader_module,
                         const vk_allocation_callbacks* p_allocator) __asm("vkDestroyShaderModule");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_pipeline_cache(
    vk_device device, const vk_pipeline_cache_create_info* p_create_info, const vk_allocation_callbacks* p_allocator,
    vk_pipeline_cache* p_pipeline_cache) __asm("vkCreatePipelineCache");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_pipeline_cache(vk_device device, vk_pipeline_cache pipeline_cache,
                          const vk_allocation_callbacks* p_allocator) __asm("vkDestroyPipelineCache");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_pipeline_cache_data(vk_device device, vk_pipeline_cache pipeline_cache,
                                                           size_t* p_data_size,
                                                           void*   p_data) __asm("vkGetPipelineCacheData");

VKAPI_ATTR vk_result VKAPI_CALL
vk_merge_pipeline_caches(vk_device device, vk_pipeline_cache dst_cache, uint32_t src_cache_count,
                         const vk_pipeline_cache* p_src_caches) __asm("vkMergePipelineCaches");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_graphics_pipelines(
    vk_device device, vk_pipeline_cache pipeline_cache, uint32_t create_info_count,
    const vk_graphics_pipeline_create_info* p_create_infos, const vk_allocation_callbacks* p_allocator,
    vk_pipeline* p_pipelines) __asm("vkCreateGraphicsPipelines");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_compute_pipelines(vk_device device, vk_pipeline_cache pipeline_cache,
                                                            uint32_t                               create_info_count,
                                                            const vk_compute_pipeline_create_info* p_create_infos,
                                                            const vk_allocation_callbacks*         p_allocator,
                                                            vk_pipeline* p_pipelines) __asm("vkCreateComputePipelines");

VKAPI_ATTR void VKAPI_CALL vk_destroy_pipeline(vk_device device, vk_pipeline pipeline,
                                               const vk_allocation_callbacks* p_allocator) __asm("vkDestroyPipeline");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_pipeline_layout(
    vk_device device, const vk_pipeline_layout_create_info* p_create_info, const vk_allocation_callbacks* p_allocator,
    vk_pipeline_layout* p_pipeline_layout) __asm("vkCreatePipelineLayout");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_pipeline_layout(vk_device device, vk_pipeline_layout pipeline_layout,
                           const vk_allocation_callbacks* p_allocator) __asm("vkDestroyPipelineLayout");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_sampler(vk_device device, const vk_sampler_create_info* p_create_info,
                                                  const vk_allocation_callbacks* p_allocator,
                                                  vk_sampler*                    p_sampler) __asm("vkCreateSampler");

VKAPI_ATTR void VKAPI_CALL vk_destroy_sampler(vk_device device, vk_sampler sampler,
                                              const vk_allocation_callbacks* p_allocator) __asm("vkDestroySampler");

VKAPI_ATTR vk_result VKAPI_CALL
vk_create_descriptor_set_layout(vk_device device, const vk_descriptor_set_layout_create_info* p_create_info,
                                const vk_allocation_callbacks* p_allocator,
                                vk_descriptor_set_layout*      p_set_layout) __asm("vkCreateDescriptorSetLayout");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_descriptor_set_layout(vk_device device, vk_descriptor_set_layout descriptor_set_layout,
                                 const vk_allocation_callbacks* p_allocator) __asm("vkDestroyDescriptorSetLayout");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_descriptor_pool(
    vk_device device, const vk_descriptor_pool_create_info* p_create_info, const vk_allocation_callbacks* p_allocator,
    vk_descriptor_pool* p_descriptor_pool) __asm("vkCreateDescriptorPool");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_descriptor_pool(vk_device device, vk_descriptor_pool descriptor_pool,
                           const vk_allocation_callbacks* p_allocator) __asm("vkDestroyDescriptorPool");

VKAPI_ATTR vk_result VKAPI_CALL
vk_reset_descriptor_pool(vk_device device, vk_descriptor_pool descriptor_pool,
                         vk_descriptor_pool_reset_flags flags) __asm("vkResetDescriptorPool");

VKAPI_ATTR vk_result VKAPI_CALL
vk_allocate_descriptor_sets(vk_device device, const vk_descriptor_set_allocate_info* p_allocate_info,
                            vk_descriptor_set* p_descriptor_sets) __asm("vkAllocateDescriptorSets");

VKAPI_ATTR vk_result VKAPI_CALL
vk_free_descriptor_sets(vk_device device, vk_descriptor_pool descriptor_pool, uint32_t descriptor_set_count,
                        const vk_descriptor_set* p_descriptor_sets) __asm("vkFreeDescriptorSets");

VKAPI_ATTR void VKAPI_CALL vk_update_descriptor_sets(
    vk_device device, uint32_t descriptor_write_count, const vk_write_descriptor_set* p_descriptor_writes,
    uint32_t descriptor_copy_count, const vk_copy_descriptor_set* p_descriptor_copies) __asm("vkUpdateDescriptorSets");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_framebuffer(vk_device device, const vk_framebuffer_create_info* p_create_info,
                                                      const vk_allocation_callbacks* p_allocator,
                                                      vk_framebuffer* p_framebuffer) __asm("vkCreateFramebuffer");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_framebuffer(vk_device device, vk_framebuffer framebuffer,
                       const vk_allocation_callbacks* p_allocator) __asm("vkDestroyFramebuffer");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_render_pass(vk_device device, const vk_render_pass_create_info* p_create_info,
                                                      const vk_allocation_callbacks* p_allocator,
                                                      vk_render_pass* p_render_pass) __asm("vkCreateRenderPass");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_render_pass(vk_device device, vk_render_pass render_pass,
                       const vk_allocation_callbacks* p_allocator) __asm("vkDestroyRenderPass");

VKAPI_ATTR void VKAPI_CALL vk_get_render_area_granularity(
    vk_device device, vk_render_pass render_pass, vk_extent2d* p_granularity) __asm("vkGetRenderAreaGranularity");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_command_pool(vk_device                          device,
                                                       const vk_command_pool_create_info* p_create_info,
                                                       const vk_allocation_callbacks*     p_allocator,
                                                       vk_command_pool* p_command_pool) __asm("vkCreateCommandPool");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_command_pool(vk_device device, vk_command_pool command_pool,
                        const vk_allocation_callbacks* p_allocator) __asm("vkDestroyCommandPool");

VKAPI_ATTR vk_result VKAPI_CALL vk_reset_command_pool(vk_device device, vk_command_pool command_pool,
                                                      vk_command_pool_reset_flags flags) __asm("vkResetCommandPool");

VKAPI_ATTR vk_result VKAPI_CALL
vk_allocate_command_buffers(vk_device device, const vk_command_buffer_allocate_info* p_allocate_info,
                            vk_command_buffer* p_command_buffers) __asm("vkAllocateCommandBuffers");

VKAPI_ATTR void VKAPI_CALL
vk_free_command_buffers(vk_device device, vk_command_pool command_pool, uint32_t command_buffer_count,
                        const vk_command_buffer* p_command_buffers) __asm("vkFreeCommandBuffers");

VKAPI_ATTR vk_result VKAPI_CALL vk_begin_command_buffer(
    vk_command_buffer command_buffer, const vk_command_buffer_begin_info* p_begin_info) __asm("vkBeginCommandBuffer");

VKAPI_ATTR vk_result VKAPI_CALL vk_end_command_buffer(vk_command_buffer command_buffer) __asm("vkEndCommandBuffer");

VKAPI_ATTR vk_result VKAPI_CALL vk_reset_command_buffer(
    vk_command_buffer command_buffer, vk_command_buffer_reset_flags flags) __asm("vkResetCommandBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_pipeline(vk_command_buffer      command_buffer,
                                                vk_pipeline_bind_point pipeline_bind_point,
                                                vk_pipeline            pipeline) __asm("vkCmdBindPipeline");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_viewport(vk_command_buffer command_buffer, uint32_t first_viewport,
                                               uint32_t           viewport_count,
                                               const vk_viewport* p_viewports) __asm("vkCmdSetViewport");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_scissor(vk_command_buffer command_buffer, uint32_t first_scissor,
                                              uint32_t         scissor_count,
                                              const vk_rect2d* p_scissors) __asm("vkCmdSetScissor");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_line_width(vk_command_buffer command_buffer,
                                                 float             line_width) __asm("vkCmdSetLineWidth");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_bias(vk_command_buffer command_buffer, float depth_bias_constant_factor,
                                                 float depth_bias_clamp,
                                                 float depth_bias_slope_factor) __asm("vkCmdSetDepthBias");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_blend_constants(vk_command_buffer command_buffer,
                                                      const float blend_constants[4]) __asm("vkCmdSetBlendConstants");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_bounds(vk_command_buffer command_buffer, float min_depth_bounds,
                                                   float max_depth_bounds) __asm("vkCmdSetDepthBounds");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_compare_mask(vk_command_buffer     command_buffer,
                                                           vk_stencil_face_flags face_mask,
                                                           uint32_t compare_mask) __asm("vkCmdSetStencilCompareMask");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_write_mask(vk_command_buffer     command_buffer,
                                                         vk_stencil_face_flags face_mask,
                                                         uint32_t write_mask) __asm("vkCmdSetStencilWriteMask");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_reference(vk_command_buffer     command_buffer,
                                                        vk_stencil_face_flags face_mask,
                                                        uint32_t reference) __asm("vkCmdSetStencilReference");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_descriptor_sets(
    vk_command_buffer command_buffer, vk_pipeline_bind_point pipeline_bind_point, vk_pipeline_layout layout,
    uint32_t first_set, uint32_t descriptor_set_count, const vk_descriptor_set* p_descriptor_sets,
    uint32_t dynamic_offset_count, const uint32_t* p_dynamic_offsets) __asm("vkCmdBindDescriptorSets");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_index_buffer(vk_command_buffer command_buffer, vk_buffer buffer,
                                                    vk_device_size offset,
                                                    vk_index_type  index_type) __asm("vkCmdBindIndexBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_vertex_buffers(vk_command_buffer command_buffer, uint32_t first_binding,
                                                      uint32_t binding_count, const vk_buffer* p_buffers,
                                                      const vk_device_size* p_offsets) __asm("vkCmdBindVertexBuffers");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw(vk_command_buffer command_buffer, uint32_t vertex_count, uint32_t instance_count,
                                       uint32_t first_vertex, uint32_t first_instance) __asm("vkCmdDraw");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed(vk_command_buffer command_buffer, uint32_t index_count,
                                               uint32_t instance_count, uint32_t first_index, int32_t vertex_offset,
                                               uint32_t first_instance) __asm("vkCmdDrawIndexed");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect(vk_command_buffer command_buffer, vk_buffer buffer,
                                                vk_device_size offset, uint32_t draw_count,
                                                uint32_t stride) __asm("vkCmdDrawIndirect");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed_indirect(vk_command_buffer command_buffer, vk_buffer buffer,
                                                        vk_device_size offset, uint32_t draw_count,
                                                        uint32_t stride) __asm("vkCmdDrawIndexedIndirect");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch(vk_command_buffer command_buffer, uint32_t group_count_x,
                                           uint32_t group_count_y, uint32_t group_count_z) __asm("vkCmdDispatch");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch_indirect(vk_command_buffer command_buffer, vk_buffer buffer,
                                                    vk_device_size offset) __asm("vkCmdDispatchIndirect");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer(vk_command_buffer command_buffer, vk_buffer src_buffer,
                                              vk_buffer dst_buffer, uint32_t region_count,
                                              const vk_buffer_copy* p_regions) __asm("vkCmdCopyBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image(vk_command_buffer command_buffer, vk_image src_image,
                                             vk_image_layout src_image_layout, vk_image dst_image,
                                             vk_image_layout dst_image_layout, uint32_t region_count,
                                             const vk_image_copy* p_regions) __asm("vkCmdCopyImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_blit_image(vk_command_buffer command_buffer, vk_image src_image,
                                             vk_image_layout src_image_layout, vk_image dst_image,
                                             vk_image_layout dst_image_layout, uint32_t region_count,
                                             const vk_image_blit* p_regions, vk_filter filter) __asm("vkCmdBlitImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer_to_image(
    vk_command_buffer command_buffer, vk_buffer src_buffer, vk_image dst_image, vk_image_layout dst_image_layout,
    uint32_t region_count, const vk_buffer_image_copy* p_regions) __asm("vkCmdCopyBufferToImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image_to_buffer(
    vk_command_buffer command_buffer, vk_image src_image, vk_image_layout src_image_layout, vk_buffer dst_buffer,
    uint32_t region_count, const vk_buffer_image_copy* p_regions) __asm("vkCmdCopyImageToBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_update_buffer(vk_command_buffer command_buffer, vk_buffer dst_buffer,
                                                vk_device_size dst_offset, vk_device_size data_size,
                                                const void* p_data) __asm("vkCmdUpdateBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_fill_buffer(vk_command_buffer command_buffer, vk_buffer dst_buffer,
                                              vk_device_size dst_offset, vk_device_size size,
                                              uint32_t data) __asm("vkCmdFillBuffer");

VKAPI_ATTR void VKAPI_CALL vk_cmd_clear_color_image(
    vk_command_buffer command_buffer, vk_image image, vk_image_layout image_layout, const vk_clear_color_value* p_color,
    uint32_t range_count, const vk_image_subresource_range* p_ranges) __asm("vkCmdClearColorImage");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_clear_depth_stencil_image(vk_command_buffer command_buffer, vk_image image, vk_image_layout image_layout,
                                 const vk_clear_depth_stencil_value* p_depth_stencil, uint32_t range_count,
                                 const vk_image_subresource_range* p_ranges) __asm("vkCmdClearDepthStencilImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_clear_attachments(vk_command_buffer command_buffer, uint32_t attachment_count,
                                                    const vk_clear_attachment* p_attachments, uint32_t rect_count,
                                                    const vk_clear_rect* p_rects) __asm("vkCmdClearAttachments");

VKAPI_ATTR void VKAPI_CALL vk_cmd_resolve_image(vk_command_buffer command_buffer, vk_image src_image,
                                                vk_image_layout src_image_layout, vk_image dst_image,
                                                vk_image_layout dst_image_layout, uint32_t region_count,
                                                const vk_image_resolve* p_regions) __asm("vkCmdResolveImage");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_event(vk_command_buffer command_buffer, vk_event event,
                                            vk_pipeline_stage_flags stage_mask) __asm("vkCmdSetEvent");

VKAPI_ATTR void VKAPI_CALL vk_cmd_reset_event(vk_command_buffer command_buffer, vk_event event,
                                              vk_pipeline_stage_flags stage_mask) __asm("vkCmdResetEvent");

VKAPI_ATTR void VKAPI_CALL vk_cmd_wait_events(
    vk_command_buffer command_buffer, uint32_t event_count, const vk_event* p_events,
    vk_pipeline_stage_flags src_stage_mask, vk_pipeline_stage_flags dst_stage_mask, uint32_t memory_barrier_count,
    const vk_memory_barrier* p_memory_barriers, uint32_t buffer_memory_barrier_count,
    const vk_buffer_memory_barrier* p_buffer_memory_barriers, uint32_t image_memory_barrier_count,
    const vk_image_memory_barrier* p_image_memory_barriers) __asm("vkCmdWaitEvents");

VKAPI_ATTR void VKAPI_CALL vk_cmd_pipeline_barrier(
    vk_command_buffer command_buffer, vk_pipeline_stage_flags src_stage_mask, vk_pipeline_stage_flags dst_stage_mask,
    vk_dependency_flags dependency_flags, uint32_t memory_barrier_count, const vk_memory_barrier* p_memory_barriers,
    uint32_t buffer_memory_barrier_count, const vk_buffer_memory_barrier* p_buffer_memory_barriers,
    uint32_t                       image_memory_barrier_count,
    const vk_image_memory_barrier* p_image_memory_barriers) __asm("vkCmdPipelineBarrier");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_query(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                              uint32_t query, vk_query_control_flags flags) __asm("vkCmdBeginQuery");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_query(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                            uint32_t query) __asm("vkCmdEndQuery");

VKAPI_ATTR void VKAPI_CALL vk_cmd_reset_query_pool(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                   uint32_t first_query,
                                                   uint32_t query_count) __asm("vkCmdResetQueryPool");

VKAPI_ATTR void VKAPI_CALL vk_cmd_write_timestamp(vk_command_buffer           command_buffer,
                                                  vk_pipeline_stage_flag_bits pipeline_stage, vk_query_pool query_pool,
                                                  uint32_t query) __asm("vkCmdWriteTimestamp");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_copy_query_pool_results(vk_command_buffer command_buffer, vk_query_pool query_pool, uint32_t first_query,
                               uint32_t query_count, vk_buffer dst_buffer, vk_device_size dst_offset,
                               vk_device_size stride, vk_query_result_flags flags) __asm("vkCmdCopyQueryPoolResults");

VKAPI_ATTR void VKAPI_CALL vk_cmd_push_constants(vk_command_buffer command_buffer, vk_pipeline_layout layout,
                                                 vk_shader_stage_flags stage_flags, uint32_t offset, uint32_t size,
                                                 const void* p_values) __asm("vkCmdPushConstants");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_render_pass(vk_command_buffer                command_buffer,
                                                    const vk_render_pass_begin_info* p_render_pass_begin,
                                                    vk_subpass_contents contents) __asm("vkCmdBeginRenderPass");

VKAPI_ATTR void VKAPI_CALL vk_cmd_next_subpass(vk_command_buffer   command_buffer,
                                               vk_subpass_contents contents) __asm("vkCmdNextSubpass");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_render_pass(vk_command_buffer command_buffer) __asm("vkCmdEndRenderPass");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_execute_commands(vk_command_buffer command_buffer, uint32_t command_buffer_count,
                        const vk_command_buffer* p_command_buffers) __asm("vkCmdExecuteCommands");
#endif

#define VK_VERSION_1_1 1
// vulkan 1.1 version number
#define VK_API_VERSION_1_1 VK_MAKE_VERSION(1, 1, 0) // patch version should always be set to 0

VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_sampler_ycbcr_conversion)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_descriptor_update_template)
#define VK_MAX_DEVICE_GROUP_SIZE 32
#define VK_LUID_SIZE 8
#define VK_QUEUE_FAMILY_EXTERNAL (~0U - 1)

typedef enum vk_point_clipping_behavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES           = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY     = 1,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR       = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM                  = 0x7fffffff
} vk_point_clipping_behavior;

typedef enum vk_tessellation_domain_origin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT     = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT     = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM       = 0x7fffffff
} vk_tessellation_domain_origin;

typedef enum vk_sampler_ycbcr_model_conversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY       = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY     = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709          = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601          = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020         = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR   = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR      = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR      = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR     = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM           = 0x7fffffff
} vk_sampler_ycbcr_model_conversion;

typedef enum vk_sampler_ycbcr_range {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL       = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW     = 1,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR   = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM       = 0x7fffffff
} vk_sampler_ycbcr_range;

typedef enum vk_chroma_location {
    VK_CHROMA_LOCATION_COSITED_EVEN     = 0,
    VK_CHROMA_LOCATION_MIDPOINT         = 1,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
    VK_CHROMA_LOCATION_MIDPOINT_KHR     = VK_CHROMA_LOCATION_MIDPOINT,
    VK_CHROMA_LOCATION_MAX_ENUM         = 0x7fffffff
} vk_chroma_location;

typedef enum vk_descriptor_update_template_type {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET       = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR   = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM             = 0x7fffffff
} vk_descriptor_update_template_type;

typedef enum vk_subgroup_feature_flag_bits {
    VK_SUBGROUP_FEATURE_BASIC_BIT            = 0x00000001,
    VK_SUBGROUP_FEATURE_VOTE_BIT             = 0x00000002,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT       = 0x00000004,
    VK_SUBGROUP_FEATURE_BALLOT_BIT           = 0x00000008,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT          = 0x00000010,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT        = 0x00000040,
    VK_SUBGROUP_FEATURE_QUAD_BIT             = 0x00000080,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV   = 0x00000100,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM   = 0x7fffffff
} vk_subgroup_feature_flag_bits;
typedef vk_flags vk_subgroup_feature_flags;

typedef enum vk_peer_memory_feature_flag_bits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT        = 0x00000001,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT        = 0x00000002,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT     = 0x00000004,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT     = 0x00000008,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR    = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR    = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM  = 0x7fffffff
} vk_peer_memory_feature_flag_bits;
typedef vk_flags vk_peer_memory_feature_flags;

typedef enum vk_memory_allocate_flag_bits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT                       = 0x00000001,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT                    = 0x00000002,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT     = 0x00000004,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR                   = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR                = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM                    = 0x7fffffff
} vk_memory_allocate_flag_bits;
typedef vk_flags vk_memory_allocate_flags;
typedef vk_flags vk_command_pool_trim_flags;
typedef vk_flags vk_descriptor_update_template_create_flags;

typedef enum vk_external_memory_handle_type_flag_bits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT                       = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT                    = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT                = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT                   = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT               = 0x00000010,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT                      = 0x00000020,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT                  = 0x00000040,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT                     = 0x00000200,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT             = 0x00000080,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT  = 0x00000100,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR                   = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR      = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR  = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR     = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR        = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR    = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM        = 0x7fffffff
} vk_external_memory_handle_type_flag_bits;
typedef vk_flags vk_external_memory_handle_type_flags;

typedef enum vk_external_memory_feature_flag_bits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT     = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT         = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT         = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR     = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR     = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM     = 0x7fffffff
} vk_external_memory_feature_flag_bits;
typedef vk_flags vk_external_memory_feature_flags;

typedef enum vk_external_fence_handle_type_flag_bits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT            = 0x00000001,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT         = 0x00000002,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT     = 0x00000004,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT              = 0x00000008,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR        = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR     = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR          = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} vk_external_fence_handle_type_flag_bits;
typedef vk_flags vk_external_fence_handle_type_flags;

typedef enum vk_external_fence_feature_flag_bits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT     = 0x00000001,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT     = 0x00000002,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_external_fence_feature_flag_bits;
typedef vk_flags vk_external_fence_feature_flags;

typedef enum vk_fence_import_flag_bits {
    VK_FENCE_IMPORT_TEMPORARY_BIT      = 0x00000001,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR  = VK_FENCE_IMPORT_TEMPORARY_BIT,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_fence_import_flag_bits;
typedef vk_flags vk_fence_import_flags;

typedef enum vk_semaphore_import_flag_bits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT      = 0x00000001,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR  = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_semaphore_import_flag_bits;
typedef vk_flags vk_semaphore_import_flags;

typedef enum vk_external_semaphore_handle_type_flag_bits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT            = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT         = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT     = 0x00000004,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT          = 0x00000008,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT              = 0x00000010,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT          = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR        = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR     = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR      = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR          = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM       = 0x7fffffff
} vk_external_semaphore_handle_type_flag_bits;
typedef vk_flags vk_external_semaphore_handle_type_flags;

typedef enum vk_external_semaphore_feature_flag_bits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT     = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT     = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_external_semaphore_feature_flag_bits;
typedef vk_flags vk_external_semaphore_feature_flags;
typedef struct vk_physical_device_subgroup_properties {
    vk_structure_type         s_type;
    void*                     p_next;
    uint32_t                  subgroup_size;
    vk_shader_stage_flags     supported_stages;
    vk_subgroup_feature_flags supported_operations;
    vk_bool32                 quad_operations_in_all_stages;
} vk_physical_device_subgroup_properties;

typedef struct vk_bind_buffer_memory_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_buffer         buffer;
    vk_device_memory  memory;
    vk_device_size    memory_offset;
} vk_bind_buffer_memory_info;

typedef struct vk_bind_image_memory_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_image          image;
    vk_device_memory  memory;
    vk_device_size    memory_offset;
} vk_bind_image_memory_info;

typedef struct vk_physical_device16bit_storage_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         storage_buffer16bit_access;
    vk_bool32         uniform_and_storage_buffer16bit_access;
    vk_bool32         storage_push_constant16;
    vk_bool32         storage_input_output16;
} vk_physical_device16bit_storage_features;

typedef struct vk_memory_dedicated_requirements {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         prefers_dedicated_allocation;
    vk_bool32         requires_dedicated_allocation;
} vk_memory_dedicated_requirements;

typedef struct vk_memory_dedicated_allocate_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_image          image;
    vk_buffer         buffer;
} vk_memory_dedicated_allocate_info;

typedef struct vk_memory_allocate_flags_info {
    vk_structure_type        s_type;
    const void*              p_next;
    vk_memory_allocate_flags flags;
    uint32_t                 device_mask;
} vk_memory_allocate_flags_info;

typedef struct vk_device_group_render_pass_begin_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          device_mask;
    uint32_t          device_render_area_count;
    const vk_rect2d*  p_device_render_areas;
} vk_device_group_render_pass_begin_info;

typedef struct vk_device_group_command_buffer_begin_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          device_mask;
} vk_device_group_command_buffer_begin_info;

typedef struct vk_device_group_submit_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          wait_semaphore_count;
    const uint32_t*   p_wait_semaphore_device_indices;
    uint32_t          command_buffer_count;
    const uint32_t*   p_command_buffer_device_masks;
    uint32_t          signal_semaphore_count;
    const uint32_t*   p_signal_semaphore_device_indices;
} vk_device_group_submit_info;

typedef struct vk_device_group_bind_sparse_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          resource_device_index;
    uint32_t          memory_device_index;
} vk_device_group_bind_sparse_info;

typedef struct vk_bind_buffer_memory_device_group_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          device_index_count;
    const uint32_t*   p_device_indices;
} vk_bind_buffer_memory_device_group_info;

typedef struct vk_bind_image_memory_device_group_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          device_index_count;
    const uint32_t*   p_device_indices;
    uint32_t          split_instance_bind_region_count;
    const vk_rect2d*  p_split_instance_bind_regions;
} vk_bind_image_memory_device_group_info;

typedef struct vk_physical_device_group_properties {
    vk_structure_type  s_type;
    void*              p_next;
    uint32_t           physical_device_count;
    vk_physical_device physical_devices[VK_MAX_DEVICE_GROUP_SIZE];
    vk_bool32          subset_allocation;
} vk_physical_device_group_properties;

typedef struct vk_device_group_device_create_info {
    vk_structure_type         s_type;
    const void*               p_next;
    uint32_t                  physical_device_count;
    const vk_physical_device* p_physical_devices;
} vk_device_group_device_create_info;

typedef struct vk_buffer_memory_requirements_info2 {
    vk_structure_type s_type;
    const void*       p_next;
    vk_buffer         buffer;
} vk_buffer_memory_requirements_info2;

typedef struct vk_image_memory_requirements_info2 {
    vk_structure_type s_type;
    const void*       p_next;
    vk_image          image;
} vk_image_memory_requirements_info2;

typedef struct vk_image_sparse_memory_requirements_info2 {
    vk_structure_type s_type;
    const void*       p_next;
    vk_image          image;
} vk_image_sparse_memory_requirements_info2;

typedef struct vk_memory_requirements2 {
    vk_structure_type      s_type;
    void*                  p_next;
    vk_memory_requirements memory_requirements;
} vk_memory_requirements2;

typedef struct vk_sparse_image_memory_requirements2 {
    vk_structure_type                   s_type;
    void*                               p_next;
    vk_sparse_image_memory_requirements memory_requirements;
} vk_sparse_image_memory_requirements2;

typedef struct vk_physical_device_features2 {
    vk_structure_type           s_type;
    void*                       p_next;
    vk_physical_device_features features;
} vk_physical_device_features2;

typedef struct vk_physical_device_properties2 {
    vk_structure_type             s_type;
    void*                         p_next;
    vk_physical_device_properties properties;
} vk_physical_device_properties2;

typedef struct vk_format_properties2 {
    vk_structure_type    s_type;
    void*                p_next;
    vk_format_properties format_properties;
} vk_format_properties2;

typedef struct vk_image_format_properties2 {
    vk_structure_type          s_type;
    void*                      p_next;
    vk_image_format_properties image_format_properties;
} vk_image_format_properties2;

typedef struct vk_physical_device_image_format_info2 {
    vk_structure_type     s_type;
    const void*           p_next;
    vk_format             format;
    vk_image_type         type;
    vk_image_tiling       tiling;
    vk_image_usage_flags  usage;
    vk_image_create_flags flags;
} vk_physical_device_image_format_info2;

typedef struct vk_queue_family_properties2 {
    vk_structure_type          s_type;
    void*                      p_next;
    vk_queue_family_properties queue_family_properties;
} vk_queue_family_properties2;

typedef struct vk_physical_device_memory_properties2 {
    vk_structure_type                    s_type;
    void*                                p_next;
    vk_physical_device_memory_properties memory_properties;
} vk_physical_device_memory_properties2;

typedef struct vk_sparse_image_format_properties2 {
    vk_structure_type                 s_type;
    void*                             p_next;
    vk_sparse_image_format_properties properties;
} vk_sparse_image_format_properties2;

typedef struct vk_physical_device_sparse_image_format_info2 {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_format                 format;
    vk_image_type             type;
    vk_sample_count_flag_bits samples;
    vk_image_usage_flags      usage;
    vk_image_tiling           tiling;
} vk_physical_device_sparse_image_format_info2;

typedef struct vk_physical_device_point_clipping_properties {
    vk_structure_type          s_type;
    void*                      p_next;
    vk_point_clipping_behavior point_clipping_behavior;
} vk_physical_device_point_clipping_properties;

typedef struct vk_input_attachment_aspect_reference {
    uint32_t              subpass;
    uint32_t              input_attachment_index;
    vk_image_aspect_flags aspect_mask;
} vk_input_attachment_aspect_reference;

typedef struct vk_render_pass_input_attachment_aspect_create_info {
    vk_structure_type                           s_type;
    const void*                                 p_next;
    uint32_t                                    aspect_reference_count;
    const vk_input_attachment_aspect_reference* p_aspect_references;
} vk_render_pass_input_attachment_aspect_create_info;

typedef struct vk_image_view_usage_create_info {
    vk_structure_type    s_type;
    const void*          p_next;
    vk_image_usage_flags usage;
} vk_image_view_usage_create_info;

typedef struct vk_pipeline_tessellation_domain_origin_state_create_info {
    vk_structure_type             s_type;
    const void*                   p_next;
    vk_tessellation_domain_origin domain_origin;
} vk_pipeline_tessellation_domain_origin_state_create_info;

typedef struct vk_render_pass_multiview_create_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          subpass_count;
    const uint32_t*   p_view_masks;
    uint32_t          dependency_count;
    const int32_t*    p_view_offsets;
    uint32_t          correlation_mask_count;
    const uint32_t*   p_correlation_masks;
} vk_render_pass_multiview_create_info;

typedef struct vk_physical_device_multiview_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         multiview;
    vk_bool32         multiview_geometry_shader;
    vk_bool32         multiview_tessellation_shader;
} vk_physical_device_multiview_features;

typedef struct vk_physical_device_multiview_properties {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_multiview_view_count;
    uint32_t          max_multiview_instance_index;
} vk_physical_device_multiview_properties;

typedef struct vk_physical_device_variable_pointers_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         variable_pointers_storage_buffer;
    vk_bool32         variable_pointers;
} vk_physical_device_variable_pointers_features;

typedef vk_physical_device_variable_pointers_features vk_physical_device_variable_pointer_features;

typedef struct vk_physical_device_protected_memory_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         protected_memory;
} vk_physical_device_protected_memory_features;

typedef struct vk_physical_device_protected_memory_properties {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         protected_no_fault;
} vk_physical_device_protected_memory_properties;

typedef struct vk_device_queue_info2 {
    vk_structure_type            s_type;
    const void*                  p_next;
    vk_device_queue_create_flags flags;
    uint32_t                     queue_family_index;
    uint32_t                     queue_index;
} vk_device_queue_info2;

typedef struct vk_protected_submit_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_bool32         protected_submit;
} vk_protected_submit_info;

typedef struct vk_sampler_ycbcr_conversion_create_info {
    vk_structure_type                 s_type;
    const void*                       p_next;
    vk_format                         format;
    vk_sampler_ycbcr_model_conversion ycbcr_model;
    vk_sampler_ycbcr_range            ycbcr_range;
    vk_component_mapping              components;
    vk_chroma_location                x_chroma_offset;
    vk_chroma_location                y_chroma_offset;
    vk_filter                         chroma_filter;
    vk_bool32                         force_explicit_reconstruction;
} vk_sampler_ycbcr_conversion_create_info;

typedef struct vk_sampler_ycbcr_conversion_info {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_sampler_ycbcr_conversion conversion;
} vk_sampler_ycbcr_conversion_info;

typedef struct vk_bind_image_plane_memory_info {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_image_aspect_flag_bits plane_aspect;
} vk_bind_image_plane_memory_info;

typedef struct vk_image_plane_memory_requirements_info {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_image_aspect_flag_bits plane_aspect;
} vk_image_plane_memory_requirements_info;

typedef struct vk_physical_device_sampler_ycbcr_conversion_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         sampler_ycbcr_conversion;
} vk_physical_device_sampler_ycbcr_conversion_features;

typedef struct vk_sampler_ycbcr_conversion_image_format_properties {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          combined_image_sampler_descriptor_count;
} vk_sampler_ycbcr_conversion_image_format_properties;

typedef struct vk_descriptor_update_template_entry {
    uint32_t           dst_binding;
    uint32_t           dst_array_element;
    uint32_t           descriptor_count;
    vk_descriptor_type descriptor_type;
    size_t             offset;
    size_t             stride;
} vk_descriptor_update_template_entry;

typedef struct vk_descriptor_update_template_create_info {
    vk_structure_type                          s_type;
    const void*                                p_next;
    vk_descriptor_update_template_create_flags flags;
    uint32_t                                   descriptor_update_entry_count;
    const vk_descriptor_update_template_entry* p_descriptor_update_entries;
    vk_descriptor_update_template_type         template_type;
    vk_descriptor_set_layout                   descriptor_set_layout;
    vk_pipeline_bind_point                     pipeline_bind_point;
    vk_pipeline_layout                         pipeline_layout;
    uint32_t                                   set;
} vk_descriptor_update_template_create_info;

typedef struct vk_external_memory_properties {
    vk_external_memory_feature_flags     external_memory_features;
    vk_external_memory_handle_type_flags export_from_imported_handle_types;
    vk_external_memory_handle_type_flags compatible_handle_types;
} vk_external_memory_properties;

typedef struct vk_physical_device_external_image_format_info {
    vk_structure_type                        s_type;
    const void*                              p_next;
    vk_external_memory_handle_type_flag_bits handle_type;
} vk_physical_device_external_image_format_info;

typedef struct vk_external_image_format_properties {
    vk_structure_type             s_type;
    void*                         p_next;
    vk_external_memory_properties external_memory_properties;
} vk_external_image_format_properties;

typedef struct vk_physical_device_external_buffer_info {
    vk_structure_type                        s_type;
    const void*                              p_next;
    vk_buffer_create_flags                   flags;
    vk_buffer_usage_flags                    usage;
    vk_external_memory_handle_type_flag_bits handle_type;
} vk_physical_device_external_buffer_info;

typedef struct vk_external_buffer_properties {
    vk_structure_type             s_type;
    void*                         p_next;
    vk_external_memory_properties external_memory_properties;
} vk_external_buffer_properties;

typedef struct vk_physical_device_idproperties {
    vk_structure_type s_type;
    void*             p_next;
    uint8_t           device_uuid[VK_UUID_SIZE];
    uint8_t           driver_uuid[VK_UUID_SIZE];
    uint8_t           device_luid[VK_LUID_SIZE];
    uint32_t          device_node_mask;
    vk_bool32         device_luidvalid;
} vk_physical_device_idproperties;

typedef struct vk_external_memory_image_create_info {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_external_memory_handle_type_flags handle_types;
} vk_external_memory_image_create_info;

typedef struct vk_external_memory_buffer_create_info {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_external_memory_handle_type_flags handle_types;
} vk_external_memory_buffer_create_info;

typedef struct vk_export_memory_allocate_info {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_external_memory_handle_type_flags handle_types;
} vk_export_memory_allocate_info;

typedef struct vk_physical_device_external_fence_info {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_external_fence_handle_type_flag_bits handle_type;
} vk_physical_device_external_fence_info;

typedef struct vk_external_fence_properties {
    vk_structure_type                   s_type;
    void*                               p_next;
    vk_external_fence_handle_type_flags export_from_imported_handle_types;
    vk_external_fence_handle_type_flags compatible_handle_types;
    vk_external_fence_feature_flags     external_fence_features;
} vk_external_fence_properties;

typedef struct vk_export_fence_create_info {
    vk_structure_type                   s_type;
    const void*                         p_next;
    vk_external_fence_handle_type_flags handle_types;
} vk_export_fence_create_info;

typedef struct vk_export_semaphore_create_info {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_external_semaphore_handle_type_flags handle_types;
} vk_export_semaphore_create_info;

typedef struct vk_physical_device_external_semaphore_info {
    vk_structure_type                           s_type;
    const void*                                 p_next;
    vk_external_semaphore_handle_type_flag_bits handle_type;
} vk_physical_device_external_semaphore_info;

typedef struct vk_external_semaphore_properties {
    vk_structure_type                       s_type;
    void*                                   p_next;
    vk_external_semaphore_handle_type_flags export_from_imported_handle_types;
    vk_external_semaphore_handle_type_flags compatible_handle_types;
    vk_external_semaphore_feature_flags     external_semaphore_features;
} vk_external_semaphore_properties;

typedef struct vk_physical_device_maintenance3properties {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_per_set_descriptors;
    vk_device_size    max_memory_allocation_size;
} vk_physical_device_maintenance3properties;

typedef struct vk_descriptor_set_layout_support {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         supported;
} vk_descriptor_set_layout_support;

typedef struct vk_physical_device_shader_draw_parameters_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_draw_parameters;
} vk_physical_device_shader_draw_parameters_features;

typedef vk_physical_device_shader_draw_parameters_features vk_physical_device_shader_draw_parameter_features;

typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_instance_version)(uint32_t* p_api_version);
typedef vk_result(VKAPI_PTR* pfn_vk_bind_buffer_memory2)(vk_device device, uint32_t bind_info_count,
                                                         const vk_bind_buffer_memory_info* p_bind_infos);
typedef vk_result(VKAPI_PTR* pfn_vk_bind_image_memory2)(vk_device device, uint32_t bind_info_count,
                                                        const vk_bind_image_memory_info* p_bind_infos);
typedef void(VKAPI_PTR* pfn_vk_get_device_group_peer_memory_features)(
    vk_device device, uint32_t heap_index, uint32_t local_device_index, uint32_t remote_device_index,
    vk_peer_memory_feature_flags* p_peer_memory_features);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_device_mask)(vk_command_buffer command_buffer, uint32_t device_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch_base)(vk_command_buffer command_buffer, uint32_t base_group_x,
                                                  uint32_t base_group_y, uint32_t base_group_z, uint32_t group_count_x,
                                                  uint32_t group_count_y, uint32_t group_count_z);
typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_physical_device_groups)(
    vk_instance instance, uint32_t* p_physical_device_group_count,
    vk_physical_device_group_properties* p_physical_device_group_properties);
typedef void(VKAPI_PTR* pfn_vk_get_image_memory_requirements2)(vk_device                                 device,
                                                               const vk_image_memory_requirements_info2* p_info,
                                                               vk_memory_requirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_buffer_memory_requirements2)(vk_device                                  device,
                                                                const vk_buffer_memory_requirements_info2* p_info,
                                                                vk_memory_requirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_sparse_memory_requirements2)(
    vk_device device, const vk_image_sparse_memory_requirements_info2* p_info,
    uint32_t* p_sparse_memory_requirement_count, vk_sparse_image_memory_requirements2* p_sparse_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_features2)(vk_physical_device            physical_device,
                                                              vk_physical_device_features2* p_features);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_properties2)(vk_physical_device              physical_device,
                                                                vk_physical_device_properties2* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_format_properties2)(vk_physical_device     physical_device,
                                                                       vk_format              format,
                                                                       vk_format_properties2* p_format_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_image_format_properties2)(
    vk_physical_device physical_device, const vk_physical_device_image_format_info2* p_image_format_info,
    vk_image_format_properties2* p_image_format_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_properties2)(
    vk_physical_device physical_device, uint32_t* p_queue_family_property_count,
    vk_queue_family_properties2* p_queue_family_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_memory_properties2)(
    vk_physical_device physical_device, vk_physical_device_memory_properties2* p_memory_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_sparse_image_format_properties2)(
    vk_physical_device physical_device, const vk_physical_device_sparse_image_format_info2* p_format_info,
    uint32_t* p_property_count, vk_sparse_image_format_properties2* p_properties);
typedef void(VKAPI_PTR* pfn_vk_trim_command_pool)(vk_device device, vk_command_pool command_pool,
                                                  vk_command_pool_trim_flags flags);
typedef void(VKAPI_PTR* pfn_vk_get_device_queue2)(vk_device device, const vk_device_queue_info2* p_queue_info,
                                                  vk_queue* p_queue);
typedef vk_result(VKAPI_PTR* pfn_vk_create_sampler_ycbcr_conversion)(
    vk_device device, const vk_sampler_ycbcr_conversion_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_sampler_ycbcr_conversion* p_ycbcr_conversion);
typedef void(VKAPI_PTR* pfn_vk_destroy_sampler_ycbcr_conversion)(vk_device                      device,
                                                                 vk_sampler_ycbcr_conversion    ycbcr_conversion,
                                                                 const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_create_descriptor_update_template)(
    vk_device device, const vk_descriptor_update_template_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_descriptor_update_template* p_descriptor_update_template);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_update_template)(
    vk_device device, vk_descriptor_update_template descriptor_update_template,
    const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_update_descriptor_set_with_template)(
    vk_device device, vk_descriptor_set descriptor_set, vk_descriptor_update_template descriptor_update_template,
    const void* p_data);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_buffer_properties)(
    vk_physical_device physical_device, const vk_physical_device_external_buffer_info* p_external_buffer_info,
    vk_external_buffer_properties* p_external_buffer_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_fence_properties)(
    vk_physical_device physical_device, const vk_physical_device_external_fence_info* p_external_fence_info,
    vk_external_fence_properties* p_external_fence_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_semaphore_properties)(
    vk_physical_device physical_device, const vk_physical_device_external_semaphore_info* p_external_semaphore_info,
    vk_external_semaphore_properties* p_external_semaphore_properties);
typedef void(VKAPI_PTR* pfn_vk_get_descriptor_set_layout_support)(
    vk_device device, const vk_descriptor_set_layout_create_info* p_create_info,
    vk_descriptor_set_layout_support* p_support);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL
vk_enumerate_instance_version(uint32_t* p_api_version) __asm("vkEnumerateInstanceVersion");

VKAPI_ATTR vk_result VKAPI_CALL
vk_bind_buffer_memory2(vk_device device, uint32_t bind_info_count,
                       const vk_bind_buffer_memory_info* p_bind_infos) __asm("vkBindBufferMemory2");

VKAPI_ATTR vk_result VKAPI_CALL
vk_bind_image_memory2(vk_device device, uint32_t bind_info_count,
                      const vk_bind_image_memory_info* p_bind_infos) __asm("vkBindImageMemory2");

VKAPI_ATTR void VKAPI_CALL vk_get_device_group_peer_memory_features(
    vk_device device, uint32_t heap_index, uint32_t local_device_index, uint32_t remote_device_index,
    vk_peer_memory_feature_flags* p_peer_memory_features) __asm("vkGetDeviceGroupPeerMemoryFeatures");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_device_mask(vk_command_buffer command_buffer,
                                                  uint32_t          device_mask) __asm("vkCmdSetDeviceMask");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch_base(vk_command_buffer command_buffer, uint32_t base_group_x,
                                                uint32_t base_group_y, uint32_t base_group_z, uint32_t group_count_x,
                                                uint32_t group_count_y,
                                                uint32_t group_count_z) __asm("vkCmdDispatchBase");

VKAPI_ATTR vk_result VKAPI_CALL vk_enumerate_physical_device_groups(
    vk_instance instance, uint32_t* p_physical_device_group_count,
    vk_physical_device_group_properties* p_physical_device_group_properties) __asm("vkEnumeratePhysicalDeviceGroups");

VKAPI_ATTR void VKAPI_CALL vk_get_image_memory_requirements2(
    vk_device device, const vk_image_memory_requirements_info2* p_info,
    vk_memory_requirements2* p_memory_requirements) __asm("vkGetImageMemoryRequirements2");

VKAPI_ATTR void VKAPI_CALL vk_get_buffer_memory_requirements2(
    vk_device device, const vk_buffer_memory_requirements_info2* p_info,
    vk_memory_requirements2* p_memory_requirements) __asm("vkGetBufferMemoryRequirements2");

VKAPI_ATTR void VKAPI_CALL vk_get_image_sparse_memory_requirements2(
    vk_device device, const vk_image_sparse_memory_requirements_info2* p_info,
    uint32_t*                             p_sparse_memory_requirement_count,
    vk_sparse_image_memory_requirements2* p_sparse_memory_requirements) __asm("vkGetImageSparseMemoryRequirements2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_features2(
    vk_physical_device physical_device, vk_physical_device_features2* p_features) __asm("vkGetPhysicalDeviceFeatures2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_properties2(
    vk_physical_device              physical_device,
    vk_physical_device_properties2* p_properties) __asm("vkGetPhysicalDeviceProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_format_properties2(
    vk_physical_device physical_device, vk_format format,
    vk_format_properties2* p_format_properties) __asm("vkGetPhysicalDeviceFormatProperties2");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_image_format_properties2(
    vk_physical_device physical_device, const vk_physical_device_image_format_info2* p_image_format_info,
    vk_image_format_properties2* p_image_format_properties) __asm("vkGetPhysicalDeviceImageFormatProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_properties2(
    vk_physical_device physical_device, uint32_t* p_queue_family_property_count,
    vk_queue_family_properties2* p_queue_family_properties) __asm("vkGetPhysicalDeviceQueueFamilyProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_memory_properties2(
    vk_physical_device                     physical_device,
    vk_physical_device_memory_properties2* p_memory_properties) __asm("vkGetPhysicalDeviceMemoryProperties2");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_sparse_image_format_properties2(
    vk_physical_device physical_device, const vk_physical_device_sparse_image_format_info2* p_format_info,
    uint32_t*                           p_property_count,
    vk_sparse_image_format_properties2* p_properties) __asm("vkGetPhysicalDeviceSparseImageFormatProperties2");

VKAPI_ATTR void VKAPI_CALL vk_trim_command_pool(vk_device device, vk_command_pool command_pool,
                                                vk_command_pool_trim_flags flags) __asm("vkTrimCommandPool");

VKAPI_ATTR void VKAPI_CALL vk_get_device_queue2(vk_device device, const vk_device_queue_info2* p_queue_info,
                                                vk_queue* p_queue) __asm("vkGetDeviceQueue2");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_sampler_ycbcr_conversion(
    vk_device device, const vk_sampler_ycbcr_conversion_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator,
    vk_sampler_ycbcr_conversion*   p_ycbcr_conversion) __asm("vkCreateSamplerYcbcrConversion");

VKAPI_ATTR void VKAPI_CALL vk_destroy_sampler_ycbcr_conversion(
    vk_device device, vk_sampler_ycbcr_conversion ycbcr_conversion,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroySamplerYcbcrConversion");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_descriptor_update_template(
    vk_device device, const vk_descriptor_update_template_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator,
    vk_descriptor_update_template* p_descriptor_update_template) __asm("vkCreateDescriptorUpdateTemplate");

VKAPI_ATTR void VKAPI_CALL vk_destroy_descriptor_update_template(
    vk_device device, vk_descriptor_update_template descriptor_update_template,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroyDescriptorUpdateTemplate");

VKAPI_ATTR void VKAPI_CALL vk_update_descriptor_set_with_template(
    vk_device device, vk_descriptor_set descriptor_set, vk_descriptor_update_template descriptor_update_template,
    const void* p_data) __asm("vkUpdateDescriptorSetWithTemplate");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_buffer_properties(
    vk_physical_device physical_device, const vk_physical_device_external_buffer_info* p_external_buffer_info,
    vk_external_buffer_properties* p_external_buffer_properties) __asm("vkGetPhysicalDeviceExternalBufferProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_fence_properties(
    vk_physical_device physical_device, const vk_physical_device_external_fence_info* p_external_fence_info,
    vk_external_fence_properties* p_external_fence_properties) __asm("vkGetPhysicalDeviceExternalFenceProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_semaphore_properties(
    vk_physical_device physical_device, const vk_physical_device_external_semaphore_info* p_external_semaphore_info,
    vk_external_semaphore_properties*
        p_external_semaphore_properties) __asm("vkGetPhysicalDeviceExternalSemaphoreProperties");

VKAPI_ATTR void VKAPI_CALL vk_get_descriptor_set_layout_support(
    vk_device device, const vk_descriptor_set_layout_create_info* p_create_info,
    vk_descriptor_set_layout_support* p_support) __asm("vkGetDescriptorSetLayoutSupport");
#endif

#define VK_VERSION_1_2 1
// vulkan 1.2 version number
#define VK_API_VERSION_1_2 VK_MAKE_VERSION(1, 2, 0) // patch version should always be set to 0

#define VK_MAX_DRIVER_NAME_SIZE 256
#define VK_MAX_DRIVER_INFO_SIZE 256

typedef enum vk_driver_id {
    VK_DRIVER_ID_AMD_PROPRIETARY               = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE               = 2,
    VK_DRIVER_ID_MESA_RADV                     = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY            = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS     = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA        = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY       = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY          = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY               = 9,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER            = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY               = 11,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY          = 12,
    VK_DRIVER_ID_MESA_LLVMPIPE                 = 13,
    VK_DRIVER_ID_MOLTENVK                      = 14,
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR           = VK_DRIVER_ID_AMD_PROPRIETARY,
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR           = VK_DRIVER_ID_AMD_OPEN_SOURCE,
    VK_DRIVER_ID_MESA_RADV_KHR                 = VK_DRIVER_ID_MESA_RADV,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR        = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR    = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR   = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR      = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR           = VK_DRIVER_ID_ARM_PROPRIETARY,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR        = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR           = VK_DRIVER_ID_GGP_PROPRIETARY,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR      = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
    VK_DRIVER_ID_MAX_ENUM                      = 0x7fffffff
} vk_driver_id;

typedef enum vk_shader_float_controls_independence {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY     = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL             = 1,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE            = 2,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR         = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR        = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM        = 0x7fffffff
} vk_shader_float_controls_independence;

typedef enum vk_sampler_reduction_mode {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE     = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN                  = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX                  = 2,
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT              = VK_SAMPLER_REDUCTION_MODE_MIN,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT              = VK_SAMPLER_REDUCTION_MODE_MAX,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM             = 0x7fffffff
} vk_sampler_reduction_mode;

typedef enum vk_semaphore_type {
    VK_SEMAPHORE_TYPE_BINARY       = 0,
    VK_SEMAPHORE_TYPE_TIMELINE     = 1,
    VK_SEMAPHORE_TYPE_BINARY_KHR   = VK_SEMAPHORE_TYPE_BINARY,
    VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
    VK_SEMAPHORE_TYPE_MAX_ENUM     = 0x7fffffff
} vk_semaphore_type;

typedef enum vk_resolve_mode_flag_bits {
    VK_RESOLVE_MODE_NONE                = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT     = 0x00000001,
    VK_RESOLVE_MODE_AVERAGE_BIT         = 0x00000002,
    VK_RESOLVE_MODE_MIN_BIT             = 0x00000004,
    VK_RESOLVE_MODE_MAX_BIT             = 0x00000008,
    VK_RESOLVE_MODE_NONE_KHR            = VK_RESOLVE_MODE_NONE,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR     = VK_RESOLVE_MODE_AVERAGE_BIT,
    VK_RESOLVE_MODE_MIN_BIT_KHR         = VK_RESOLVE_MODE_MIN_BIT,
    VK_RESOLVE_MODE_MAX_BIT_KHR         = VK_RESOLVE_MODE_MAX_BIT,
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM  = 0x7fffffff
} vk_resolve_mode_flag_bits;
typedef vk_flags vk_resolve_mode_flags;

typedef enum vk_descriptor_binding_flag_bits {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT               = 0x00000001,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT     = 0x00000002,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT                 = 0x00000004,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT       = 0x00000008,
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT           = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT             = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT   = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM                  = 0x7fffffff
} vk_descriptor_binding_flag_bits;
typedef vk_flags vk_descriptor_binding_flags;

typedef enum vk_semaphore_wait_flag_bits {
    VK_SEMAPHORE_WAIT_ANY_BIT            = 0x00000001,
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR        = VK_SEMAPHORE_WAIT_ANY_BIT,
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7fffffff
} vk_semaphore_wait_flag_bits;
typedef vk_flags vk_semaphore_wait_flags;
typedef struct vk_physical_device_vulkan11features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         storage_buffer16bit_access;
    vk_bool32         uniform_and_storage_buffer16bit_access;
    vk_bool32         storage_push_constant16;
    vk_bool32         storage_input_output16;
    vk_bool32         multiview;
    vk_bool32         multiview_geometry_shader;
    vk_bool32         multiview_tessellation_shader;
    vk_bool32         variable_pointers_storage_buffer;
    vk_bool32         variable_pointers;
    vk_bool32         protected_memory;
    vk_bool32         sampler_ycbcr_conversion;
    vk_bool32         shader_draw_parameters;
} vk_physical_device_vulkan11features;

typedef struct vk_physical_device_vulkan11properties {
    vk_structure_type          s_type;
    void*                      p_next;
    uint8_t                    device_uuid[VK_UUID_SIZE];
    uint8_t                    driver_uuid[VK_UUID_SIZE];
    uint8_t                    device_luid[VK_LUID_SIZE];
    uint32_t                   device_node_mask;
    vk_bool32                  device_luidvalid;
    uint32_t                   subgroup_size;
    vk_shader_stage_flags      subgroup_supported_stages;
    vk_subgroup_feature_flags  subgroup_supported_operations;
    vk_bool32                  subgroup_quad_operations_in_all_stages;
    vk_point_clipping_behavior point_clipping_behavior;
    uint32_t                   max_multiview_view_count;
    uint32_t                   max_multiview_instance_index;
    vk_bool32                  protected_no_fault;
    uint32_t                   max_per_set_descriptors;
    vk_device_size             max_memory_allocation_size;
} vk_physical_device_vulkan11properties;

typedef struct vk_physical_device_vulkan12features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         sampler_mirror_clamp_to_edge;
    vk_bool32         draw_indirect_count;
    vk_bool32         storage_buffer8bit_access;
    vk_bool32         uniform_and_storage_buffer8bit_access;
    vk_bool32         storage_push_constant8;
    vk_bool32         shader_buffer_int64atomics;
    vk_bool32         shader_shared_int64atomics;
    vk_bool32         shader_float16;
    vk_bool32         shader_int8;
    vk_bool32         descriptor_indexing;
    vk_bool32         shader_input_attachment_array_dynamic_indexing;
    vk_bool32         shader_uniform_texel_buffer_array_dynamic_indexing;
    vk_bool32         shader_storage_texel_buffer_array_dynamic_indexing;
    vk_bool32         shader_uniform_buffer_array_non_uniform_indexing;
    vk_bool32         shader_sampled_image_array_non_uniform_indexing;
    vk_bool32         shader_storage_buffer_array_non_uniform_indexing;
    vk_bool32         shader_storage_image_array_non_uniform_indexing;
    vk_bool32         shader_input_attachment_array_non_uniform_indexing;
    vk_bool32         shader_uniform_texel_buffer_array_non_uniform_indexing;
    vk_bool32         shader_storage_texel_buffer_array_non_uniform_indexing;
    vk_bool32         descriptor_binding_uniform_buffer_update_after_bind;
    vk_bool32         descriptor_binding_sampled_image_update_after_bind;
    vk_bool32         descriptor_binding_storage_image_update_after_bind;
    vk_bool32         descriptor_binding_storage_buffer_update_after_bind;
    vk_bool32         descriptor_binding_uniform_texel_buffer_update_after_bind;
    vk_bool32         descriptor_binding_storage_texel_buffer_update_after_bind;
    vk_bool32         descriptor_binding_update_unused_while_pending;
    vk_bool32         descriptor_binding_partially_bound;
    vk_bool32         descriptor_binding_variable_descriptor_count;
    vk_bool32         runtime_descriptor_array;
    vk_bool32         sampler_filter_minmax;
    vk_bool32         scalar_block_layout;
    vk_bool32         imageless_framebuffer;
    vk_bool32         uniform_buffer_standard_layout;
    vk_bool32         shader_subgroup_extended_types;
    vk_bool32         separate_depth_stencil_layouts;
    vk_bool32         host_query_reset;
    vk_bool32         timeline_semaphore;
    vk_bool32         buffer_device_address;
    vk_bool32         buffer_device_address_capture_replay;
    vk_bool32         buffer_device_address_multi_device;
    vk_bool32         vulkan_memory_model;
    vk_bool32         vulkan_memory_model_device_scope;
    vk_bool32         vulkan_memory_model_availability_visibility_chains;
    vk_bool32         shader_output_viewport_index;
    vk_bool32         shader_output_layer;
    vk_bool32         subgroup_broadcast_dynamic_id;
} vk_physical_device_vulkan12features;

typedef struct vk_conformance_version {
    uint8_t major;
    uint8_t minor;
    uint8_t subminor;
    uint8_t patch;
} vk_conformance_version;

typedef struct vk_physical_device_vulkan12properties {
    vk_structure_type                     s_type;
    void*                                 p_next;
    vk_driver_id                          driver_id;
    char                                  driver_name[VK_MAX_DRIVER_NAME_SIZE];
    char                                  driver_info[VK_MAX_DRIVER_INFO_SIZE];
    vk_conformance_version                conformance_version;
    vk_shader_float_controls_independence denorm_behavior_independence;
    vk_shader_float_controls_independence rounding_mode_independence;
    vk_bool32                             shader_signed_zero_inf_nan_preserve_float16;
    vk_bool32                             shader_signed_zero_inf_nan_preserve_float32;
    vk_bool32                             shader_signed_zero_inf_nan_preserve_float64;
    vk_bool32                             shader_denorm_preserve_float16;
    vk_bool32                             shader_denorm_preserve_float32;
    vk_bool32                             shader_denorm_preserve_float64;
    vk_bool32                             shader_denorm_flush_to_zero_float16;
    vk_bool32                             shader_denorm_flush_to_zero_float32;
    vk_bool32                             shader_denorm_flush_to_zero_float64;
    vk_bool32                             shader_rounding_mode_rtefloat16;
    vk_bool32                             shader_rounding_mode_rtefloat32;
    vk_bool32                             shader_rounding_mode_rtefloat64;
    vk_bool32                             shader_rounding_mode_rtzfloat16;
    vk_bool32                             shader_rounding_mode_rtzfloat32;
    vk_bool32                             shader_rounding_mode_rtzfloat64;
    uint32_t                              max_update_after_bind_descriptors_in_all_pools;
    vk_bool32                             shader_uniform_buffer_array_non_uniform_indexing_native;
    vk_bool32                             shader_sampled_image_array_non_uniform_indexing_native;
    vk_bool32                             shader_storage_buffer_array_non_uniform_indexing_native;
    vk_bool32                             shader_storage_image_array_non_uniform_indexing_native;
    vk_bool32                             shader_input_attachment_array_non_uniform_indexing_native;
    vk_bool32                             robust_buffer_access_update_after_bind;
    vk_bool32                             quad_divergent_implicit_lod;
    uint32_t                              max_per_stage_descriptor_update_after_bind_samplers;
    uint32_t                              max_per_stage_descriptor_update_after_bind_uniform_buffers;
    uint32_t                              max_per_stage_descriptor_update_after_bind_storage_buffers;
    uint32_t                              max_per_stage_descriptor_update_after_bind_sampled_images;
    uint32_t                              max_per_stage_descriptor_update_after_bind_storage_images;
    uint32_t                              max_per_stage_descriptor_update_after_bind_input_attachments;
    uint32_t                              max_per_stage_update_after_bind_resources;
    uint32_t                              max_descriptor_set_update_after_bind_samplers;
    uint32_t                              max_descriptor_set_update_after_bind_uniform_buffers;
    uint32_t                              max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
    uint32_t                              max_descriptor_set_update_after_bind_storage_buffers;
    uint32_t                              max_descriptor_set_update_after_bind_storage_buffers_dynamic;
    uint32_t                              max_descriptor_set_update_after_bind_sampled_images;
    uint32_t                              max_descriptor_set_update_after_bind_storage_images;
    uint32_t                              max_descriptor_set_update_after_bind_input_attachments;
    vk_resolve_mode_flags                 supported_depth_resolve_modes;
    vk_resolve_mode_flags                 supported_stencil_resolve_modes;
    vk_bool32                             independent_resolve_none;
    vk_bool32                             independent_resolve;
    vk_bool32                             filter_minmax_single_component_formats;
    vk_bool32                             filter_minmax_image_component_mapping;
    uint64_t                              max_timeline_semaphore_value_difference;
    vk_sample_count_flags                 framebuffer_integer_color_sample_counts;
} vk_physical_device_vulkan12properties;

typedef struct vk_image_format_list_create_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          view_format_count;
    const vk_format*  p_view_formats;
} vk_image_format_list_create_info;

typedef struct vk_attachment_description2 {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_attachment_description_flags flags;
    vk_format                       format;
    vk_sample_count_flag_bits       samples;
    vk_attachment_load_op           load_op;
    vk_attachment_store_op          store_op;
    vk_attachment_load_op           stencil_load_op;
    vk_attachment_store_op          stencil_store_op;
    vk_image_layout                 initial_layout;
    vk_image_layout                 final_layout;
} vk_attachment_description2;

typedef struct vk_attachment_reference2 {
    vk_structure_type     s_type;
    const void*           p_next;
    uint32_t              attachment;
    vk_image_layout       layout;
    vk_image_aspect_flags aspect_mask;
} vk_attachment_reference2;

typedef struct vk_subpass_description2 {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_subpass_description_flags    flags;
    vk_pipeline_bind_point          pipeline_bind_point;
    uint32_t                        view_mask;
    uint32_t                        input_attachment_count;
    const vk_attachment_reference2* p_input_attachments;
    uint32_t                        color_attachment_count;
    const vk_attachment_reference2* p_color_attachments;
    const vk_attachment_reference2* p_resolve_attachments;
    const vk_attachment_reference2* p_depth_stencil_attachment;
    uint32_t                        preserve_attachment_count;
    const uint32_t*                 p_preserve_attachments;
} vk_subpass_description2;

typedef struct vk_subpass_dependency2 {
    vk_structure_type       s_type;
    const void*             p_next;
    uint32_t                src_subpass;
    uint32_t                dst_subpass;
    vk_pipeline_stage_flags src_stage_mask;
    vk_pipeline_stage_flags dst_stage_mask;
    vk_access_flags         src_access_mask;
    vk_access_flags         dst_access_mask;
    vk_dependency_flags     dependency_flags;
    int32_t                 view_offset;
} vk_subpass_dependency2;

typedef struct vk_render_pass_create_info2 {
    vk_structure_type                 s_type;
    const void*                       p_next;
    vk_render_pass_create_flags       flags;
    uint32_t                          attachment_count;
    const vk_attachment_description2* p_attachments;
    uint32_t                          subpass_count;
    const vk_subpass_description2*    p_subpasses;
    uint32_t                          dependency_count;
    const vk_subpass_dependency2*     p_dependencies;
    uint32_t                          correlated_view_mask_count;
    const uint32_t*                   p_correlated_view_masks;
} vk_render_pass_create_info2;

typedef struct vk_subpass_begin_info {
    vk_structure_type   s_type;
    const void*         p_next;
    vk_subpass_contents contents;
} vk_subpass_begin_info;

typedef struct vk_subpass_end_info {
    vk_structure_type s_type;
    const void*       p_next;
} vk_subpass_end_info;

typedef struct vk_physical_device8bit_storage_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         storage_buffer8bit_access;
    vk_bool32         uniform_and_storage_buffer8bit_access;
    vk_bool32         storage_push_constant8;
} vk_physical_device8bit_storage_features;

typedef struct vk_physical_device_driver_properties {
    vk_structure_type      s_type;
    void*                  p_next;
    vk_driver_id           driver_id;
    char                   driver_name[VK_MAX_DRIVER_NAME_SIZE];
    char                   driver_info[VK_MAX_DRIVER_INFO_SIZE];
    vk_conformance_version conformance_version;
} vk_physical_device_driver_properties;

typedef struct vk_physical_device_shader_atomic_int64features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_buffer_int64atomics;
    vk_bool32         shader_shared_int64atomics;
} vk_physical_device_shader_atomic_int64features;

typedef struct vk_physical_device_shader_float16int8features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_float16;
    vk_bool32         shader_int8;
} vk_physical_device_shader_float16int8features;

typedef struct vk_physical_device_float_controls_properties {
    vk_structure_type                     s_type;
    void*                                 p_next;
    vk_shader_float_controls_independence denorm_behavior_independence;
    vk_shader_float_controls_independence rounding_mode_independence;
    vk_bool32                             shader_signed_zero_inf_nan_preserve_float16;
    vk_bool32                             shader_signed_zero_inf_nan_preserve_float32;
    vk_bool32                             shader_signed_zero_inf_nan_preserve_float64;
    vk_bool32                             shader_denorm_preserve_float16;
    vk_bool32                             shader_denorm_preserve_float32;
    vk_bool32                             shader_denorm_preserve_float64;
    vk_bool32                             shader_denorm_flush_to_zero_float16;
    vk_bool32                             shader_denorm_flush_to_zero_float32;
    vk_bool32                             shader_denorm_flush_to_zero_float64;
    vk_bool32                             shader_rounding_mode_rtefloat16;
    vk_bool32                             shader_rounding_mode_rtefloat32;
    vk_bool32                             shader_rounding_mode_rtefloat64;
    vk_bool32                             shader_rounding_mode_rtzfloat16;
    vk_bool32                             shader_rounding_mode_rtzfloat32;
    vk_bool32                             shader_rounding_mode_rtzfloat64;
} vk_physical_device_float_controls_properties;

typedef struct vk_descriptor_set_layout_binding_flags_create_info {
    vk_structure_type                  s_type;
    const void*                        p_next;
    uint32_t                           binding_count;
    const vk_descriptor_binding_flags* p_binding_flags;
} vk_descriptor_set_layout_binding_flags_create_info;

typedef struct vk_physical_device_descriptor_indexing_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_input_attachment_array_dynamic_indexing;
    vk_bool32         shader_uniform_texel_buffer_array_dynamic_indexing;
    vk_bool32         shader_storage_texel_buffer_array_dynamic_indexing;
    vk_bool32         shader_uniform_buffer_array_non_uniform_indexing;
    vk_bool32         shader_sampled_image_array_non_uniform_indexing;
    vk_bool32         shader_storage_buffer_array_non_uniform_indexing;
    vk_bool32         shader_storage_image_array_non_uniform_indexing;
    vk_bool32         shader_input_attachment_array_non_uniform_indexing;
    vk_bool32         shader_uniform_texel_buffer_array_non_uniform_indexing;
    vk_bool32         shader_storage_texel_buffer_array_non_uniform_indexing;
    vk_bool32         descriptor_binding_uniform_buffer_update_after_bind;
    vk_bool32         descriptor_binding_sampled_image_update_after_bind;
    vk_bool32         descriptor_binding_storage_image_update_after_bind;
    vk_bool32         descriptor_binding_storage_buffer_update_after_bind;
    vk_bool32         descriptor_binding_uniform_texel_buffer_update_after_bind;
    vk_bool32         descriptor_binding_storage_texel_buffer_update_after_bind;
    vk_bool32         descriptor_binding_update_unused_while_pending;
    vk_bool32         descriptor_binding_partially_bound;
    vk_bool32         descriptor_binding_variable_descriptor_count;
    vk_bool32         runtime_descriptor_array;
} vk_physical_device_descriptor_indexing_features;

typedef struct vk_physical_device_descriptor_indexing_properties {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_update_after_bind_descriptors_in_all_pools;
    vk_bool32         shader_uniform_buffer_array_non_uniform_indexing_native;
    vk_bool32         shader_sampled_image_array_non_uniform_indexing_native;
    vk_bool32         shader_storage_buffer_array_non_uniform_indexing_native;
    vk_bool32         shader_storage_image_array_non_uniform_indexing_native;
    vk_bool32         shader_input_attachment_array_non_uniform_indexing_native;
    vk_bool32         robust_buffer_access_update_after_bind;
    vk_bool32         quad_divergent_implicit_lod;
    uint32_t          max_per_stage_descriptor_update_after_bind_samplers;
    uint32_t          max_per_stage_descriptor_update_after_bind_uniform_buffers;
    uint32_t          max_per_stage_descriptor_update_after_bind_storage_buffers;
    uint32_t          max_per_stage_descriptor_update_after_bind_sampled_images;
    uint32_t          max_per_stage_descriptor_update_after_bind_storage_images;
    uint32_t          max_per_stage_descriptor_update_after_bind_input_attachments;
    uint32_t          max_per_stage_update_after_bind_resources;
    uint32_t          max_descriptor_set_update_after_bind_samplers;
    uint32_t          max_descriptor_set_update_after_bind_uniform_buffers;
    uint32_t          max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
    uint32_t          max_descriptor_set_update_after_bind_storage_buffers;
    uint32_t          max_descriptor_set_update_after_bind_storage_buffers_dynamic;
    uint32_t          max_descriptor_set_update_after_bind_sampled_images;
    uint32_t          max_descriptor_set_update_after_bind_storage_images;
    uint32_t          max_descriptor_set_update_after_bind_input_attachments;
} vk_physical_device_descriptor_indexing_properties;

typedef struct vk_descriptor_set_variable_descriptor_count_allocate_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          descriptor_set_count;
    const uint32_t*   p_descriptor_counts;
} vk_descriptor_set_variable_descriptor_count_allocate_info;

typedef struct vk_descriptor_set_variable_descriptor_count_layout_support {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_variable_descriptor_count;
} vk_descriptor_set_variable_descriptor_count_layout_support;

typedef struct vk_subpass_description_depth_stencil_resolve {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_resolve_mode_flag_bits       depth_resolve_mode;
    vk_resolve_mode_flag_bits       stencil_resolve_mode;
    const vk_attachment_reference2* p_depth_stencil_resolve_attachment;
} vk_subpass_description_depth_stencil_resolve;

typedef struct vk_physical_device_depth_stencil_resolve_properties {
    vk_structure_type     s_type;
    void*                 p_next;
    vk_resolve_mode_flags supported_depth_resolve_modes;
    vk_resolve_mode_flags supported_stencil_resolve_modes;
    vk_bool32             independent_resolve_none;
    vk_bool32             independent_resolve;
} vk_physical_device_depth_stencil_resolve_properties;

typedef struct vk_physical_device_scalar_block_layout_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         scalar_block_layout;
} vk_physical_device_scalar_block_layout_features;

typedef struct vk_image_stencil_usage_create_info {
    vk_structure_type    s_type;
    const void*          p_next;
    vk_image_usage_flags stencil_usage;
} vk_image_stencil_usage_create_info;

typedef struct vk_sampler_reduction_mode_create_info {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_sampler_reduction_mode reduction_mode;
} vk_sampler_reduction_mode_create_info;

typedef struct vk_physical_device_sampler_filter_minmax_properties {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         filter_minmax_single_component_formats;
    vk_bool32         filter_minmax_image_component_mapping;
} vk_physical_device_sampler_filter_minmax_properties;

typedef struct vk_physical_device_vulkan_memory_model_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         vulkan_memory_model;
    vk_bool32         vulkan_memory_model_device_scope;
    vk_bool32         vulkan_memory_model_availability_visibility_chains;
} vk_physical_device_vulkan_memory_model_features;

typedef struct vk_physical_device_imageless_framebuffer_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         imageless_framebuffer;
} vk_physical_device_imageless_framebuffer_features;

typedef struct vk_framebuffer_attachment_image_info {
    vk_structure_type     s_type;
    const void*           p_next;
    vk_image_create_flags flags;
    vk_image_usage_flags  usage;
    uint32_t              width;
    uint32_t              height;
    uint32_t              layer_count;
    uint32_t              view_format_count;
    const vk_format*      p_view_formats;
} vk_framebuffer_attachment_image_info;

typedef struct vk_framebuffer_attachments_create_info {
    vk_structure_type                           s_type;
    const void*                                 p_next;
    uint32_t                                    attachment_image_info_count;
    const vk_framebuffer_attachment_image_info* p_attachment_image_infos;
} vk_framebuffer_attachments_create_info;

typedef struct vk_render_pass_attachment_begin_info {
    vk_structure_type    s_type;
    const void*          p_next;
    uint32_t             attachment_count;
    const vk_image_view* p_attachments;
} vk_render_pass_attachment_begin_info;

typedef struct vk_physical_device_uniform_buffer_standard_layout_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         uniform_buffer_standard_layout;
} vk_physical_device_uniform_buffer_standard_layout_features;

typedef struct vk_physical_device_shader_subgroup_extended_types_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_subgroup_extended_types;
} vk_physical_device_shader_subgroup_extended_types_features;

typedef struct vk_physical_device_separate_depth_stencil_layouts_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         separate_depth_stencil_layouts;
} vk_physical_device_separate_depth_stencil_layouts_features;

typedef struct vk_attachment_reference_stencil_layout {
    vk_structure_type s_type;
    void*             p_next;
    vk_image_layout   stencil_layout;
} vk_attachment_reference_stencil_layout;

typedef struct vk_attachment_description_stencil_layout {
    vk_structure_type s_type;
    void*             p_next;
    vk_image_layout   stencil_initial_layout;
    vk_image_layout   stencil_final_layout;
} vk_attachment_description_stencil_layout;

typedef struct vk_physical_device_host_query_reset_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         host_query_reset;
} vk_physical_device_host_query_reset_features;

typedef struct vk_physical_device_timeline_semaphore_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         timeline_semaphore;
} vk_physical_device_timeline_semaphore_features;

typedef struct vk_physical_device_timeline_semaphore_properties {
    vk_structure_type s_type;
    void*             p_next;
    uint64_t          max_timeline_semaphore_value_difference;
} vk_physical_device_timeline_semaphore_properties;

typedef struct vk_semaphore_type_create_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_semaphore_type semaphore_type;
    uint64_t          initial_value;
} vk_semaphore_type_create_info;

typedef struct vk_timeline_semaphore_submit_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          wait_semaphore_value_count;
    const uint64_t*   p_wait_semaphore_values;
    uint32_t          signal_semaphore_value_count;
    const uint64_t*   p_signal_semaphore_values;
} vk_timeline_semaphore_submit_info;

typedef struct vk_semaphore_wait_info {
    vk_structure_type       s_type;
    const void*             p_next;
    vk_semaphore_wait_flags flags;
    uint32_t                semaphore_count;
    const vk_semaphore*     p_semaphores;
    const uint64_t*         p_values;
} vk_semaphore_wait_info;

typedef struct vk_semaphore_signal_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_semaphore      semaphore;
    uint64_t          value;
} vk_semaphore_signal_info;

typedef struct vk_physical_device_buffer_device_address_features {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         buffer_device_address;
    vk_bool32         buffer_device_address_capture_replay;
    vk_bool32         buffer_device_address_multi_device;
} vk_physical_device_buffer_device_address_features;

typedef struct vk_buffer_device_address_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_buffer         buffer;
} vk_buffer_device_address_info;

typedef struct vk_buffer_opaque_capture_address_create_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint64_t          opaque_capture_address;
} vk_buffer_opaque_capture_address_create_info;

typedef struct vk_memory_opaque_capture_address_allocate_info {
    vk_structure_type s_type;
    const void*       p_next;
    uint64_t          opaque_capture_address;
} vk_memory_opaque_capture_address_allocate_info;

typedef struct vk_device_memory_opaque_capture_address_info {
    vk_structure_type s_type;
    const void*       p_next;
    vk_device_memory  memory;
} vk_device_memory_opaque_capture_address_info;

typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_count)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                        vk_device_size offset, vk_buffer count_buffer,
                                                        vk_device_size count_buffer_offset, uint32_t max_draw_count,
                                                        uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect_count)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                                vk_device_size offset, vk_buffer count_buffer,
                                                                vk_device_size count_buffer_offset,
                                                                uint32_t max_draw_count, uint32_t stride);
typedef vk_result(VKAPI_PTR* pfn_vk_create_render_pass2)(vk_device                          device,
                                                         const vk_render_pass_create_info2* p_create_info,
                                                         const vk_allocation_callbacks*     p_allocator,
                                                         vk_render_pass*                    p_render_pass);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_render_pass2)(vk_command_buffer                command_buffer,
                                                       const vk_render_pass_begin_info* p_render_pass_begin,
                                                       const vk_subpass_begin_info*     p_subpass_begin_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_next_subpass2)(vk_command_buffer            command_buffer,
                                                  const vk_subpass_begin_info* p_subpass_begin_info,
                                                  const vk_subpass_end_info*   p_subpass_end_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_render_pass2)(vk_command_buffer          command_buffer,
                                                     const vk_subpass_end_info* p_subpass_end_info);
typedef void(VKAPI_PTR* pfn_vk_reset_query_pool)(vk_device device, vk_query_pool query_pool, uint32_t first_query,
                                                 uint32_t query_count);
typedef vk_result(VKAPI_PTR* pfn_vk_get_semaphore_counter_value)(vk_device device, vk_semaphore semaphore,
                                                                 uint64_t* p_value);
typedef vk_result(VKAPI_PTR* pfn_vk_wait_semaphores)(vk_device device, const vk_semaphore_wait_info* p_wait_info,
                                                     uint64_t timeout);
typedef vk_result(VKAPI_PTR* pfn_vk_signal_semaphore)(vk_device device, const vk_semaphore_signal_info* p_signal_info);
typedef vk_device_address(VKAPI_PTR* pfn_vk_get_buffer_device_address)(vk_device                            device,
                                                                       const vk_buffer_device_address_info* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_buffer_opaque_capture_address)(vk_device                            device,
                                                                      const vk_buffer_device_address_info* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_device_memory_opaque_capture_address)(
    vk_device device, const vk_device_memory_opaque_capture_address_info* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_count(vk_command_buffer command_buffer, vk_buffer buffer,
                                                      vk_device_size offset, vk_buffer count_buffer,
                                                      vk_device_size count_buffer_offset, uint32_t max_draw_count,
                                                      uint32_t stride) __asm("vkCmdDrawIndirectCount");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed_indirect_count(vk_command_buffer command_buffer, vk_buffer buffer,
                                                              vk_device_size offset, vk_buffer count_buffer,
                                                              vk_device_size count_buffer_offset,
                                                              uint32_t       max_draw_count,
                                                              uint32_t stride) __asm("vkCmdDrawIndexedIndirectCount");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_render_pass2(vk_device                          device,
                                                       const vk_render_pass_create_info2* p_create_info,
                                                       const vk_allocation_callbacks*     p_allocator,
                                                       vk_render_pass* p_render_pass) __asm("vkCreateRenderPass2");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_begin_render_pass2(vk_command_buffer command_buffer, const vk_render_pass_begin_info* p_render_pass_begin,
                          const vk_subpass_begin_info* p_subpass_begin_info) __asm("vkCmdBeginRenderPass2");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_next_subpass2(vk_command_buffer command_buffer, const vk_subpass_begin_info* p_subpass_begin_info,
                     const vk_subpass_end_info* p_subpass_end_info) __asm("vkCmdNextSubpass2");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_render_pass2(
    vk_command_buffer command_buffer, const vk_subpass_end_info* p_subpass_end_info) __asm("vkCmdEndRenderPass2");

VKAPI_ATTR void VKAPI_CALL vk_reset_query_pool(vk_device device, vk_query_pool query_pool, uint32_t first_query,
                                               uint32_t query_count) __asm("vkResetQueryPool");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_semaphore_counter_value(vk_device device, vk_semaphore semaphore,
                                                               uint64_t* p_value) __asm("vkGetSemaphoreCounterValue");

VKAPI_ATTR vk_result VKAPI_CALL vk_wait_semaphores(vk_device device, const vk_semaphore_wait_info* p_wait_info,
                                                   uint64_t timeout) __asm("vkWaitSemaphores");

VKAPI_ATTR vk_result VKAPI_CALL
vk_signal_semaphore(vk_device device, const vk_semaphore_signal_info* p_signal_info) __asm("vkSignalSemaphore");

VKAPI_ATTR vk_device_address VKAPI_CALL vk_get_buffer_device_address(
    vk_device device, const vk_buffer_device_address_info* p_info) __asm("vkGetBufferDeviceAddress");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_buffer_opaque_capture_address(
    vk_device device, const vk_buffer_device_address_info* p_info) __asm("vkGetBufferOpaqueCaptureAddress");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_device_memory_opaque_capture_address(
    vk_device                                           device,
    const vk_device_memory_opaque_capture_address_info* p_info) __asm("vkGetDeviceMemoryOpaqueCaptureAddress");
#endif

#define vk_khr_surface 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_surface_khr)
#define VK_KHR_SURFACE_SPEC_VERSION 25
#define VK_KHR_SURFACE_EXTENSION_NAME "VK_KHR_surface"

typedef enum vk_present_mode_khr {
    VK_PRESENT_MODE_IMMEDIATE_KHR                 = 0,
    VK_PRESENT_MODE_MAILBOX_KHR                   = 1,
    VK_PRESENT_MODE_FIFO_KHR                      = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR              = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR     = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_MAX_ENUM_KHR                  = 0x7fffffff
} vk_present_mode_khr;

typedef enum vk_color_space_khr {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR          = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT    = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT    = 1000104002,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT       = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT        = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT            = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT         = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT           = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT            = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT             = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT               = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT         = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT      = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT            = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD          = 1000213000,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR           = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT           = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
    VK_COLOR_SPACE_MAX_ENUM_KHR                = 0x7fffffff
} vk_color_space_khr;

typedef enum vk_surface_transform_flag_bits_khr {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR                     = 0x00000001,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR                    = 0x00000002,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR                   = 0x00000004,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR                   = 0x00000008,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR            = 0x00000010,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR  = 0x00000020,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR                      = 0x00000100,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR               = 0x7fffffff
} vk_surface_transform_flag_bits_khr;

typedef enum vk_composite_alpha_flag_bits_khr {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR          = 0x00000001,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR  = 0x00000002,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR         = 0x00000008,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR  = 0x7fffffff
} vk_composite_alpha_flag_bits_khr;
typedef vk_flags vk_composite_alpha_flags_khr;
typedef vk_flags vk_surface_transform_flags_khr;
typedef struct vk_surface_capabilities_khr {
    uint32_t                           min_image_count;
    uint32_t                           max_image_count;
    vk_extent2d                        current_extent;
    vk_extent2d                        min_image_extent;
    vk_extent2d                        max_image_extent;
    uint32_t                           max_image_array_layers;
    vk_surface_transform_flags_khr     supported_transforms;
    vk_surface_transform_flag_bits_khr current_transform;
    vk_composite_alpha_flags_khr       supported_composite_alpha;
    vk_image_usage_flags               supported_usage_flags;
} vk_surface_capabilities_khr;

typedef struct vk_surface_format_khr {
    vk_format          format;
    vk_color_space_khr color_space;
} vk_surface_format_khr;

typedef void(VKAPI_PTR* pfn_vk_destroy_surface_khr)(vk_instance instance, vk_surface_khr surface,
                                                    const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_surface_support_khr)(vk_physical_device physical_device,
                                                                             uint32_t           queue_family_index,
                                                                             vk_surface_khr     surface,
                                                                             vk_bool32*         p_supported);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_surface_capabilities_khr)(
    vk_physical_device physical_device, vk_surface_khr surface, vk_surface_capabilities_khr* p_surface_capabilities);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_surface_formats_khr)(vk_physical_device physical_device,
                                                                             vk_surface_khr     surface,
                                                                             uint32_t*          p_surface_format_count,
                                                                             vk_surface_format_khr* p_surface_formats);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_surface_present_modes_khr)(
    vk_physical_device physical_device, vk_surface_khr surface, uint32_t* p_present_mode_count,
    vk_present_mode_khr* p_present_modes);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL
vk_destroy_surface_khr(vk_instance instance, vk_surface_khr surface,
                       const vk_allocation_callbacks* p_allocator) __asm("vkDestroySurfaceKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_surface_support_khr(
    vk_physical_device physical_device, uint32_t queue_family_index, vk_surface_khr surface,
    vk_bool32* p_supported) __asm("vkGetPhysicalDeviceSurfaceSupportKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_surface_capabilities_khr(
    vk_physical_device physical_device, vk_surface_khr surface,
    vk_surface_capabilities_khr* p_surface_capabilities) __asm("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_surface_formats_khr(
    vk_physical_device physical_device, vk_surface_khr surface, uint32_t* p_surface_format_count,
    vk_surface_format_khr* p_surface_formats) __asm("vkGetPhysicalDeviceSurfaceFormatsKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_surface_present_modes_khr(
    vk_physical_device physical_device, vk_surface_khr surface, uint32_t* p_present_mode_count,
    vk_present_mode_khr* p_present_modes) __asm("vkGetPhysicalDeviceSurfacePresentModesKHR");
#endif

#define vk_khr_swapchain 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_swapchain_khr)
#define VK_KHR_SWAPCHAIN_SPEC_VERSION 70
#define VK_KHR_SWAPCHAIN_EXTENSION_NAME "VK_KHR_swapchain"

typedef enum vk_swapchain_create_flag_bits_khr {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR                   = 0x00000002,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR              = 0x00000004,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR              = 0x7fffffff
} vk_swapchain_create_flag_bits_khr;
typedef vk_flags vk_swapchain_create_flags_khr;

typedef enum vk_device_group_present_mode_flag_bits_khr {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR              = 0x00000001,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR             = 0x00000002,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR                = 0x00000004,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR     = 0x7fffffff
} vk_device_group_present_mode_flag_bits_khr;
typedef vk_flags vk_device_group_present_mode_flags_khr;
typedef struct vk_swapchain_create_info_khr {
    vk_structure_type                  s_type;
    const void*                        p_next;
    vk_swapchain_create_flags_khr      flags;
    vk_surface_khr                     surface;
    uint32_t                           min_image_count;
    vk_format                          image_format;
    vk_color_space_khr                 image_color_space;
    vk_extent2d                        image_extent;
    uint32_t                           image_array_layers;
    vk_image_usage_flags               image_usage;
    vk_sharing_mode                    image_sharing_mode;
    uint32_t                           queue_family_index_count;
    const uint32_t*                    p_queue_family_indices;
    vk_surface_transform_flag_bits_khr pre_transform;
    vk_composite_alpha_flag_bits_khr   composite_alpha;
    vk_present_mode_khr                present_mode;
    vk_bool32                          clipped;
    vk_swapchain_khr                   old_swapchain;
} vk_swapchain_create_info_khr;

typedef struct vk_present_info_khr {
    vk_structure_type       s_type;
    const void*             p_next;
    uint32_t                wait_semaphore_count;
    const vk_semaphore*     p_wait_semaphores;
    uint32_t                swapchain_count;
    const vk_swapchain_khr* p_swapchains;
    const uint32_t*         p_image_indices;
    vk_result*              p_results;
} vk_present_info_khr;

typedef struct vk_image_swapchain_create_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_swapchain_khr  swapchain;
} vk_image_swapchain_create_info_khr;

typedef struct vk_bind_image_memory_swapchain_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_swapchain_khr  swapchain;
    uint32_t          image_index;
} vk_bind_image_memory_swapchain_info_khr;

typedef struct vk_acquire_next_image_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_swapchain_khr  swapchain;
    uint64_t          timeout;
    vk_semaphore      semaphore;
    vk_fence          fence;
    uint32_t          device_mask;
} vk_acquire_next_image_info_khr;

typedef struct vk_device_group_present_capabilities_khr {
    vk_structure_type                      s_type;
    const void*                            p_next;
    uint32_t                               present_mask[VK_MAX_DEVICE_GROUP_SIZE];
    vk_device_group_present_mode_flags_khr modes;
} vk_device_group_present_capabilities_khr;

typedef struct vk_device_group_present_info_khr {
    vk_structure_type                          s_type;
    const void*                                p_next;
    uint32_t                                   swapchain_count;
    const uint32_t*                            p_device_masks;
    vk_device_group_present_mode_flag_bits_khr mode;
} vk_device_group_present_info_khr;

typedef struct vk_device_group_swapchain_create_info_khr {
    vk_structure_type                      s_type;
    const void*                            p_next;
    vk_device_group_present_mode_flags_khr modes;
} vk_device_group_swapchain_create_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_create_swapchain_khr)(vk_device                           device,
                                                          const vk_swapchain_create_info_khr* p_create_info,
                                                          const vk_allocation_callbacks*      p_allocator,
                                                          vk_swapchain_khr*                   p_swapchain);
typedef void(VKAPI_PTR* pfn_vk_destroy_swapchain_khr)(vk_device device, vk_swapchain_khr swapchain,
                                                      const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_get_swapchain_images_khr)(vk_device device, vk_swapchain_khr swapchain,
                                                              uint32_t* p_swapchain_image_count,
                                                              vk_image* p_swapchain_images);
typedef vk_result(VKAPI_PTR* pfn_vk_acquire_next_image_khr)(vk_device device, vk_swapchain_khr swapchain,
                                                            uint64_t timeout, vk_semaphore semaphore, vk_fence fence,
                                                            uint32_t* p_image_index);
typedef vk_result(VKAPI_PTR* pfn_vk_queue_present_khr)(vk_queue queue, const vk_present_info_khr* p_present_info);
typedef vk_result(VKAPI_PTR* pfn_vk_get_device_group_present_capabilities_khr)(
    vk_device device, vk_device_group_present_capabilities_khr* p_device_group_present_capabilities);
typedef vk_result(VKAPI_PTR* pfn_vk_get_device_group_surface_present_modes_khr)(
    vk_device device, vk_surface_khr surface, vk_device_group_present_mode_flags_khr* p_modes);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_present_rectangles_khr)(vk_physical_device physical_device,
                                                                                vk_surface_khr     surface,
                                                                                uint32_t*          p_rect_count,
                                                                                vk_rect2d*         p_rects);
typedef vk_result(VKAPI_PTR* pfn_vk_acquire_next_image2khr)(vk_device                             device,
                                                            const vk_acquire_next_image_info_khr* p_acquire_info,
                                                            uint32_t*                             p_image_index);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_swapchain_khr(vk_device                           device,
                                                        const vk_swapchain_create_info_khr* p_create_info,
                                                        const vk_allocation_callbacks*      p_allocator,
                                                        vk_swapchain_khr* p_swapchain) __asm("vkCreateSwapchainKHR");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_swapchain_khr(vk_device device, vk_swapchain_khr swapchain,
                         const vk_allocation_callbacks* p_allocator) __asm("vkDestroySwapchainKHR");

VKAPI_ATTR vk_result VKAPI_CALL
vk_get_swapchain_images_khr(vk_device device, vk_swapchain_khr swapchain, uint32_t* p_swapchain_image_count,
                            vk_image* p_swapchain_images) __asm("vkGetSwapchainImagesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_acquire_next_image_khr(vk_device device, vk_swapchain_khr swapchain,
                                                          uint64_t timeout, vk_semaphore semaphore, vk_fence fence,
                                                          uint32_t* p_image_index) __asm("vkAcquireNextImageKHR");

VKAPI_ATTR vk_result VKAPI_CALL
vk_queue_present_khr(vk_queue queue, const vk_present_info_khr* p_present_info) __asm("vkQueuePresentKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_device_group_present_capabilities_khr(
    vk_device             device, vk_device_group_present_capabilities_khr*
                          p_device_group_present_capabilities) __asm("vkGetDeviceGroupPresentCapabilitiesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_device_group_surface_present_modes_khr(
    vk_device device, vk_surface_khr surface,
    vk_device_group_present_mode_flags_khr* p_modes) __asm("vkGetDeviceGroupSurfacePresentModesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_present_rectangles_khr(
    vk_physical_device physical_device, vk_surface_khr surface, uint32_t* p_rect_count,
    vk_rect2d* p_rects) __asm("vkGetPhysicalDevicePresentRectanglesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_acquire_next_image2khr(vk_device                             device,
                                                          const vk_acquire_next_image_info_khr* p_acquire_info,
                                                          uint32_t* p_image_index) __asm("vkAcquireNextImage2KHR");
#endif

#define vk_khr_display 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_display_khr)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_display_mode_khr)
#define VK_KHR_DISPLAY_SPEC_VERSION 23
#define VK_KHR_DISPLAY_EXTENSION_NAME "VK_KHR_display"
typedef vk_flags vk_display_mode_create_flags_khr;

typedef enum vk_display_plane_alpha_flag_bits_khr {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR                  = 0x00000001,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR                  = 0x00000002,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR               = 0x00000004,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR          = 0x7fffffff
} vk_display_plane_alpha_flag_bits_khr;
typedef vk_flags vk_display_plane_alpha_flags_khr;
typedef vk_flags vk_display_surface_create_flags_khr;
typedef struct vk_display_mode_parameters_khr {
    vk_extent2d visible_region;
    uint32_t    refresh_rate;
} vk_display_mode_parameters_khr;

typedef struct vk_display_mode_create_info_khr {
    vk_structure_type                s_type;
    const void*                      p_next;
    vk_display_mode_create_flags_khr flags;
    vk_display_mode_parameters_khr   parameters;
} vk_display_mode_create_info_khr;

typedef struct vk_display_mode_properties_khr {
    vk_display_mode_khr            display_mode;
    vk_display_mode_parameters_khr parameters;
} vk_display_mode_properties_khr;

typedef struct vk_display_plane_capabilities_khr {
    vk_display_plane_alpha_flags_khr supported_alpha;
    vk_offset2d                      min_src_position;
    vk_offset2d                      max_src_position;
    vk_extent2d                      min_src_extent;
    vk_extent2d                      max_src_extent;
    vk_offset2d                      min_dst_position;
    vk_offset2d                      max_dst_position;
    vk_extent2d                      min_dst_extent;
    vk_extent2d                      max_dst_extent;
} vk_display_plane_capabilities_khr;

typedef struct vk_display_plane_properties_khr {
    vk_display_khr current_display;
    uint32_t       current_stack_index;
} vk_display_plane_properties_khr;

typedef struct vk_display_properties_khr {
    vk_display_khr                 display;
    const char*                    display_name;
    vk_extent2d                    physical_dimensions;
    vk_extent2d                    physical_resolution;
    vk_surface_transform_flags_khr supported_transforms;
    vk_bool32                      plane_reorder_possible;
    vk_bool32                      persistent_content;
} vk_display_properties_khr;

typedef struct vk_display_surface_create_info_khr {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_display_surface_create_flags_khr  flags;
    vk_display_mode_khr                  display_mode;
    uint32_t                             plane_index;
    uint32_t                             plane_stack_index;
    vk_surface_transform_flag_bits_khr   transform;
    float                                global_alpha;
    vk_display_plane_alpha_flag_bits_khr alpha_mode;
    vk_extent2d                          image_extent;
} vk_display_surface_create_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_display_properties_khr)(
    vk_physical_device physical_device, uint32_t* p_property_count, vk_display_properties_khr* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_display_plane_properties_khr)(
    vk_physical_device physical_device, uint32_t* p_property_count, vk_display_plane_properties_khr* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_display_plane_supported_displays_khr)(vk_physical_device physical_device,
                                                                              uint32_t           plane_index,
                                                                              uint32_t*          p_display_count,
                                                                              vk_display_khr*    p_displays);
typedef vk_result(VKAPI_PTR* pfn_vk_get_display_mode_properties_khr)(vk_physical_device physical_device,
                                                                     vk_display_khr display, uint32_t* p_property_count,
                                                                     vk_display_mode_properties_khr* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_create_display_mode_khr)(vk_physical_device physical_device, vk_display_khr display,
                                                             const vk_display_mode_create_info_khr* p_create_info,
                                                             const vk_allocation_callbacks*         p_allocator,
                                                             vk_display_mode_khr*                   p_mode);
typedef vk_result(VKAPI_PTR* pfn_vk_get_display_plane_capabilities_khr)(
    vk_physical_device physical_device, vk_display_mode_khr mode, uint32_t plane_index,
    vk_display_plane_capabilities_khr* p_capabilities);
typedef vk_result(VKAPI_PTR* pfn_vk_create_display_plane_surface_khr)(
    vk_instance instance, const vk_display_surface_create_info_khr* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_surface_khr* p_surface);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_display_properties_khr(
    vk_physical_device physical_device, uint32_t* p_property_count,
    vk_display_properties_khr* p_properties) __asm("vkGetPhysicalDeviceDisplayPropertiesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_display_plane_properties_khr(
    vk_physical_device physical_device, uint32_t* p_property_count,
    vk_display_plane_properties_khr* p_properties) __asm("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_display_plane_supported_displays_khr(
    vk_physical_device physical_device, uint32_t plane_index, uint32_t* p_display_count,
    vk_display_khr* p_displays) __asm("vkGetDisplayPlaneSupportedDisplaysKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_display_mode_properties_khr(
    vk_physical_device physical_device, vk_display_khr display, uint32_t* p_property_count,
    vk_display_mode_properties_khr* p_properties) __asm("vkGetDisplayModePropertiesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_display_mode_khr(vk_physical_device physical_device, vk_display_khr display,
                                                           const vk_display_mode_create_info_khr* p_create_info,
                                                           const vk_allocation_callbacks*         p_allocator,
                                                           vk_display_mode_khr* p_mode) __asm("vkCreateDisplayModeKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_display_plane_capabilities_khr(
    vk_physical_device physical_device, vk_display_mode_khr mode, uint32_t plane_index,
    vk_display_plane_capabilities_khr* p_capabilities) __asm("vkGetDisplayPlaneCapabilitiesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_display_plane_surface_khr(
    vk_instance instance, const vk_display_surface_create_info_khr* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_surface_khr* p_surface) __asm("vkCreateDisplayPlaneSurfaceKHR");
#endif

#define vk_khr_display_swapchain 1
#define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION 10
#define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME "VK_KHR_display_swapchain"
typedef struct vk_display_present_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_rect2d         src_rect;
    vk_rect2d         dst_rect;
    vk_bool32         persistent;
} vk_display_present_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_create_shared_swapchains_khr)(vk_device device, uint32_t swapchain_count,
                                                                  const vk_swapchain_create_info_khr* p_create_infos,
                                                                  const vk_allocation_callbacks*      p_allocator,
                                                                  vk_swapchain_khr*                   p_swapchains);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_shared_swapchains_khr(
    vk_device device, uint32_t swapchain_count, const vk_swapchain_create_info_khr* p_create_infos,
    const vk_allocation_callbacks* p_allocator, vk_swapchain_khr* p_swapchains) __asm("vkCreateSharedSwapchainsKHR");
#endif

#define vk_khr_sampler_mirror_clamp_to_edge 1
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION 3
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME "VK_KHR_sampler_mirror_clamp_to_edge"

#define vk_khr_multiview 1
#define VK_KHR_MULTIVIEW_SPEC_VERSION 1
#define VK_KHR_MULTIVIEW_EXTENSION_NAME "VK_KHR_multiview"
typedef vk_render_pass_multiview_create_info vk_render_pass_multiview_create_info_khr;

typedef vk_physical_device_multiview_features vk_physical_device_multiview_features_khr;

typedef vk_physical_device_multiview_properties vk_physical_device_multiview_properties_khr;

#define vk_khr_get_physical_device_properties2 1
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION 2
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_physical_device_properties2"
typedef vk_physical_device_features2 vk_physical_device_features2khr;

typedef vk_physical_device_properties2 vk_physical_device_properties2khr;

typedef vk_format_properties2 vk_format_properties2khr;

typedef vk_image_format_properties2 vk_image_format_properties2khr;

typedef vk_physical_device_image_format_info2 vk_physical_device_image_format_info2khr;

typedef vk_queue_family_properties2 vk_queue_family_properties2khr;

typedef vk_physical_device_memory_properties2 vk_physical_device_memory_properties2khr;

typedef vk_sparse_image_format_properties2 vk_sparse_image_format_properties2khr;

typedef vk_physical_device_sparse_image_format_info2 vk_physical_device_sparse_image_format_info2khr;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_features2khr)(vk_physical_device            physical_device,
                                                                 vk_physical_device_features2* p_features);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_properties2khr)(vk_physical_device              physical_device,
                                                                   vk_physical_device_properties2* p_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_format_properties2khr)(vk_physical_device     physical_device,
                                                                          vk_format              format,
                                                                          vk_format_properties2* p_format_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_image_format_properties2khr)(
    vk_physical_device physical_device, const vk_physical_device_image_format_info2* p_image_format_info,
    vk_image_format_properties2* p_image_format_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_properties2khr)(
    vk_physical_device physical_device, uint32_t* p_queue_family_property_count,
    vk_queue_family_properties2* p_queue_family_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_memory_properties2khr)(
    vk_physical_device physical_device, vk_physical_device_memory_properties2* p_memory_properties);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_sparse_image_format_properties2khr)(
    vk_physical_device physical_device, const vk_physical_device_sparse_image_format_info2* p_format_info,
    uint32_t* p_property_count, vk_sparse_image_format_properties2* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL
vk_get_physical_device_features2khr(vk_physical_device            physical_device,
                                    vk_physical_device_features2* p_features) __asm("vkGetPhysicalDeviceFeatures2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_properties2khr(
    vk_physical_device              physical_device,
    vk_physical_device_properties2* p_properties) __asm("vkGetPhysicalDeviceProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_format_properties2khr(
    vk_physical_device physical_device, vk_format format,
    vk_format_properties2* p_format_properties) __asm("vkGetPhysicalDeviceFormatProperties2KHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_image_format_properties2khr(
    vk_physical_device physical_device, const vk_physical_device_image_format_info2* p_image_format_info,
    vk_image_format_properties2* p_image_format_properties) __asm("vkGetPhysicalDeviceImageFormatProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_properties2khr(
    vk_physical_device physical_device, uint32_t* p_queue_family_property_count,
    vk_queue_family_properties2* p_queue_family_properties) __asm("vkGetPhysicalDeviceQueueFamilyProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_memory_properties2khr(
    vk_physical_device                     physical_device,
    vk_physical_device_memory_properties2* p_memory_properties) __asm("vkGetPhysicalDeviceMemoryProperties2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_sparse_image_format_properties2khr(
    vk_physical_device physical_device, const vk_physical_device_sparse_image_format_info2* p_format_info,
    uint32_t*                           p_property_count,
    vk_sparse_image_format_properties2* p_properties) __asm("vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
#endif

#define vk_khr_device_group 1
#define VK_KHR_DEVICE_GROUP_SPEC_VERSION 4
#define VK_KHR_DEVICE_GROUP_EXTENSION_NAME "VK_KHR_device_group"
typedef vk_peer_memory_feature_flags vk_peer_memory_feature_flags_khr;

typedef vk_peer_memory_feature_flag_bits vk_peer_memory_feature_flag_bits_khr;

typedef vk_memory_allocate_flags vk_memory_allocate_flags_khr;

typedef vk_memory_allocate_flag_bits vk_memory_allocate_flag_bits_khr;

typedef vk_memory_allocate_flags_info vk_memory_allocate_flags_info_khr;

typedef vk_device_group_render_pass_begin_info vk_device_group_render_pass_begin_info_khr;

typedef vk_device_group_command_buffer_begin_info vk_device_group_command_buffer_begin_info_khr;

typedef vk_device_group_submit_info vk_device_group_submit_info_khr;

typedef vk_device_group_bind_sparse_info vk_device_group_bind_sparse_info_khr;

typedef vk_bind_buffer_memory_device_group_info vk_bind_buffer_memory_device_group_info_khr;

typedef vk_bind_image_memory_device_group_info vk_bind_image_memory_device_group_info_khr;

typedef void(VKAPI_PTR* pfn_vk_get_device_group_peer_memory_features_khr)(
    vk_device device, uint32_t heap_index, uint32_t local_device_index, uint32_t remote_device_index,
    vk_peer_memory_feature_flags* p_peer_memory_features);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_device_mask_khr)(vk_command_buffer command_buffer, uint32_t device_mask);
typedef void(VKAPI_PTR* pfn_vk_cmd_dispatch_base_khr)(vk_command_buffer command_buffer, uint32_t base_group_x,
                                                      uint32_t base_group_y, uint32_t base_group_z,
                                                      uint32_t group_count_x, uint32_t group_count_y,
                                                      uint32_t group_count_z);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_device_group_peer_memory_features_khr(
    vk_device device, uint32_t heap_index, uint32_t local_device_index, uint32_t remote_device_index,
    vk_peer_memory_feature_flags* p_peer_memory_features) __asm("vkGetDeviceGroupPeerMemoryFeaturesKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_device_mask_khr(vk_command_buffer command_buffer,
                                                      uint32_t          device_mask) __asm("vkCmdSetDeviceMaskKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_dispatch_base_khr(vk_command_buffer command_buffer, uint32_t base_group_x,
                                                    uint32_t base_group_y, uint32_t base_group_z,
                                                    uint32_t group_count_x, uint32_t group_count_y,
                                                    uint32_t group_count_z) __asm("vkCmdDispatchBaseKHR");
#endif

#define vk_khr_shader_draw_parameters 1
#define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION 1
#define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME "VK_KHR_shader_draw_parameters"

#define vk_khr_maintenance1 1
#define VK_KHR_MAINTENANCE1_SPEC_VERSION 2
#define VK_KHR_MAINTENANCE1_EXTENSION_NAME "VK_KHR_maintenance1"
typedef vk_command_pool_trim_flags vk_command_pool_trim_flags_khr;

typedef void(VKAPI_PTR* pfn_vk_trim_command_pool_khr)(vk_device device, vk_command_pool command_pool,
                                                      vk_command_pool_trim_flags flags);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_trim_command_pool_khr(vk_device device, vk_command_pool command_pool,
                                                    vk_command_pool_trim_flags flags) __asm("vkTrimCommandPoolKHR");
#endif

#define vk_khr_device_group_creation 1
#define VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION 1
#define VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME "VK_KHR_device_group_creation"
#define VK_MAX_DEVICE_GROUP_SIZE_KHR VK_MAX_DEVICE_GROUP_SIZE
typedef vk_physical_device_group_properties vk_physical_device_group_properties_khr;

typedef vk_device_group_device_create_info vk_device_group_device_create_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_physical_device_groups_khr)(
    vk_instance instance, uint32_t* p_physical_device_group_count,
    vk_physical_device_group_properties* p_physical_device_group_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_enumerate_physical_device_groups_khr(
    vk_instance instance, uint32_t* p_physical_device_group_count,
    vk_physical_device_group_properties*
        p_physical_device_group_properties) __asm("vkEnumeratePhysicalDeviceGroupsKHR");
#endif

#define vk_khr_external_memory_capabilities 1
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_memory_capabilities"
#define VK_LUID_SIZE_KHR VK_LUID_SIZE
typedef vk_external_memory_handle_type_flags vk_external_memory_handle_type_flags_khr;

typedef vk_external_memory_handle_type_flag_bits vk_external_memory_handle_type_flag_bits_khr;

typedef vk_external_memory_feature_flags vk_external_memory_feature_flags_khr;

typedef vk_external_memory_feature_flag_bits vk_external_memory_feature_flag_bits_khr;

typedef vk_external_memory_properties vk_external_memory_properties_khr;

typedef vk_physical_device_external_image_format_info vk_physical_device_external_image_format_info_khr;

typedef vk_external_image_format_properties vk_external_image_format_properties_khr;

typedef vk_physical_device_external_buffer_info vk_physical_device_external_buffer_info_khr;

typedef vk_external_buffer_properties vk_external_buffer_properties_khr;

typedef vk_physical_device_idproperties vk_physical_device_idproperties_khr;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_buffer_properties_khr)(
    vk_physical_device physical_device, const vk_physical_device_external_buffer_info* p_external_buffer_info,
    vk_external_buffer_properties* p_external_buffer_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_buffer_properties_khr(
    vk_physical_device physical_device, const vk_physical_device_external_buffer_info* p_external_buffer_info,
    vk_external_buffer_properties*
        p_external_buffer_properties) __asm("vkGetPhysicalDeviceExternalBufferPropertiesKHR");
#endif

#define vk_khr_external_memory 1
#define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME "VK_KHR_external_memory"
#define VK_QUEUE_FAMILY_EXTERNAL_KHR VK_QUEUE_FAMILY_EXTERNAL
typedef vk_external_memory_image_create_info vk_external_memory_image_create_info_khr;

typedef vk_external_memory_buffer_create_info vk_external_memory_buffer_create_info_khr;

typedef vk_export_memory_allocate_info vk_export_memory_allocate_info_khr;

#define vk_khr_external_memory_fd 1
#define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME "VK_KHR_external_memory_fd"
typedef struct vk_import_memory_fd_info_khr {
    vk_structure_type                        s_type;
    const void*                              p_next;
    vk_external_memory_handle_type_flag_bits handle_type;
    int                                      fd;
} vk_import_memory_fd_info_khr;

typedef struct vk_memory_fd_properties_khr {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          memory_type_bits;
} vk_memory_fd_properties_khr;

typedef struct vk_memory_get_fd_info_khr {
    vk_structure_type                        s_type;
    const void*                              p_next;
    vk_device_memory                         memory;
    vk_external_memory_handle_type_flag_bits handle_type;
} vk_memory_get_fd_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_get_memory_fd_khr)(vk_device device, const vk_memory_get_fd_info_khr* p_get_fd_info,
                                                       int* p_fd);
typedef vk_result(VKAPI_PTR* pfn_vk_get_memory_fd_properties_khr)(vk_device                                device,
                                                                  vk_external_memory_handle_type_flag_bits handle_type,
                                                                  int                                      fd,
                                                                  vk_memory_fd_properties_khr* p_memory_fd_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_memory_fd_khr(vk_device device, const vk_memory_get_fd_info_khr* p_get_fd_info,
                                                     int* p_fd) __asm("vkGetMemoryFdKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_memory_fd_properties_khr(
    vk_device device, vk_external_memory_handle_type_flag_bits handle_type, int fd,
    vk_memory_fd_properties_khr* p_memory_fd_properties) __asm("vkGetMemoryFdPropertiesKHR");
#endif

#define vk_khr_external_semaphore_capabilities 1
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_semaphore_capabilities"
typedef vk_external_semaphore_handle_type_flags vk_external_semaphore_handle_type_flags_khr;

typedef vk_external_semaphore_handle_type_flag_bits vk_external_semaphore_handle_type_flag_bits_khr;

typedef vk_external_semaphore_feature_flags vk_external_semaphore_feature_flags_khr;

typedef vk_external_semaphore_feature_flag_bits vk_external_semaphore_feature_flag_bits_khr;

typedef vk_physical_device_external_semaphore_info vk_physical_device_external_semaphore_info_khr;

typedef vk_external_semaphore_properties vk_external_semaphore_properties_khr;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_semaphore_properties_khr)(
    vk_physical_device physical_device, const vk_physical_device_external_semaphore_info* p_external_semaphore_info,
    vk_external_semaphore_properties* p_external_semaphore_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_semaphore_properties_khr(
    vk_physical_device physical_device, const vk_physical_device_external_semaphore_info* p_external_semaphore_info,
    vk_external_semaphore_properties*
        p_external_semaphore_properties) __asm("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
#endif

#define vk_khr_external_semaphore 1
#define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME "VK_KHR_external_semaphore"
typedef vk_semaphore_import_flags vk_semaphore_import_flags_khr;

typedef vk_semaphore_import_flag_bits vk_semaphore_import_flag_bits_khr;

typedef vk_export_semaphore_create_info vk_export_semaphore_create_info_khr;

#define vk_khr_external_semaphore_fd 1
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME "VK_KHR_external_semaphore_fd"
typedef struct vk_import_semaphore_fd_info_khr {
    vk_structure_type                           s_type;
    const void*                                 p_next;
    vk_semaphore                                semaphore;
    vk_semaphore_import_flags                   flags;
    vk_external_semaphore_handle_type_flag_bits handle_type;
    int                                         fd;
} vk_import_semaphore_fd_info_khr;

typedef struct vk_semaphore_get_fd_info_khr {
    vk_structure_type                           s_type;
    const void*                                 p_next;
    vk_semaphore                                semaphore;
    vk_external_semaphore_handle_type_flag_bits handle_type;
} vk_semaphore_get_fd_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_import_semaphore_fd_khr)(
    vk_device device, const vk_import_semaphore_fd_info_khr* p_import_semaphore_fd_info);
typedef vk_result(VKAPI_PTR* pfn_vk_get_semaphore_fd_khr)(vk_device                           device,
                                                          const vk_semaphore_get_fd_info_khr* p_get_fd_info, int* p_fd);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_import_semaphore_fd_khr(
    vk_device                              device,
    const vk_import_semaphore_fd_info_khr* p_import_semaphore_fd_info) __asm("vkImportSemaphoreFdKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_semaphore_fd_khr(vk_device                           device,
                                                        const vk_semaphore_get_fd_info_khr* p_get_fd_info,
                                                        int* p_fd) __asm("vkGetSemaphoreFdKHR");
#endif

#define vk_khr_push_descriptor 1
#define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION 2
#define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME "VK_KHR_push_descriptor"
typedef struct vk_physical_device_push_descriptor_properties_khr {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_push_descriptors;
} vk_physical_device_push_descriptor_properties_khr;

typedef void(VKAPI_PTR* pfn_vk_cmd_push_descriptor_set_khr)(vk_command_buffer      command_buffer,
                                                            vk_pipeline_bind_point pipeline_bind_point,
                                                            vk_pipeline_layout layout, uint32_t set,
                                                            uint32_t                       descriptor_write_count,
                                                            const vk_write_descriptor_set* p_descriptor_writes);
typedef void(VKAPI_PTR* pfn_vk_cmd_push_descriptor_set_with_template_khr)(
    vk_command_buffer command_buffer, vk_descriptor_update_template descriptor_update_template,
    vk_pipeline_layout layout, uint32_t set, const void* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL
vk_cmd_push_descriptor_set_khr(vk_command_buffer command_buffer, vk_pipeline_bind_point pipeline_bind_point,
                               vk_pipeline_layout layout, uint32_t set, uint32_t descriptor_write_count,
                               const vk_write_descriptor_set* p_descriptor_writes) __asm("vkCmdPushDescriptorSetKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_push_descriptor_set_with_template_khr(
    vk_command_buffer command_buffer, vk_descriptor_update_template descriptor_update_template,
    vk_pipeline_layout layout, uint32_t set, const void* p_data) __asm("vkCmdPushDescriptorSetWithTemplateKHR");
#endif

#define vk_khr_shader_float16_int8 1
#define VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION 1
#define VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME "VK_KHR_shader_float16_int8"
typedef vk_physical_device_shader_float16int8features vk_physical_device_shader_float16int8features_khr;

typedef vk_physical_device_shader_float16int8features vk_physical_device_float16int8features_khr;

#define vk_khr_16bit_storage 1
#define VK_KHR_16BIT_STORAGE_SPEC_VERSION 1
#define VK_KHR_16BIT_STORAGE_EXTENSION_NAME "VK_KHR_16bit_storage"
typedef vk_physical_device16bit_storage_features vk_physical_device16bit_storage_features_khr;

#define vk_khr_incremental_present 1
#define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION 1
#define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME "VK_KHR_incremental_present"
typedef struct vk_rect_layer_khr {
    vk_offset2d offset;
    vk_extent2d extent;
    uint32_t    layer;
} vk_rect_layer_khr;

typedef struct vk_present_region_khr {
    uint32_t                 rectangle_count;
    const vk_rect_layer_khr* p_rectangles;
} vk_present_region_khr;

typedef struct vk_present_regions_khr {
    vk_structure_type            s_type;
    const void*                  p_next;
    uint32_t                     swapchain_count;
    const vk_present_region_khr* p_regions;
} vk_present_regions_khr;

#define vk_khr_descriptor_update_template 1
typedef vk_descriptor_update_template vk_descriptor_update_template_khr;

#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION 1
#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME "VK_KHR_descriptor_update_template"
typedef vk_descriptor_update_template_type vk_descriptor_update_template_type_khr;

typedef vk_descriptor_update_template_create_flags vk_descriptor_update_template_create_flags_khr;

typedef vk_descriptor_update_template_entry vk_descriptor_update_template_entry_khr;

typedef vk_descriptor_update_template_create_info vk_descriptor_update_template_create_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_create_descriptor_update_template_khr)(
    vk_device device, const vk_descriptor_update_template_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_descriptor_update_template* p_descriptor_update_template);
typedef void(VKAPI_PTR* pfn_vk_destroy_descriptor_update_template_khr)(
    vk_device device, vk_descriptor_update_template descriptor_update_template,
    const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_update_descriptor_set_with_template_khr)(
    vk_device device, vk_descriptor_set descriptor_set, vk_descriptor_update_template descriptor_update_template,
    const void* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_descriptor_update_template_khr(
    vk_device device, const vk_descriptor_update_template_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator,
    vk_descriptor_update_template* p_descriptor_update_template) __asm("vkCreateDescriptorUpdateTemplateKHR");

VKAPI_ATTR void VKAPI_CALL vk_destroy_descriptor_update_template_khr(
    vk_device device, vk_descriptor_update_template descriptor_update_template,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroyDescriptorUpdateTemplateKHR");

VKAPI_ATTR void VKAPI_CALL vk_update_descriptor_set_with_template_khr(
    vk_device device, vk_descriptor_set descriptor_set, vk_descriptor_update_template descriptor_update_template,
    const void* p_data) __asm("vkUpdateDescriptorSetWithTemplateKHR");
#endif

#define vk_khr_imageless_framebuffer 1
#define VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION 1
#define VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME "VK_KHR_imageless_framebuffer"
typedef vk_physical_device_imageless_framebuffer_features vk_physical_device_imageless_framebuffer_features_khr;

typedef vk_framebuffer_attachments_create_info vk_framebuffer_attachments_create_info_khr;

typedef vk_framebuffer_attachment_image_info vk_framebuffer_attachment_image_info_khr;

typedef vk_render_pass_attachment_begin_info vk_render_pass_attachment_begin_info_khr;

#define vk_khr_create_renderpass2 1
#define VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION 1
#define VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME "VK_KHR_create_renderpass2"
typedef vk_render_pass_create_info2 vk_render_pass_create_info2khr;

typedef vk_attachment_description2 vk_attachment_description2khr;

typedef vk_attachment_reference2 vk_attachment_reference2khr;

typedef vk_subpass_description2 vk_subpass_description2khr;

typedef vk_subpass_dependency2 vk_subpass_dependency2khr;

typedef vk_subpass_begin_info vk_subpass_begin_info_khr;

typedef vk_subpass_end_info vk_subpass_end_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_create_render_pass2khr)(vk_device                          device,
                                                            const vk_render_pass_create_info2* p_create_info,
                                                            const vk_allocation_callbacks*     p_allocator,
                                                            vk_render_pass*                    p_render_pass);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_render_pass2khr)(vk_command_buffer                command_buffer,
                                                          const vk_render_pass_begin_info* p_render_pass_begin,
                                                          const vk_subpass_begin_info*     p_subpass_begin_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_next_subpass2khr)(vk_command_buffer            command_buffer,
                                                     const vk_subpass_begin_info* p_subpass_begin_info,
                                                     const vk_subpass_end_info*   p_subpass_end_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_render_pass2khr)(vk_command_buffer          command_buffer,
                                                        const vk_subpass_end_info* p_subpass_end_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_render_pass2khr(
    vk_device device, const vk_render_pass_create_info2* p_create_info, const vk_allocation_callbacks* p_allocator,
    vk_render_pass* p_render_pass) __asm("vkCreateRenderPass2KHR");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_begin_render_pass2khr(vk_command_buffer command_buffer, const vk_render_pass_begin_info* p_render_pass_begin,
                             const vk_subpass_begin_info* p_subpass_begin_info) __asm("vkCmdBeginRenderPass2KHR");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_next_subpass2khr(vk_command_buffer command_buffer, const vk_subpass_begin_info* p_subpass_begin_info,
                        const vk_subpass_end_info* p_subpass_end_info) __asm("vkCmdNextSubpass2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_render_pass2khr(
    vk_command_buffer command_buffer, const vk_subpass_end_info* p_subpass_end_info) __asm("vkCmdEndRenderPass2KHR");
#endif

#define vk_khr_shared_presentable_image 1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION 1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME "VK_KHR_shared_presentable_image"
typedef struct vk_shared_present_surface_capabilities_khr {
    vk_structure_type    s_type;
    void*                p_next;
    vk_image_usage_flags shared_present_supported_usage_flags;
} vk_shared_present_surface_capabilities_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_get_swapchain_status_khr)(vk_device device, vk_swapchain_khr swapchain);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL
vk_get_swapchain_status_khr(vk_device device, vk_swapchain_khr swapchain) __asm("vkGetSwapchainStatusKHR");
#endif

#define vk_khr_external_fence_capabilities 1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_fence_capabilities"
typedef vk_external_fence_handle_type_flags vk_external_fence_handle_type_flags_khr;

typedef vk_external_fence_handle_type_flag_bits vk_external_fence_handle_type_flag_bits_khr;

typedef vk_external_fence_feature_flags vk_external_fence_feature_flags_khr;

typedef vk_external_fence_feature_flag_bits vk_external_fence_feature_flag_bits_khr;

typedef vk_physical_device_external_fence_info vk_physical_device_external_fence_info_khr;

typedef vk_external_fence_properties vk_external_fence_properties_khr;

typedef void(VKAPI_PTR* pfn_vk_get_physical_device_external_fence_properties_khr)(
    vk_physical_device physical_device, const vk_physical_device_external_fence_info* p_external_fence_info,
    vk_external_fence_properties* p_external_fence_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_external_fence_properties_khr(
    vk_physical_device physical_device, const vk_physical_device_external_fence_info* p_external_fence_info,
    vk_external_fence_properties* p_external_fence_properties) __asm("vkGetPhysicalDeviceExternalFencePropertiesKHR");
#endif

#define vk_khr_external_fence 1
#define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME "VK_KHR_external_fence"
typedef vk_fence_import_flags vk_fence_import_flags_khr;

typedef vk_fence_import_flag_bits vk_fence_import_flag_bits_khr;

typedef vk_export_fence_create_info vk_export_fence_create_info_khr;

#define vk_khr_external_fence_fd 1
#define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME "VK_KHR_external_fence_fd"
typedef struct vk_import_fence_fd_info_khr {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_fence                                fence;
    vk_fence_import_flags                   flags;
    vk_external_fence_handle_type_flag_bits handle_type;
    int                                     fd;
} vk_import_fence_fd_info_khr;

typedef struct vk_fence_get_fd_info_khr {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_fence                                fence;
    vk_external_fence_handle_type_flag_bits handle_type;
} vk_fence_get_fd_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_import_fence_fd_khr)(vk_device                          device,
                                                         const vk_import_fence_fd_info_khr* p_import_fence_fd_info);
typedef vk_result(VKAPI_PTR* pfn_vk_get_fence_fd_khr)(vk_device device, const vk_fence_get_fd_info_khr* p_get_fd_info,
                                                      int* p_fd);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_import_fence_fd_khr(
    vk_device device, const vk_import_fence_fd_info_khr* p_import_fence_fd_info) __asm("vkImportFenceFdKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_fence_fd_khr(vk_device device, const vk_fence_get_fd_info_khr* p_get_fd_info,
                                                    int* p_fd) __asm("vkGetFenceFdKHR");
#endif

#define vk_khr_performance_query 1
#define VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION 1
#define VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME "VK_KHR_performance_query"

typedef enum vk_performance_counter_unit_khr {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR          = 0,
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR       = 1,
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR      = 2,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR            = 3,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR           = 5,
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR            = 6,
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR            = 7,
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR             = 8,
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR            = 9,
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR           = 10,
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR         = 0x7fffffff
} vk_performance_counter_unit_khr;

typedef enum vk_performance_counter_scope_khr {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR    = 1,
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR        = 2,
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR               = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
    VK_QUERY_SCOPE_RENDER_PASS_KHR                  = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
    VK_QUERY_SCOPE_COMMAND_KHR                      = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR       = 0x7fffffff
} vk_performance_counter_scope_khr;

typedef enum vk_performance_counter_storage_khr {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR    = 0,
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR    = 1,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR   = 2,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR   = 3,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR  = 4,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR  = 5,
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7fffffff
} vk_performance_counter_storage_khr;

typedef enum vk_performance_counter_description_flag_bits_khr {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 0x00000001,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 0x00000002,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR    = 0x7fffffff
} vk_performance_counter_description_flag_bits_khr;
typedef vk_flags vk_performance_counter_description_flags_khr;

typedef enum vk_acquire_profiling_lock_flag_bits_khr {
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7fffffff
} vk_acquire_profiling_lock_flag_bits_khr;
typedef vk_flags vk_acquire_profiling_lock_flags_khr;
typedef struct vk_physical_device_performance_query_features_khr {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         performance_counter_query_pools;
    vk_bool32         performance_counter_multiple_query_pools;
} vk_physical_device_performance_query_features_khr;

typedef struct vk_physical_device_performance_query_properties_khr {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         allow_command_buffer_query_copies;
} vk_physical_device_performance_query_properties_khr;

typedef struct vk_performance_counter_khr {
    vk_structure_type                  s_type;
    const void*                        p_next;
    vk_performance_counter_unit_khr    unit;
    vk_performance_counter_scope_khr   scope;
    vk_performance_counter_storage_khr storage;
    uint8_t                            uuid[VK_UUID_SIZE];
} vk_performance_counter_khr;

typedef struct vk_performance_counter_description_khr {
    vk_structure_type                            s_type;
    const void*                                  p_next;
    vk_performance_counter_description_flags_khr flags;
    char                                         name[VK_MAX_DESCRIPTION_SIZE];
    char                                         category[VK_MAX_DESCRIPTION_SIZE];
    char                                         description[VK_MAX_DESCRIPTION_SIZE];
} vk_performance_counter_description_khr;

typedef struct vk_query_pool_performance_create_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          queue_family_index;
    uint32_t          counter_index_count;
    const uint32_t*   p_counter_indices;
} vk_query_pool_performance_create_info_khr;

typedef union vk_performance_counter_result_khr {
    int32_t  int32;
    int64_t  int64;
    uint32_t uint32;
    uint64_t uint64;
    float    float32;
    double   float64;
} vk_performance_counter_result_khr;

typedef struct vk_acquire_profiling_lock_info_khr {
    vk_structure_type                   s_type;
    const void*                         p_next;
    vk_acquire_profiling_lock_flags_khr flags;
    uint64_t                            timeout;
} vk_acquire_profiling_lock_info_khr;

typedef struct vk_performance_query_submit_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          counter_pass_index;
} vk_performance_query_submit_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_enumerate_physical_device_queue_family_performance_query_counters_khr)(
    vk_physical_device physical_device, uint32_t queue_family_index, uint32_t* p_counter_count,
    vk_performance_counter_khr* p_counters, vk_performance_counter_description_khr* p_counter_descriptions);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_queue_family_performance_query_passes_khr)(
    vk_physical_device                               physical_device,
    const vk_query_pool_performance_create_info_khr* p_performance_query_create_info, uint32_t* p_num_passes);
typedef vk_result(VKAPI_PTR* pfn_vk_acquire_profiling_lock_khr)(vk_device                                 device,
                                                                const vk_acquire_profiling_lock_info_khr* p_info);
typedef void(VKAPI_PTR* pfn_vk_release_profiling_lock_khr)(vk_device device);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_enumerate_physical_device_queue_family_performance_query_counters_khr(
    vk_physical_device physical_device, uint32_t queue_family_index, uint32_t* p_counter_count,
    vk_performance_counter_khr* p_counters,
    vk_performance_counter_description_khr*
        p_counter_descriptions) __asm("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_queue_family_performance_query_passes_khr(
    vk_physical_device                               physical_device,
    const vk_query_pool_performance_create_info_khr* p_performance_query_create_info,
    uint32_t* p_num_passes) __asm("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_acquire_profiling_lock_khr(
    vk_device device, const vk_acquire_profiling_lock_info_khr* p_info) __asm("vkAcquireProfilingLockKHR");

VKAPI_ATTR void VKAPI_CALL vk_release_profiling_lock_khr(vk_device device) __asm("vkReleaseProfilingLockKHR");
#endif

#define vk_khr_maintenance2 1
#define VK_KHR_MAINTENANCE2_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE2_EXTENSION_NAME "VK_KHR_maintenance2"
typedef vk_point_clipping_behavior vk_point_clipping_behavior_khr;

typedef vk_tessellation_domain_origin vk_tessellation_domain_origin_khr;

typedef vk_physical_device_point_clipping_properties vk_physical_device_point_clipping_properties_khr;

typedef vk_render_pass_input_attachment_aspect_create_info vk_render_pass_input_attachment_aspect_create_info_khr;

typedef vk_input_attachment_aspect_reference vk_input_attachment_aspect_reference_khr;

typedef vk_image_view_usage_create_info vk_image_view_usage_create_info_khr;

typedef vk_pipeline_tessellation_domain_origin_state_create_info
    vk_pipeline_tessellation_domain_origin_state_create_info_khr;

#define vk_khr_get_surface_capabilities2 1
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION 1
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME "VK_KHR_get_surface_capabilities2"
typedef struct vk_physical_device_surface_info2khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_surface_khr    surface;
} vk_physical_device_surface_info2khr;

typedef struct vk_surface_capabilities2khr {
    vk_structure_type           s_type;
    void*                       p_next;
    vk_surface_capabilities_khr surface_capabilities;
} vk_surface_capabilities2khr;

typedef struct vk_surface_format2khr {
    vk_structure_type     s_type;
    void*                 p_next;
    vk_surface_format_khr surface_format;
} vk_surface_format2khr;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_surface_capabilities2khr)(
    vk_physical_device physical_device, const vk_physical_device_surface_info2khr* p_surface_info,
    vk_surface_capabilities2khr* p_surface_capabilities);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_surface_formats2khr)(
    vk_physical_device physical_device, const vk_physical_device_surface_info2khr* p_surface_info,
    uint32_t* p_surface_format_count, vk_surface_format2khr* p_surface_formats);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_surface_capabilities2khr(
    vk_physical_device physical_device, const vk_physical_device_surface_info2khr* p_surface_info,
    vk_surface_capabilities2khr* p_surface_capabilities) __asm("vkGetPhysicalDeviceSurfaceCapabilities2KHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_surface_formats2khr(
    vk_physical_device physical_device, const vk_physical_device_surface_info2khr* p_surface_info,
    uint32_t*              p_surface_format_count,
    vk_surface_format2khr* p_surface_formats) __asm("vkGetPhysicalDeviceSurfaceFormats2KHR");
#endif

#define vk_khr_variable_pointers 1
#define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION 1
#define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME "VK_KHR_variable_pointers"
typedef vk_physical_device_variable_pointers_features vk_physical_device_variable_pointer_features_khr;

typedef vk_physical_device_variable_pointers_features vk_physical_device_variable_pointers_features_khr;

#define vk_khr_get_display_properties2 1
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION 1
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_display_properties2"
typedef struct vk_display_properties2khr {
    vk_structure_type         s_type;
    void*                     p_next;
    vk_display_properties_khr display_properties;
} vk_display_properties2khr;

typedef struct vk_display_plane_properties2khr {
    vk_structure_type               s_type;
    void*                           p_next;
    vk_display_plane_properties_khr display_plane_properties;
} vk_display_plane_properties2khr;

typedef struct vk_display_mode_properties2khr {
    vk_structure_type              s_type;
    void*                          p_next;
    vk_display_mode_properties_khr display_mode_properties;
} vk_display_mode_properties2khr;

typedef struct vk_display_plane_info2khr {
    vk_structure_type   s_type;
    const void*         p_next;
    vk_display_mode_khr mode;
    uint32_t            plane_index;
} vk_display_plane_info2khr;

typedef struct vk_display_plane_capabilities2khr {
    vk_structure_type                 s_type;
    void*                             p_next;
    vk_display_plane_capabilities_khr capabilities;
} vk_display_plane_capabilities2khr;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_display_properties2khr)(
    vk_physical_device physical_device, uint32_t* p_property_count, vk_display_properties2khr* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_display_plane_properties2khr)(
    vk_physical_device physical_device, uint32_t* p_property_count, vk_display_plane_properties2khr* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_display_mode_properties2khr)(vk_physical_device physical_device,
                                                                     vk_display_khr display, uint32_t* p_property_count,
                                                                     vk_display_mode_properties2khr* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_display_plane_capabilities2khr)(
    vk_physical_device physical_device, const vk_display_plane_info2khr* p_display_plane_info,
    vk_display_plane_capabilities2khr* p_capabilities);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_display_properties2khr(
    vk_physical_device physical_device, uint32_t* p_property_count,
    vk_display_properties2khr* p_properties) __asm("vkGetPhysicalDeviceDisplayProperties2KHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_display_plane_properties2khr(
    vk_physical_device physical_device, uint32_t* p_property_count,
    vk_display_plane_properties2khr* p_properties) __asm("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_display_mode_properties2khr(
    vk_physical_device physical_device, vk_display_khr display, uint32_t* p_property_count,
    vk_display_mode_properties2khr* p_properties) __asm("vkGetDisplayModeProperties2KHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_display_plane_capabilities2khr(
    vk_physical_device physical_device, const vk_display_plane_info2khr* p_display_plane_info,
    vk_display_plane_capabilities2khr* p_capabilities) __asm("vkGetDisplayPlaneCapabilities2KHR");
#endif

#define vk_khr_dedicated_allocation 1
#define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION 3
#define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_KHR_dedicated_allocation"
typedef vk_memory_dedicated_requirements vk_memory_dedicated_requirements_khr;

typedef vk_memory_dedicated_allocate_info vk_memory_dedicated_allocate_info_khr;

#define vk_khr_storage_buffer_storage_class 1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION 1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME "VK_KHR_storage_buffer_storage_class"

#define vk_khr_relaxed_block_layout 1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION 1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME "VK_KHR_relaxed_block_layout"

#define vk_khr_get_memory_requirements2 1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION 1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME "VK_KHR_get_memory_requirements2"
typedef vk_buffer_memory_requirements_info2 vk_buffer_memory_requirements_info2khr;

typedef vk_image_memory_requirements_info2 vk_image_memory_requirements_info2khr;

typedef vk_image_sparse_memory_requirements_info2 vk_image_sparse_memory_requirements_info2khr;

typedef vk_memory_requirements2 vk_memory_requirements2khr;

typedef vk_sparse_image_memory_requirements2 vk_sparse_image_memory_requirements2khr;

typedef void(VKAPI_PTR* pfn_vk_get_image_memory_requirements2khr)(vk_device                                 device,
                                                                  const vk_image_memory_requirements_info2* p_info,
                                                                  vk_memory_requirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_buffer_memory_requirements2khr)(vk_device                                  device,
                                                                   const vk_buffer_memory_requirements_info2* p_info,
                                                                   vk_memory_requirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_get_image_sparse_memory_requirements2khr)(
    vk_device device, const vk_image_sparse_memory_requirements_info2* p_info,
    uint32_t* p_sparse_memory_requirement_count, vk_sparse_image_memory_requirements2* p_sparse_memory_requirements);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_image_memory_requirements2khr(
    vk_device device, const vk_image_memory_requirements_info2* p_info,
    vk_memory_requirements2* p_memory_requirements) __asm("vkGetImageMemoryRequirements2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_buffer_memory_requirements2khr(
    vk_device device, const vk_buffer_memory_requirements_info2* p_info,
    vk_memory_requirements2* p_memory_requirements) __asm("vkGetBufferMemoryRequirements2KHR");

VKAPI_ATTR void VKAPI_CALL vk_get_image_sparse_memory_requirements2khr(
    vk_device device, const vk_image_sparse_memory_requirements_info2* p_info,
    uint32_t*                             p_sparse_memory_requirement_count,
    vk_sparse_image_memory_requirements2* p_sparse_memory_requirements) __asm("vkGetImageSparseMemoryRequirements2KHR");
#endif

#define vk_khr_image_format_list 1
#define VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION 1
#define VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME "VK_KHR_image_format_list"
typedef vk_image_format_list_create_info vk_image_format_list_create_info_khr;

#define vk_khr_sampler_ycbcr_conversion 1
typedef vk_sampler_ycbcr_conversion vk_sampler_ycbcr_conversion_khr;

#define VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION 14
#define VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME "VK_KHR_sampler_ycbcr_conversion"
typedef vk_sampler_ycbcr_model_conversion vk_sampler_ycbcr_model_conversion_khr;

typedef vk_sampler_ycbcr_range vk_sampler_ycbcr_range_khr;

typedef vk_chroma_location vk_chroma_location_khr;

typedef vk_sampler_ycbcr_conversion_create_info vk_sampler_ycbcr_conversion_create_info_khr;

typedef vk_sampler_ycbcr_conversion_info vk_sampler_ycbcr_conversion_info_khr;

typedef vk_bind_image_plane_memory_info vk_bind_image_plane_memory_info_khr;

typedef vk_image_plane_memory_requirements_info vk_image_plane_memory_requirements_info_khr;

typedef vk_physical_device_sampler_ycbcr_conversion_features vk_physical_device_sampler_ycbcr_conversion_features_khr;

typedef vk_sampler_ycbcr_conversion_image_format_properties vk_sampler_ycbcr_conversion_image_format_properties_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_create_sampler_ycbcr_conversion_khr)(
    vk_device device, const vk_sampler_ycbcr_conversion_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_sampler_ycbcr_conversion* p_ycbcr_conversion);
typedef void(VKAPI_PTR* pfn_vk_destroy_sampler_ycbcr_conversion_khr)(vk_device                      device,
                                                                     vk_sampler_ycbcr_conversion    ycbcr_conversion,
                                                                     const vk_allocation_callbacks* p_allocator);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_sampler_ycbcr_conversion_khr(
    vk_device device, const vk_sampler_ycbcr_conversion_create_info* p_create_info,
    const vk_allocation_callbacks* p_allocator,
    vk_sampler_ycbcr_conversion*   p_ycbcr_conversion) __asm("vkCreateSamplerYcbcrConversionKHR");

VKAPI_ATTR void VKAPI_CALL vk_destroy_sampler_ycbcr_conversion_khr(
    vk_device device, vk_sampler_ycbcr_conversion ycbcr_conversion,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroySamplerYcbcrConversionKHR");
#endif

#define vk_khr_bind_memory2 1
#define VK_KHR_BIND_MEMORY_2_SPEC_VERSION 1
#define VK_KHR_BIND_MEMORY_2_EXTENSION_NAME "VK_KHR_bind_memory2"
typedef vk_bind_buffer_memory_info vk_bind_buffer_memory_info_khr;

typedef vk_bind_image_memory_info vk_bind_image_memory_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_bind_buffer_memory2khr)(vk_device device, uint32_t bind_info_count,
                                                            const vk_bind_buffer_memory_info* p_bind_infos);
typedef vk_result(VKAPI_PTR* pfn_vk_bind_image_memory2khr)(vk_device device, uint32_t bind_info_count,
                                                           const vk_bind_image_memory_info* p_bind_infos);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL
vk_bind_buffer_memory2khr(vk_device device, uint32_t bind_info_count,
                          const vk_bind_buffer_memory_info* p_bind_infos) __asm("vkBindBufferMemory2KHR");

VKAPI_ATTR vk_result VKAPI_CALL
vk_bind_image_memory2khr(vk_device device, uint32_t bind_info_count,
                         const vk_bind_image_memory_info* p_bind_infos) __asm("vkBindImageMemory2KHR");
#endif

#define vk_khr_maintenance3 1
#define VK_KHR_MAINTENANCE3_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE3_EXTENSION_NAME "VK_KHR_maintenance3"
typedef vk_physical_device_maintenance3properties vk_physical_device_maintenance3properties_khr;

typedef vk_descriptor_set_layout_support vk_descriptor_set_layout_support_khr;

typedef void(VKAPI_PTR* pfn_vk_get_descriptor_set_layout_support_khr)(
    vk_device device, const vk_descriptor_set_layout_create_info* p_create_info,
    vk_descriptor_set_layout_support* p_support);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_descriptor_set_layout_support_khr(
    vk_device device, const vk_descriptor_set_layout_create_info* p_create_info,
    vk_descriptor_set_layout_support* p_support) __asm("vkGetDescriptorSetLayoutSupportKHR");
#endif

#define vk_khr_draw_indirect_count 1
#define VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION 1
#define VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME "VK_KHR_draw_indirect_count"
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_count_khr)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                            vk_device_size offset, vk_buffer count_buffer,
                                                            vk_device_size count_buffer_offset, uint32_t max_draw_count,
                                                            uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect_count_khr)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                                    vk_device_size offset, vk_buffer count_buffer,
                                                                    vk_device_size count_buffer_offset,
                                                                    uint32_t max_draw_count, uint32_t stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_count_khr(vk_command_buffer command_buffer, vk_buffer buffer,
                                                          vk_device_size offset, vk_buffer count_buffer,
                                                          vk_device_size count_buffer_offset, uint32_t max_draw_count,
                                                          uint32_t stride) __asm("vkCmdDrawIndirectCountKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed_indirect_count_khr(
    vk_command_buffer command_buffer, vk_buffer buffer, vk_device_size offset, vk_buffer count_buffer,
    vk_device_size count_buffer_offset, uint32_t max_draw_count,
    uint32_t stride) __asm("vkCmdDrawIndexedIndirectCountKHR");
#endif

#define vk_khr_shader_subgroup_extended_types 1
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION 1
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME "VK_KHR_shader_subgroup_extended_types"
typedef vk_physical_device_shader_subgroup_extended_types_features
    vk_physical_device_shader_subgroup_extended_types_features_khr;

#define vk_khr_8bit_storage 1
#define VK_KHR_8BIT_STORAGE_SPEC_VERSION 1
#define VK_KHR_8BIT_STORAGE_EXTENSION_NAME "VK_KHR_8bit_storage"
typedef vk_physical_device8bit_storage_features vk_physical_device8bit_storage_features_khr;

#define vk_khr_shader_atomic_int64 1
#define VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION 1
#define VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME "VK_KHR_shader_atomic_int64"
typedef vk_physical_device_shader_atomic_int64features vk_physical_device_shader_atomic_int64features_khr;

#define vk_khr_shader_clock 1
#define VK_KHR_SHADER_CLOCK_SPEC_VERSION 1
#define VK_KHR_SHADER_CLOCK_EXTENSION_NAME "VK_KHR_shader_clock"
typedef struct vk_physical_device_shader_clock_features_khr {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_subgroup_clock;
    vk_bool32         shader_device_clock;
} vk_physical_device_shader_clock_features_khr;

#define vk_khr_driver_properties 1
#define VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION 1
#define VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME "VK_KHR_driver_properties"
#define VK_MAX_DRIVER_NAME_SIZE_KHR VK_MAX_DRIVER_NAME_SIZE
#define VK_MAX_DRIVER_INFO_SIZE_KHR VK_MAX_DRIVER_INFO_SIZE
typedef vk_driver_id vk_driver_id_khr;

typedef vk_conformance_version vk_conformance_version_khr;

typedef vk_physical_device_driver_properties vk_physical_device_driver_properties_khr;

#define vk_khr_shader_float_controls 1
#define VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION 4
#define VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME "VK_KHR_shader_float_controls"
typedef vk_shader_float_controls_independence vk_shader_float_controls_independence_khr;

typedef vk_physical_device_float_controls_properties vk_physical_device_float_controls_properties_khr;

#define vk_khr_depth_stencil_resolve 1
#define VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION 1
#define VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME "VK_KHR_depth_stencil_resolve"
typedef vk_resolve_mode_flag_bits vk_resolve_mode_flag_bits_khr;

typedef vk_resolve_mode_flags vk_resolve_mode_flags_khr;

typedef vk_subpass_description_depth_stencil_resolve vk_subpass_description_depth_stencil_resolve_khr;

typedef vk_physical_device_depth_stencil_resolve_properties vk_physical_device_depth_stencil_resolve_properties_khr;

#define vk_khr_swapchain_mutable_format 1
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION 1
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME "VK_KHR_swapchain_mutable_format"

#define vk_khr_timeline_semaphore 1
#define VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION 2
#define VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME "VK_KHR_timeline_semaphore"
typedef vk_semaphore_type vk_semaphore_type_khr;

typedef vk_semaphore_wait_flag_bits vk_semaphore_wait_flag_bits_khr;

typedef vk_semaphore_wait_flags vk_semaphore_wait_flags_khr;

typedef vk_physical_device_timeline_semaphore_features vk_physical_device_timeline_semaphore_features_khr;

typedef vk_physical_device_timeline_semaphore_properties vk_physical_device_timeline_semaphore_properties_khr;

typedef vk_semaphore_type_create_info vk_semaphore_type_create_info_khr;

typedef vk_timeline_semaphore_submit_info vk_timeline_semaphore_submit_info_khr;

typedef vk_semaphore_wait_info vk_semaphore_wait_info_khr;

typedef vk_semaphore_signal_info vk_semaphore_signal_info_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_get_semaphore_counter_value_khr)(vk_device device, vk_semaphore semaphore,
                                                                     uint64_t* p_value);
typedef vk_result(VKAPI_PTR* pfn_vk_wait_semaphores_khr)(vk_device device, const vk_semaphore_wait_info* p_wait_info,
                                                         uint64_t timeout);
typedef vk_result(VKAPI_PTR* pfn_vk_signal_semaphore_khr)(vk_device                       device,
                                                          const vk_semaphore_signal_info* p_signal_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_semaphore_counter_value_khr(
    vk_device device, vk_semaphore semaphore, uint64_t* p_value) __asm("vkGetSemaphoreCounterValueKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_wait_semaphores_khr(vk_device device, const vk_semaphore_wait_info* p_wait_info,
                                                       uint64_t timeout) __asm("vkWaitSemaphoresKHR");

VKAPI_ATTR vk_result VKAPI_CALL
vk_signal_semaphore_khr(vk_device device, const vk_semaphore_signal_info* p_signal_info) __asm("vkSignalSemaphoreKHR");
#endif

#define vk_khr_vulkan_memory_model 1
#define VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION 3
#define VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME "VK_KHR_vulkan_memory_model"
typedef vk_physical_device_vulkan_memory_model_features vk_physical_device_vulkan_memory_model_features_khr;

#define vk_khr_spirv_1_4 1
#define VK_KHR_SPIRV_1_4_SPEC_VERSION 1
#define VK_KHR_SPIRV_1_4_EXTENSION_NAME "VK_KHR_spirv_1_4"

#define vk_khr_surface_protected_capabilities 1
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME "VK_KHR_surface_protected_capabilities"
typedef struct vk_surface_protected_capabilities_khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_bool32         supports_protected;
} vk_surface_protected_capabilities_khr;

#define vk_khr_separate_depth_stencil_layouts 1
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION 1
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME "VK_KHR_separate_depth_stencil_layouts"
typedef vk_physical_device_separate_depth_stencil_layouts_features
    vk_physical_device_separate_depth_stencil_layouts_features_khr;

typedef vk_attachment_reference_stencil_layout vk_attachment_reference_stencil_layout_khr;

typedef vk_attachment_description_stencil_layout vk_attachment_description_stencil_layout_khr;

#define vk_khr_uniform_buffer_standard_layout 1
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION 1
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME "VK_KHR_uniform_buffer_standard_layout"
typedef vk_physical_device_uniform_buffer_standard_layout_features
    vk_physical_device_uniform_buffer_standard_layout_features_khr;

#define vk_khr_buffer_device_address 1
#define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 1
#define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME "VK_KHR_buffer_device_address"
typedef vk_physical_device_buffer_device_address_features vk_physical_device_buffer_device_address_features_khr;

typedef vk_buffer_device_address_info vk_buffer_device_address_info_khr;

typedef vk_buffer_opaque_capture_address_create_info vk_buffer_opaque_capture_address_create_info_khr;

typedef vk_memory_opaque_capture_address_allocate_info vk_memory_opaque_capture_address_allocate_info_khr;

typedef vk_device_memory_opaque_capture_address_info vk_device_memory_opaque_capture_address_info_khr;

typedef vk_device_address(VKAPI_PTR* pfn_vk_get_buffer_device_address_khr)(vk_device                            device,
                                                                           const vk_buffer_device_address_info* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_buffer_opaque_capture_address_khr)(vk_device                            device,
                                                                          const vk_buffer_device_address_info* p_info);
typedef uint64_t(VKAPI_PTR* pfn_vk_get_device_memory_opaque_capture_address_khr)(
    vk_device device, const vk_device_memory_opaque_capture_address_info* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_device_address VKAPI_CALL vk_get_buffer_device_address_khr(
    vk_device device, const vk_buffer_device_address_info* p_info) __asm("vkGetBufferDeviceAddressKHR");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_buffer_opaque_capture_address_khr(
    vk_device device, const vk_buffer_device_address_info* p_info) __asm("vkGetBufferOpaqueCaptureAddressKHR");

VKAPI_ATTR uint64_t VKAPI_CALL vk_get_device_memory_opaque_capture_address_khr(
    vk_device                                           device,
    const vk_device_memory_opaque_capture_address_info* p_info) __asm("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
#endif

#define vk_khr_pipeline_executable_properties 1
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION 1
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME "VK_KHR_pipeline_executable_properties"

typedef enum vk_pipeline_executable_statistic_format_khr {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR   = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR    = 1,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR   = 2,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR  = 3,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7fffffff
} vk_pipeline_executable_statistic_format_khr;
typedef struct vk_physical_device_pipeline_executable_properties_features_khr {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         pipeline_executable_info;
} vk_physical_device_pipeline_executable_properties_features_khr;

typedef struct vk_pipeline_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_pipeline       pipeline;
} vk_pipeline_info_khr;

typedef struct vk_pipeline_executable_properties_khr {
    vk_structure_type     s_type;
    void*                 p_next;
    vk_shader_stage_flags stages;
    char                  name[VK_MAX_DESCRIPTION_SIZE];
    char                  description[VK_MAX_DESCRIPTION_SIZE];
    uint32_t              subgroup_size;
} vk_pipeline_executable_properties_khr;

typedef struct vk_pipeline_executable_info_khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_pipeline       pipeline;
    uint32_t          executable_index;
} vk_pipeline_executable_info_khr;

typedef union vk_pipeline_executable_statistic_value_khr {
    vk_bool32 b32;
    int64_t   i64;
    uint64_t  u64;
    double    f64;
} vk_pipeline_executable_statistic_value_khr;

typedef struct vk_pipeline_executable_statistic_khr {
    vk_structure_type                           s_type;
    void*                                       p_next;
    char                                        name[VK_MAX_DESCRIPTION_SIZE];
    char                                        description[VK_MAX_DESCRIPTION_SIZE];
    vk_pipeline_executable_statistic_format_khr format;
    vk_pipeline_executable_statistic_value_khr  value;
} vk_pipeline_executable_statistic_khr;

typedef struct vk_pipeline_executable_internal_representation_khr {
    vk_structure_type s_type;
    void*             p_next;
    char              name[VK_MAX_DESCRIPTION_SIZE];
    char              description[VK_MAX_DESCRIPTION_SIZE];
    vk_bool32         is_text;
    size_t            data_size;
    void*             p_data;
} vk_pipeline_executable_internal_representation_khr;

typedef vk_result(VKAPI_PTR* pfn_vk_get_pipeline_executable_properties_khr)(
    vk_device device, const vk_pipeline_info_khr* p_pipeline_info, uint32_t* p_executable_count,
    vk_pipeline_executable_properties_khr* p_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_pipeline_executable_statistics_khr)(
    vk_device device, const vk_pipeline_executable_info_khr* p_executable_info, uint32_t* p_statistic_count,
    vk_pipeline_executable_statistic_khr* p_statistics);
typedef vk_result(VKAPI_PTR* pfn_vk_get_pipeline_executable_internal_representations_khr)(
    vk_device device, const vk_pipeline_executable_info_khr* p_executable_info,
    uint32_t*                                           p_internal_representation_count,
    vk_pipeline_executable_internal_representation_khr* p_internal_representations);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_pipeline_executable_properties_khr(
    vk_device device, const vk_pipeline_info_khr* p_pipeline_info, uint32_t* p_executable_count,
    vk_pipeline_executable_properties_khr* p_properties) __asm("vkGetPipelineExecutablePropertiesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_pipeline_executable_statistics_khr(
    vk_device device, const vk_pipeline_executable_info_khr* p_executable_info, uint32_t* p_statistic_count,
    vk_pipeline_executable_statistic_khr* p_statistics) __asm("vkGetPipelineExecutableStatisticsKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_pipeline_executable_internal_representations_khr(
    vk_device device, const vk_pipeline_executable_info_khr* p_executable_info,
    uint32_t* p_internal_representation_count,
    vk_pipeline_executable_internal_representation_khr*
        p_internal_representations) __asm("vkGetPipelineExecutableInternalRepresentationsKHR");
#endif

#define vk_khr_shader_non_semantic_info 1
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION 1
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME "VK_KHR_shader_non_semantic_info"

#define vk_khr_copy_commands2 1
#define VK_KHR_COPY_COMMANDS_2_SPEC_VERSION 1
#define VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME "VK_KHR_copy_commands2"
typedef struct vk_buffer_copy2khr {
    vk_structure_type s_type;
    const void*       p_next;
    vk_device_size    src_offset;
    vk_device_size    dst_offset;
    vk_device_size    size;
} vk_buffer_copy2khr;

typedef struct vk_copy_buffer_info2khr {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_buffer                 src_buffer;
    vk_buffer                 dst_buffer;
    uint32_t                  region_count;
    const vk_buffer_copy2khr* p_regions;
} vk_copy_buffer_info2khr;

typedef struct vk_image_copy2khr {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_image_subresource_layers src_subresource;
    vk_offset3d                 src_offset;
    vk_image_subresource_layers dst_subresource;
    vk_offset3d                 dst_offset;
    vk_extent3d                 extent;
} vk_image_copy2khr;

typedef struct vk_copy_image_info2khr {
    vk_structure_type        s_type;
    const void*              p_next;
    vk_image                 src_image;
    vk_image_layout          src_image_layout;
    vk_image                 dst_image;
    vk_image_layout          dst_image_layout;
    uint32_t                 region_count;
    const vk_image_copy2khr* p_regions;
} vk_copy_image_info2khr;

typedef struct vk_buffer_image_copy2khr {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_device_size              buffer_offset;
    uint32_t                    buffer_row_length;
    uint32_t                    buffer_image_height;
    vk_image_subresource_layers image_subresource;
    vk_offset3d                 image_offset;
    vk_extent3d                 image_extent;
} vk_buffer_image_copy2khr;

typedef struct vk_copy_buffer_to_image_info2khr {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_buffer                       src_buffer;
    vk_image                        dst_image;
    vk_image_layout                 dst_image_layout;
    uint32_t                        region_count;
    const vk_buffer_image_copy2khr* p_regions;
} vk_copy_buffer_to_image_info2khr;

typedef struct vk_copy_image_to_buffer_info2khr {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_image                        src_image;
    vk_image_layout                 src_image_layout;
    vk_buffer                       dst_buffer;
    uint32_t                        region_count;
    const vk_buffer_image_copy2khr* p_regions;
} vk_copy_image_to_buffer_info2khr;

typedef struct vk_image_blit2khr {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_image_subresource_layers src_subresource;
    vk_offset3d                 src_offsets[2];
    vk_image_subresource_layers dst_subresource;
    vk_offset3d                 dst_offsets[2];
} vk_image_blit2khr;

typedef struct vk_blit_image_info2khr {
    vk_structure_type        s_type;
    const void*              p_next;
    vk_image                 src_image;
    vk_image_layout          src_image_layout;
    vk_image                 dst_image;
    vk_image_layout          dst_image_layout;
    uint32_t                 region_count;
    const vk_image_blit2khr* p_regions;
    vk_filter                filter;
} vk_blit_image_info2khr;

typedef struct vk_image_resolve2khr {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_image_subresource_layers src_subresource;
    vk_offset3d                 src_offset;
    vk_image_subresource_layers dst_subresource;
    vk_offset3d                 dst_offset;
    vk_extent3d                 extent;
} vk_image_resolve2khr;

typedef struct vk_resolve_image_info2khr {
    vk_structure_type           s_type;
    const void*                 p_next;
    vk_image                    src_image;
    vk_image_layout             src_image_layout;
    vk_image                    dst_image;
    vk_image_layout             dst_image_layout;
    uint32_t                    region_count;
    const vk_image_resolve2khr* p_regions;
} vk_resolve_image_info2khr;

typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer2khr)(vk_command_buffer              command_buffer,
                                                    const vk_copy_buffer_info2khr* p_copy_buffer_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image2khr)(vk_command_buffer             command_buffer,
                                                   const vk_copy_image_info2khr* p_copy_image_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_buffer_to_image2khr)(
    vk_command_buffer command_buffer, const vk_copy_buffer_to_image_info2khr* p_copy_buffer_to_image_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_image_to_buffer2khr)(
    vk_command_buffer command_buffer, const vk_copy_image_to_buffer_info2khr* p_copy_image_to_buffer_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_blit_image2khr)(vk_command_buffer             command_buffer,
                                                   const vk_blit_image_info2khr* p_blit_image_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_resolve_image2khr)(vk_command_buffer                command_buffer,
                                                      const vk_resolve_image_info2khr* p_resolve_image_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer2khr(
    vk_command_buffer command_buffer, const vk_copy_buffer_info2khr* p_copy_buffer_info) __asm("vkCmdCopyBuffer2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image2khr(
    vk_command_buffer command_buffer, const vk_copy_image_info2khr* p_copy_image_info) __asm("vkCmdCopyImage2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_buffer_to_image2khr(
    vk_command_buffer                       command_buffer,
    const vk_copy_buffer_to_image_info2khr* p_copy_buffer_to_image_info) __asm("vkCmdCopyBufferToImage2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_image_to_buffer2khr(
    vk_command_buffer                       command_buffer,
    const vk_copy_image_to_buffer_info2khr* p_copy_image_to_buffer_info) __asm("vkCmdCopyImageToBuffer2KHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_blit_image2khr(
    vk_command_buffer command_buffer, const vk_blit_image_info2khr* p_blit_image_info) __asm("vkCmdBlitImage2KHR");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_resolve_image2khr(vk_command_buffer                command_buffer,
                         const vk_resolve_image_info2khr* p_resolve_image_info) __asm("vkCmdResolveImage2KHR");
#endif

#define vk_ext_debug_report 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_debug_report_callback_ext)
#define VK_EXT_DEBUG_REPORT_SPEC_VERSION 9
#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME "VK_EXT_debug_report"

typedef enum vk_debug_report_object_type_ext {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT                    = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT                   = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT            = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT                     = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT                      = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT                  = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT             = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT                      = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT              = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT                     = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT                      = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT                      = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT                 = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT                = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT                 = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT              = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT             = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT            = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT                = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT                   = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT      = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT                    = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT            = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT             = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT                = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT               = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT                = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT              = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT  = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT                = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT           = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT       = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT   = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT     = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT =
        VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT =
        VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT =
        VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7fffffff
} vk_debug_report_object_type_ext;

typedef enum vk_debug_report_flag_bits_ext {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT         = 0x00000001,
    VK_DEBUG_REPORT_WARNING_BIT_EXT             = 0x00000002,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
    VK_DEBUG_REPORT_ERROR_BIT_EXT               = 0x00000008,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT               = 0x00000010,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT      = 0x7fffffff
} vk_debug_report_flag_bits_ext;
typedef vk_flags vk_debug_report_flags_ext;
typedef vk_bool32(VKAPI_PTR* pfn_vk_debug_report_callback_ext)(vk_debug_report_flags_ext       flags,
                                                               vk_debug_report_object_type_ext object_type,
                                                               uint64_t object, size_t location, int32_t message_code,
                                                               const char* p_layer_prefix, const char* p_message,
                                                               void* p_user_data);

typedef struct vk_debug_report_callback_create_info_ext {
    vk_structure_type                s_type;
    const void*                      p_next;
    vk_debug_report_flags_ext        flags;
    pfn_vk_debug_report_callback_ext pfn_callback;
    void*                            p_user_data;
} vk_debug_report_callback_create_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_create_debug_report_callback_ext)(
    vk_instance instance, const vk_debug_report_callback_create_info_ext* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_debug_report_callback_ext* p_callback);
typedef void(VKAPI_PTR* pfn_vk_destroy_debug_report_callback_ext)(vk_instance                    instance,
                                                                  vk_debug_report_callback_ext   callback,
                                                                  const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_debug_report_message_ext)(vk_instance instance, vk_debug_report_flags_ext flags,
                                                         vk_debug_report_object_type_ext object_type, uint64_t object,
                                                         size_t location, int32_t message_code,
                                                         const char* p_layer_prefix, const char* p_message);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL
vk_create_debug_report_callback_ext(vk_instance instance, const vk_debug_report_callback_create_info_ext* p_create_info,
                                    const vk_allocation_callbacks* p_allocator,
                                    vk_debug_report_callback_ext*  p_callback) __asm("vkCreateDebugReportCallbackEXT");

VKAPI_ATTR void VKAPI_CALL vk_destroy_debug_report_callback_ext(
    vk_instance instance, vk_debug_report_callback_ext callback,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroyDebugReportCallbackEXT");

VKAPI_ATTR void VKAPI_CALL vk_debug_report_message_ext(vk_instance instance, vk_debug_report_flags_ext flags,
                                                       vk_debug_report_object_type_ext object_type, uint64_t object,
                                                       size_t location, int32_t message_code,
                                                       const char* p_layer_prefix,
                                                       const char* p_message) __asm("vkDebugReportMessageEXT");
#endif

#define vk_nv_glsl_shader 1
#define VK_NV_GLSL_SHADER_SPEC_VERSION 1
#define VK_NV_GLSL_SHADER_EXTENSION_NAME "VK_NV_glsl_shader"

#define vk_ext_depth_range_unrestricted 1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION 1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME "VK_EXT_depth_range_unrestricted"

#define vk_img_filter_cubic 1
#define VK_IMG_FILTER_CUBIC_SPEC_VERSION 1
#define VK_IMG_FILTER_CUBIC_EXTENSION_NAME "VK_IMG_filter_cubic"

#define vk_amd_rasterization_order 1
#define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION 1
#define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME "VK_AMD_rasterization_order"

typedef enum vk_rasterization_order_amd {
    VK_RASTERIZATION_ORDER_STRICT_AMD   = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD  = 1,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7fffffff
} vk_rasterization_order_amd;
typedef struct vk_pipeline_rasterization_state_rasterization_order_amd {
    vk_structure_type          s_type;
    const void*                p_next;
    vk_rasterization_order_amd rasterization_order;
} vk_pipeline_rasterization_state_rasterization_order_amd;

#define vk_amd_shader_trinary_minmax 1
#define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION 1
#define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME "VK_AMD_shader_trinary_minmax"

#define vk_amd_shader_explicit_vertex_parameter 1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION 1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME "VK_AMD_shader_explicit_vertex_parameter"

#define vk_ext_debug_marker 1
#define VK_EXT_DEBUG_MARKER_SPEC_VERSION 4
#define VK_EXT_DEBUG_MARKER_EXTENSION_NAME "VK_EXT_debug_marker"
typedef struct vk_debug_marker_object_name_info_ext {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_debug_report_object_type_ext object_type;
    uint64_t                        object;
    const char*                     p_object_name;
} vk_debug_marker_object_name_info_ext;

typedef struct vk_debug_marker_object_tag_info_ext {
    vk_structure_type               s_type;
    const void*                     p_next;
    vk_debug_report_object_type_ext object_type;
    uint64_t                        object;
    uint64_t                        tag_name;
    size_t                          tag_size;
    const void*                     p_tag;
} vk_debug_marker_object_tag_info_ext;

typedef struct vk_debug_marker_marker_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    const char*       p_marker_name;
    float             color[4];
} vk_debug_marker_marker_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_debug_marker_set_object_tag_ext)(
    vk_device device, const vk_debug_marker_object_tag_info_ext* p_tag_info);
typedef vk_result(VKAPI_PTR* pfn_vk_debug_marker_set_object_name_ext)(
    vk_device device, const vk_debug_marker_object_name_info_ext* p_name_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_debug_marker_begin_ext)(vk_command_buffer                      command_buffer,
                                                           const vk_debug_marker_marker_info_ext* p_marker_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_debug_marker_end_ext)(vk_command_buffer command_buffer);
typedef void(VKAPI_PTR* pfn_vk_cmd_debug_marker_insert_ext)(vk_command_buffer                      command_buffer,
                                                            const vk_debug_marker_marker_info_ext* p_marker_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_debug_marker_set_object_tag_ext(
    vk_device device, const vk_debug_marker_object_tag_info_ext* p_tag_info) __asm("vkDebugMarkerSetObjectTagEXT");

VKAPI_ATTR vk_result VKAPI_CALL vk_debug_marker_set_object_name_ext(
    vk_device device, const vk_debug_marker_object_name_info_ext* p_name_info) __asm("vkDebugMarkerSetObjectNameEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_debug_marker_begin_ext(vk_command_buffer                      command_buffer,
                              const vk_debug_marker_marker_info_ext* p_marker_info) __asm("vkCmdDebugMarkerBeginEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_debug_marker_end_ext(vk_command_buffer command_buffer) __asm("vkCmdDebugMarkerEndEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_debug_marker_insert_ext(vk_command_buffer                      command_buffer,
                               const vk_debug_marker_marker_info_ext* p_marker_info) __asm("vkCmdDebugMarkerInsertEXT");
#endif

#define vk_amd_gcn_shader 1
#define VK_AMD_GCN_SHADER_SPEC_VERSION 1
#define VK_AMD_GCN_SHADER_EXTENSION_NAME "VK_AMD_gcn_shader"

#define vk_nv_dedicated_allocation 1
#define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION 1
#define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_NV_dedicated_allocation"
typedef struct vk_dedicated_allocation_image_create_info_nv {
    vk_structure_type s_type;
    const void*       p_next;
    vk_bool32         dedicated_allocation;
} vk_dedicated_allocation_image_create_info_nv;

typedef struct vk_dedicated_allocation_buffer_create_info_nv {
    vk_structure_type s_type;
    const void*       p_next;
    vk_bool32         dedicated_allocation;
} vk_dedicated_allocation_buffer_create_info_nv;

typedef struct vk_dedicated_allocation_memory_allocate_info_nv {
    vk_structure_type s_type;
    const void*       p_next;
    vk_image          image;
    vk_buffer         buffer;
} vk_dedicated_allocation_memory_allocate_info_nv;

#define vk_ext_transform_feedback 1
#define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION 1
#define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME "VK_EXT_transform_feedback"
typedef vk_flags vk_pipeline_rasterization_state_stream_create_flags_ext;
typedef struct vk_physical_device_transform_feedback_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         transform_feedback;
    vk_bool32         geometry_streams;
} vk_physical_device_transform_feedback_features_ext;

typedef struct vk_physical_device_transform_feedback_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_transform_feedback_streams;
    uint32_t          max_transform_feedback_buffers;
    vk_device_size    max_transform_feedback_buffer_size;
    uint32_t          max_transform_feedback_stream_data_size;
    uint32_t          max_transform_feedback_buffer_data_size;
    uint32_t          max_transform_feedback_buffer_data_stride;
    vk_bool32         transform_feedback_queries;
    vk_bool32         transform_feedback_streams_lines_triangles;
    vk_bool32         transform_feedback_rasterization_stream_select;
    vk_bool32         transform_feedback_draw;
} vk_physical_device_transform_feedback_properties_ext;

typedef struct vk_pipeline_rasterization_state_stream_create_info_ext {
    vk_structure_type                                       s_type;
    const void*                                             p_next;
    vk_pipeline_rasterization_state_stream_create_flags_ext flags;
    uint32_t                                                rasterization_stream;
} vk_pipeline_rasterization_state_stream_create_info_ext;

typedef void(VKAPI_PTR* pfn_vk_cmd_bind_transform_feedback_buffers_ext)(vk_command_buffer command_buffer,
                                                                        uint32_t first_binding, uint32_t binding_count,
                                                                        const vk_buffer*      p_buffers,
                                                                        const vk_device_size* p_offsets,
                                                                        const vk_device_size* p_sizes);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_transform_feedback_ext)(vk_command_buffer     command_buffer,
                                                                 uint32_t              first_counter_buffer,
                                                                 uint32_t              counter_buffer_count,
                                                                 const vk_buffer*      p_counter_buffers,
                                                                 const vk_device_size* p_counter_buffer_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_transform_feedback_ext)(vk_command_buffer     command_buffer,
                                                               uint32_t              first_counter_buffer,
                                                               uint32_t              counter_buffer_count,
                                                               const vk_buffer*      p_counter_buffers,
                                                               const vk_device_size* p_counter_buffer_offsets);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_query_indexed_ext)(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                            uint32_t query, vk_query_control_flags flags,
                                                            uint32_t index);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_query_indexed_ext)(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                          uint32_t query, uint32_t index);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_byte_count_ext)(vk_command_buffer command_buffer,
                                                                 uint32_t instance_count, uint32_t first_instance,
                                                                 vk_buffer      counter_buffer,
                                                                 vk_device_size counter_buffer_offset,
                                                                 uint32_t counter_offset, uint32_t vertex_stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_transform_feedback_buffers_ext(
    vk_command_buffer command_buffer, uint32_t first_binding, uint32_t binding_count, const vk_buffer* p_buffers,
    const vk_device_size* p_offsets, const vk_device_size* p_sizes) __asm("vkCmdBindTransformFeedbackBuffersEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_transform_feedback_ext(
    vk_command_buffer command_buffer, uint32_t first_counter_buffer, uint32_t counter_buffer_count,
    const vk_buffer*      p_counter_buffers,
    const vk_device_size* p_counter_buffer_offsets) __asm("vkCmdBeginTransformFeedbackEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_end_transform_feedback_ext(vk_command_buffer command_buffer, uint32_t first_counter_buffer,
                                  uint32_t counter_buffer_count, const vk_buffer* p_counter_buffers,
                                  const vk_device_size* p_counter_buffer_offsets) __asm("vkCmdEndTransformFeedbackEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_query_indexed_ext(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                          uint32_t query, vk_query_control_flags flags,
                                                          uint32_t index) __asm("vkCmdBeginQueryIndexedEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_end_query_indexed_ext(vk_command_buffer command_buffer, vk_query_pool query_pool,
                                                        uint32_t query,
                                                        uint32_t index) __asm("vkCmdEndQueryIndexedEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_byte_count_ext(
    vk_command_buffer command_buffer, uint32_t instance_count, uint32_t first_instance, vk_buffer counter_buffer,
    vk_device_size counter_buffer_offset, uint32_t counter_offset,
    uint32_t vertex_stride) __asm("vkCmdDrawIndirectByteCountEXT");
#endif

#define vk_nvx_image_view_handle 1
#define VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION 2
#define VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME "VK_NVX_image_view_handle"
typedef struct vk_image_view_handle_info_nvx {
    vk_structure_type  s_type;
    const void*        p_next;
    vk_image_view      image_view;
    vk_descriptor_type descriptor_type;
    vk_sampler         sampler;
} vk_image_view_handle_info_nvx;

typedef struct vk_image_view_address_properties_nvx {
    vk_structure_type s_type;
    void*             p_next;
    vk_device_address device_address;
    vk_device_size    size;
} vk_image_view_address_properties_nvx;

typedef uint32_t(VKAPI_PTR* pfn_vk_get_image_view_handle_nvx)(vk_device                            device,
                                                              const vk_image_view_handle_info_nvx* p_info);
typedef vk_result(VKAPI_PTR* pfn_vk_get_image_view_address_nvx)(vk_device device, vk_image_view image_view,
                                                                vk_image_view_address_properties_nvx* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR uint32_t VKAPI_CALL vk_get_image_view_handle_nvx(
    vk_device device, const vk_image_view_handle_info_nvx* p_info) __asm("vkGetImageViewHandleNVX");

VKAPI_ATTR vk_result VKAPI_CALL
vk_get_image_view_address_nvx(vk_device device, vk_image_view image_view,
                              vk_image_view_address_properties_nvx* p_properties) __asm("vkGetImageViewAddressNVX");
#endif

#define vk_amd_draw_indirect_count 1
#define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION 2
#define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME "VK_AMD_draw_indirect_count"
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indirect_count_amd)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                            vk_device_size offset, vk_buffer count_buffer,
                                                            vk_device_size count_buffer_offset, uint32_t max_draw_count,
                                                            uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_indexed_indirect_count_amd)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                                    vk_device_size offset, vk_buffer count_buffer,
                                                                    vk_device_size count_buffer_offset,
                                                                    uint32_t max_draw_count, uint32_t stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indirect_count_amd(vk_command_buffer command_buffer, vk_buffer buffer,
                                                          vk_device_size offset, vk_buffer count_buffer,
                                                          vk_device_size count_buffer_offset, uint32_t max_draw_count,
                                                          uint32_t stride) __asm("vkCmdDrawIndirectCountAMD");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_indexed_indirect_count_amd(
    vk_command_buffer command_buffer, vk_buffer buffer, vk_device_size offset, vk_buffer count_buffer,
    vk_device_size count_buffer_offset, uint32_t max_draw_count,
    uint32_t stride) __asm("vkCmdDrawIndexedIndirectCountAMD");
#endif

#define vk_amd_negative_viewport_height 1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION 1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME "VK_AMD_negative_viewport_height"

#define vk_amd_gpu_shader_half_float 1
#define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION 2
#define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME "VK_AMD_gpu_shader_half_float"

#define vk_amd_shader_ballot 1
#define VK_AMD_SHADER_BALLOT_SPEC_VERSION 1
#define VK_AMD_SHADER_BALLOT_EXTENSION_NAME "VK_AMD_shader_ballot"

#define vk_amd_texture_gather_bias_lod 1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION 1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME "VK_AMD_texture_gather_bias_lod"
typedef struct vk_texture_lodgather_format_properties_amd {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         supports_texture_gather_lodbias_amd;
} vk_texture_lodgather_format_properties_amd;

#define vk_amd_shader_info 1
#define VK_AMD_SHADER_INFO_SPEC_VERSION 1
#define VK_AMD_SHADER_INFO_EXTENSION_NAME "VK_AMD_shader_info"

typedef enum vk_shader_info_type_amd {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD  = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD      = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD    = 0x7fffffff
} vk_shader_info_type_amd;
typedef struct vk_shader_resource_usage_amd {
    uint32_t num_used_vgprs;
    uint32_t num_used_sgprs;
    uint32_t lds_size_per_local_work_group;
    size_t   lds_usage_size_in_bytes;
    size_t   scratch_mem_usage_in_bytes;
} vk_shader_resource_usage_amd;

typedef struct vk_shader_statistics_info_amd {
    vk_shader_stage_flags        shader_stage_mask;
    vk_shader_resource_usage_amd resource_usage;
    uint32_t                     num_physical_vgprs;
    uint32_t                     num_physical_sgprs;
    uint32_t                     num_available_vgprs;
    uint32_t                     num_available_sgprs;
    uint32_t                     compute_work_group_size[3];
} vk_shader_statistics_info_amd;

typedef vk_result(VKAPI_PTR* pfn_vk_get_shader_info_amd)(vk_device device, vk_pipeline pipeline,
                                                         vk_shader_stage_flag_bits shader_stage,
                                                         vk_shader_info_type_amd info_type, size_t* p_info_size,
                                                         void* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_shader_info_amd(vk_device device, vk_pipeline pipeline,
                                                       vk_shader_stage_flag_bits shader_stage,
                                                       vk_shader_info_type_amd info_type, size_t* p_info_size,
                                                       void* p_info) __asm("vkGetShaderInfoAMD");
#endif

#define vk_amd_shader_image_load_store_lod 1
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION 1
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME "VK_AMD_shader_image_load_store_lod"

#define vk_nv_corner_sampled_image 1
#define VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION 2
#define VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME "VK_NV_corner_sampled_image"
typedef struct vk_physical_device_corner_sampled_image_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         corner_sampled_image;
} vk_physical_device_corner_sampled_image_features_nv;

#define vk_img_format_pvrtc 1
#define VK_IMG_FORMAT_PVRTC_SPEC_VERSION 1
#define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME "VK_IMG_format_pvrtc"

#define vk_nv_external_memory_capabilities 1
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_NV_external_memory_capabilities"

typedef enum vk_external_memory_handle_type_flag_bits_nv {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV     = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV      = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV  = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV   = 0x7fffffff
} vk_external_memory_handle_type_flag_bits_nv;
typedef vk_flags vk_external_memory_handle_type_flags_nv;

typedef enum vk_external_memory_feature_flag_bits_nv {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV     = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV     = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7fffffff
} vk_external_memory_feature_flag_bits_nv;
typedef vk_flags vk_external_memory_feature_flags_nv;
typedef struct vk_external_image_format_properties_nv {
    vk_image_format_properties              image_format_properties;
    vk_external_memory_feature_flags_nv     external_memory_features;
    vk_external_memory_handle_type_flags_nv export_from_imported_handle_types;
    vk_external_memory_handle_type_flags_nv compatible_handle_types;
} vk_external_image_format_properties_nv;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_external_image_format_properties_nv)(
    vk_physical_device physical_device, vk_format format, vk_image_type type, vk_image_tiling tiling,
    vk_image_usage_flags usage, vk_image_create_flags flags,
    vk_external_memory_handle_type_flags_nv external_handle_type,
    vk_external_image_format_properties_nv* p_external_image_format_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_external_image_format_properties_nv(
    vk_physical_device physical_device, vk_format format, vk_image_type type, vk_image_tiling tiling,
    vk_image_usage_flags usage, vk_image_create_flags flags,
    vk_external_memory_handle_type_flags_nv external_handle_type,
    vk_external_image_format_properties_nv*
        p_external_image_format_properties) __asm("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
#endif

#define vk_nv_external_memory 1
#define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME "VK_NV_external_memory"
typedef struct vk_external_memory_image_create_info_nv {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_external_memory_handle_type_flags_nv handle_types;
} vk_external_memory_image_create_info_nv;

typedef struct vk_export_memory_allocate_info_nv {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_external_memory_handle_type_flags_nv handle_types;
} vk_export_memory_allocate_info_nv;

#define vk_ext_validation_flags 1
#define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION 2
#define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME "VK_EXT_validation_flags"

typedef enum vk_validation_check_ext {
    VK_VALIDATION_CHECK_ALL_EXT      = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT  = 1,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7fffffff
} vk_validation_check_ext;
typedef struct vk_validation_flags_ext {
    vk_structure_type              s_type;
    const void*                    p_next;
    uint32_t                       disabled_validation_check_count;
    const vk_validation_check_ext* p_disabled_validation_checks;
} vk_validation_flags_ext;

#define vk_ext_shader_subgroup_ballot 1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME "VK_EXT_shader_subgroup_ballot"

#define vk_ext_shader_subgroup_vote 1
#define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME "VK_EXT_shader_subgroup_vote"

#define vk_ext_texture_compression_astc_hdr 1
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION 1
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME "VK_EXT_texture_compression_astc_hdr"
typedef struct vk_physical_device_texture_compression_astchdrfeatures_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         texture_compression_astc_hdr;
} vk_physical_device_texture_compression_astchdrfeatures_ext;

#define vk_ext_astc_decode_mode 1
#define VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION 1
#define VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME "VK_EXT_astc_decode_mode"
typedef struct vk_image_view_astcdecode_mode_ext {
    vk_structure_type s_type;
    const void*       p_next;
    vk_format         decode_mode;
} vk_image_view_astcdecode_mode_ext;

typedef struct vk_physical_device_astcdecode_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         decode_mode_shared_exponent;
} vk_physical_device_astcdecode_features_ext;

#define vk_ext_conditional_rendering 1
#define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION 2
#define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME "VK_EXT_conditional_rendering"

typedef enum vk_conditional_rendering_flag_bits_ext {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT       = 0x00000001,
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} vk_conditional_rendering_flag_bits_ext;
typedef vk_flags vk_conditional_rendering_flags_ext;
typedef struct vk_conditional_rendering_begin_info_ext {
    vk_structure_type                  s_type;
    const void*                        p_next;
    vk_buffer                          buffer;
    vk_device_size                     offset;
    vk_conditional_rendering_flags_ext flags;
} vk_conditional_rendering_begin_info_ext;

typedef struct vk_physical_device_conditional_rendering_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         conditional_rendering;
    vk_bool32         inherited_conditional_rendering;
} vk_physical_device_conditional_rendering_features_ext;

typedef struct vk_command_buffer_inheritance_conditional_rendering_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    vk_bool32         conditional_rendering_enable;
} vk_command_buffer_inheritance_conditional_rendering_info_ext;

typedef void(VKAPI_PTR* pfn_vk_cmd_begin_conditional_rendering_ext)(
    vk_command_buffer command_buffer, const vk_conditional_rendering_begin_info_ext* p_conditional_rendering_begin);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_conditional_rendering_ext)(vk_command_buffer command_buffer);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_begin_conditional_rendering_ext(
    vk_command_buffer                     command_buffer, const vk_conditional_rendering_begin_info_ext*
                                          p_conditional_rendering_begin) __asm("vkCmdBeginConditionalRenderingEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_end_conditional_rendering_ext(vk_command_buffer command_buffer) __asm("vkCmdEndConditionalRenderingEXT");
#endif

#define vk_nv_clip_space_w_scaling 1
#define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION 1
#define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME "VK_NV_clip_space_w_scaling"
typedef struct vk_viewport_wscaling_nv {
    float xcoeff;
    float ycoeff;
} vk_viewport_wscaling_nv;

typedef struct vk_pipeline_viewport_wscaling_state_create_info_nv {
    vk_structure_type              s_type;
    const void*                    p_next;
    vk_bool32                      viewport_wscaling_enable;
    uint32_t                       viewport_count;
    const vk_viewport_wscaling_nv* p_viewport_wscalings;
} vk_pipeline_viewport_wscaling_state_create_info_nv;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport_wscaling_nv)(vk_command_buffer command_buffer, uint32_t first_viewport,
                                                             uint32_t                       viewport_count,
                                                             const vk_viewport_wscaling_nv* p_viewport_wscalings);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_viewport_wscaling_nv(
    vk_command_buffer command_buffer, uint32_t first_viewport, uint32_t viewport_count,
    const vk_viewport_wscaling_nv* p_viewport_wscalings) __asm("vkCmdSetViewportWScalingNV");
#endif

#define vk_ext_direct_mode_display 1
#define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION 1
#define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME "VK_EXT_direct_mode_display"
typedef vk_result(VKAPI_PTR* pfn_vk_release_display_ext)(vk_physical_device physical_device, vk_display_khr display);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_release_display_ext(vk_physical_device physical_device,
                                                       vk_display_khr     display) __asm("vkReleaseDisplayEXT");
#endif

#define vk_ext_display_surface_counter 1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION 1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME "VK_EXT_display_surface_counter"

typedef enum vk_surface_counter_flag_bits_ext {
    VK_SURFACE_COUNTER_VBLANK_EXT             = 0x00000001,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} vk_surface_counter_flag_bits_ext;
typedef vk_flags vk_surface_counter_flags_ext;
typedef struct vk_surface_capabilities2ext {
    vk_structure_type                  s_type;
    void*                              p_next;
    uint32_t                           min_image_count;
    uint32_t                           max_image_count;
    vk_extent2d                        current_extent;
    vk_extent2d                        min_image_extent;
    vk_extent2d                        max_image_extent;
    uint32_t                           max_image_array_layers;
    vk_surface_transform_flags_khr     supported_transforms;
    vk_surface_transform_flag_bits_khr current_transform;
    vk_composite_alpha_flags_khr       supported_composite_alpha;
    vk_image_usage_flags               supported_usage_flags;
    vk_surface_counter_flags_ext       supported_surface_counters;
} vk_surface_capabilities2ext;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_surface_capabilities2ext)(
    vk_physical_device physical_device, vk_surface_khr surface, vk_surface_capabilities2ext* p_surface_capabilities);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_surface_capabilities2ext(
    vk_physical_device physical_device, vk_surface_khr surface,
    vk_surface_capabilities2ext* p_surface_capabilities) __asm("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
#endif

#define vk_ext_display_control 1
#define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION 1
#define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME "VK_EXT_display_control"

typedef enum vk_display_power_state_ext {
    VK_DISPLAY_POWER_STATE_OFF_EXT      = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT  = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT       = 2,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7fffffff
} vk_display_power_state_ext;

typedef enum vk_device_event_type_ext {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT        = 0x7fffffff
} vk_device_event_type_ext;

typedef enum vk_display_event_type_ext {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT        = 0x7fffffff
} vk_display_event_type_ext;
typedef struct vk_display_power_info_ext {
    vk_structure_type          s_type;
    const void*                p_next;
    vk_display_power_state_ext power_state;
} vk_display_power_info_ext;

typedef struct vk_device_event_info_ext {
    vk_structure_type        s_type;
    const void*              p_next;
    vk_device_event_type_ext device_event;
} vk_device_event_info_ext;

typedef struct vk_display_event_info_ext {
    vk_structure_type         s_type;
    const void*               p_next;
    vk_display_event_type_ext display_event;
} vk_display_event_info_ext;

typedef struct vk_swapchain_counter_create_info_ext {
    vk_structure_type            s_type;
    const void*                  p_next;
    vk_surface_counter_flags_ext surface_counters;
} vk_swapchain_counter_create_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_display_power_control_ext)(vk_device device, vk_display_khr display,
                                                               const vk_display_power_info_ext* p_display_power_info);
typedef vk_result(VKAPI_PTR* pfn_vk_register_device_event_ext)(vk_device                       device,
                                                               const vk_device_event_info_ext* p_device_event_info,
                                                               const vk_allocation_callbacks*  p_allocator,
                                                               vk_fence*                       p_fence);
typedef vk_result(VKAPI_PTR* pfn_vk_register_display_event_ext)(vk_device device, vk_display_khr display,
                                                                const vk_display_event_info_ext* p_display_event_info,
                                                                const vk_allocation_callbacks*   p_allocator,
                                                                vk_fence*                        p_fence);
typedef vk_result(VKAPI_PTR* pfn_vk_get_swapchain_counter_ext)(vk_device device, vk_swapchain_khr swapchain,
                                                               vk_surface_counter_flag_bits_ext counter,
                                                               uint64_t*                        p_counter_value);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL
vk_display_power_control_ext(vk_device device, vk_display_khr display,
                             const vk_display_power_info_ext* p_display_power_info) __asm("vkDisplayPowerControlEXT");

VKAPI_ATTR vk_result VKAPI_CALL vk_register_device_event_ext(vk_device                       device,
                                                             const vk_device_event_info_ext* p_device_event_info,
                                                             const vk_allocation_callbacks*  p_allocator,
                                                             vk_fence* p_fence) __asm("vkRegisterDeviceEventEXT");

VKAPI_ATTR vk_result VKAPI_CALL vk_register_display_event_ext(vk_device device, vk_display_khr display,
                                                              const vk_display_event_info_ext* p_display_event_info,
                                                              const vk_allocation_callbacks*   p_allocator,
                                                              vk_fence* p_fence) __asm("vkRegisterDisplayEventEXT");

VKAPI_ATTR vk_result VKAPI_CALL
vk_get_swapchain_counter_ext(vk_device device, vk_swapchain_khr swapchain, vk_surface_counter_flag_bits_ext counter,
                             uint64_t* p_counter_value) __asm("vkGetSwapchainCounterEXT");
#endif

#define vk_google_display_timing 1
#define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION 1
#define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME "VK_GOOGLE_display_timing"
typedef struct vk_refresh_cycle_duration_google {
    uint64_t refresh_duration;
} vk_refresh_cycle_duration_google;

typedef struct vk_past_presentation_timing_google {
    uint32_t present_id;
    uint64_t desired_present_time;
    uint64_t actual_present_time;
    uint64_t earliest_present_time;
    uint64_t present_margin;
} vk_past_presentation_timing_google;

typedef struct vk_present_time_google {
    uint32_t present_id;
    uint64_t desired_present_time;
} vk_present_time_google;

typedef struct vk_present_times_info_google {
    vk_structure_type             s_type;
    const void*                   p_next;
    uint32_t                      swapchain_count;
    const vk_present_time_google* p_times;
} vk_present_times_info_google;

typedef vk_result(VKAPI_PTR* pfn_vk_get_refresh_cycle_duration_google)(
    vk_device device, vk_swapchain_khr swapchain, vk_refresh_cycle_duration_google* p_display_timing_properties);
typedef vk_result(VKAPI_PTR* pfn_vk_get_past_presentation_timing_google)(
    vk_device device, vk_swapchain_khr swapchain, uint32_t* p_presentation_timing_count,
    vk_past_presentation_timing_google* p_presentation_timings);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_refresh_cycle_duration_google(
    vk_device device, vk_swapchain_khr swapchain,
    vk_refresh_cycle_duration_google* p_display_timing_properties) __asm("vkGetRefreshCycleDurationGOOGLE");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_past_presentation_timing_google(
    vk_device device, vk_swapchain_khr swapchain, uint32_t* p_presentation_timing_count,
    vk_past_presentation_timing_google* p_presentation_timings) __asm("vkGetPastPresentationTimingGOOGLE");
#endif

#define vk_nv_sample_mask_override_coverage 1
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION 1
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME "VK_NV_sample_mask_override_coverage"

#define vk_nv_geometry_shader_passthrough 1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION 1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME "VK_NV_geometry_shader_passthrough"

#define vk_nv_viewport_array2 1
#define VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION 1
#define VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME "VK_NV_viewport_array2"

#define vk_nvx_multiview_per_view_attributes 1
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION 1
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME "VK_NVX_multiview_per_view_attributes"
typedef struct vk_physical_device_multiview_per_view_attributes_properties_nvx {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         per_view_position_all_components;
} vk_physical_device_multiview_per_view_attributes_properties_nvx;

#define vk_nv_viewport_swizzle 1
#define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION 1
#define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME "VK_NV_viewport_swizzle"

typedef enum vk_viewport_coordinate_swizzle_nv {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV   = 0x7fffffff
} vk_viewport_coordinate_swizzle_nv;
typedef vk_flags vk_pipeline_viewport_swizzle_state_create_flags_nv;
typedef struct vk_viewport_swizzle_nv {
    vk_viewport_coordinate_swizzle_nv x;
    vk_viewport_coordinate_swizzle_nv y;
    vk_viewport_coordinate_swizzle_nv z;
    vk_viewport_coordinate_swizzle_nv w;
} vk_viewport_swizzle_nv;

typedef struct vk_pipeline_viewport_swizzle_state_create_info_nv {
    vk_structure_type                                  s_type;
    const void*                                        p_next;
    vk_pipeline_viewport_swizzle_state_create_flags_nv flags;
    uint32_t                                           viewport_count;
    const vk_viewport_swizzle_nv*                      p_viewport_swizzles;
} vk_pipeline_viewport_swizzle_state_create_info_nv;

#define vk_ext_discard_rectangles 1
#define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION 1
#define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME "VK_EXT_discard_rectangles"

typedef enum vk_discard_rectangle_mode_ext {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT  = 0x7fffffff
} vk_discard_rectangle_mode_ext;
typedef vk_flags vk_pipeline_discard_rectangle_state_create_flags_ext;
typedef struct vk_physical_device_discard_rectangle_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_discard_rectangles;
} vk_physical_device_discard_rectangle_properties_ext;

typedef struct vk_pipeline_discard_rectangle_state_create_info_ext {
    vk_structure_type                                    s_type;
    const void*                                          p_next;
    vk_pipeline_discard_rectangle_state_create_flags_ext flags;
    vk_discard_rectangle_mode_ext                        discard_rectangle_mode;
    uint32_t                                             discard_rectangle_count;
    const vk_rect2d*                                     p_discard_rectangles;
} vk_pipeline_discard_rectangle_state_create_info_ext;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_discard_rectangle_ext)(vk_command_buffer command_buffer,
                                                              uint32_t          first_discard_rectangle,
                                                              uint32_t          discard_rectangle_count,
                                                              const vk_rect2d*  p_discard_rectangles);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_discard_rectangle_ext(
    vk_command_buffer command_buffer, uint32_t first_discard_rectangle, uint32_t discard_rectangle_count,
    const vk_rect2d* p_discard_rectangles) __asm("vkCmdSetDiscardRectangleEXT");
#endif

#define vk_ext_conservative_rasterization 1
#define VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION 1
#define VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME "VK_EXT_conservative_rasterization"

typedef enum vk_conservative_rasterization_mode_ext {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT      = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT  = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT      = 0x7fffffff
} vk_conservative_rasterization_mode_ext;
typedef vk_flags vk_pipeline_rasterization_conservative_state_create_flags_ext;
typedef struct vk_physical_device_conservative_rasterization_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    float             primitive_overestimation_size;
    float             max_extra_primitive_overestimation_size;
    float             extra_primitive_overestimation_size_granularity;
    vk_bool32         primitive_underestimation;
    vk_bool32         conservative_point_and_line_rasterization;
    vk_bool32         degenerate_triangles_rasterized;
    vk_bool32         degenerate_lines_rasterized;
    vk_bool32         fully_covered_fragment_shader_input_variable;
    vk_bool32         conservative_rasterization_post_depth_coverage;
} vk_physical_device_conservative_rasterization_properties_ext;

typedef struct vk_pipeline_rasterization_conservative_state_create_info_ext {
    vk_structure_type                                             s_type;
    const void*                                                   p_next;
    vk_pipeline_rasterization_conservative_state_create_flags_ext flags;
    vk_conservative_rasterization_mode_ext                        conservative_rasterization_mode;
    float                                                         extra_primitive_overestimation_size;
} vk_pipeline_rasterization_conservative_state_create_info_ext;

#define vk_ext_depth_clip_enable 1
#define VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION 1
#define VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME "VK_EXT_depth_clip_enable"
typedef vk_flags vk_pipeline_rasterization_depth_clip_state_create_flags_ext;
typedef struct vk_physical_device_depth_clip_enable_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         depth_clip_enable;
} vk_physical_device_depth_clip_enable_features_ext;

typedef struct vk_pipeline_rasterization_depth_clip_state_create_info_ext {
    vk_structure_type                                           s_type;
    const void*                                                 p_next;
    vk_pipeline_rasterization_depth_clip_state_create_flags_ext flags;
    vk_bool32                                                   depth_clip_enable;
} vk_pipeline_rasterization_depth_clip_state_create_info_ext;

#define vk_ext_swapchain_colorspace 1
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION 4
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME "VK_EXT_swapchain_colorspace"

#define vk_ext_hdr_metadata 1
#define VK_EXT_HDR_METADATA_SPEC_VERSION 2
#define VK_EXT_HDR_METADATA_EXTENSION_NAME "VK_EXT_hdr_metadata"
typedef struct vk_xycolor_ext {
    float x;
    float y;
} vk_xycolor_ext;

typedef struct vk_hdr_metadata_ext {
    vk_structure_type s_type;
    const void*       p_next;
    vk_xycolor_ext    display_primary_red;
    vk_xycolor_ext    display_primary_green;
    vk_xycolor_ext    display_primary_blue;
    vk_xycolor_ext    white_point;
    float             max_luminance;
    float             min_luminance;
    float             max_content_light_level;
    float             max_frame_average_light_level;
} vk_hdr_metadata_ext;

typedef void(VKAPI_PTR* pfn_vk_set_hdr_metadata_ext)(vk_device device, uint32_t swapchain_count,
                                                     const vk_swapchain_khr*    p_swapchains,
                                                     const vk_hdr_metadata_ext* p_metadata);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_set_hdr_metadata_ext(vk_device device, uint32_t swapchain_count,
                                                   const vk_swapchain_khr*    p_swapchains,
                                                   const vk_hdr_metadata_ext* p_metadata) __asm("vkSetHdrMetadataEXT");
#endif

#define vk_ext_external_memory_dma_buf 1
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION 1
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME "VK_EXT_external_memory_dma_buf"

#define vk_ext_queue_family_foreign 1
#define VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION 1
#define VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME "VK_EXT_queue_family_foreign"
#define VK_QUEUE_FAMILY_FOREIGN_EXT (~0U - 2)

#define vk_ext_debug_utils 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_debug_utils_messenger_ext)
#define VK_EXT_DEBUG_UTILS_SPEC_VERSION 2
#define VK_EXT_DEBUG_UTILS_EXTENSION_NAME "VK_EXT_debug_utils"
typedef vk_flags vk_debug_utils_messenger_callback_data_flags_ext;

typedef enum vk_debug_utils_message_severity_flag_bits_ext {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT        = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT           = 0x00000010,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT        = 0x00000100,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT          = 0x00001000,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} vk_debug_utils_message_severity_flag_bits_ext;

typedef enum vk_debug_utils_message_type_flag_bits_ext {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT        = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT     = 0x00000002,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT    = 0x00000004,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} vk_debug_utils_message_type_flag_bits_ext;
typedef vk_flags vk_debug_utils_message_type_flags_ext;
typedef vk_flags vk_debug_utils_message_severity_flags_ext;
typedef vk_flags vk_debug_utils_messenger_create_flags_ext;
typedef struct vk_debug_utils_label_ext {
    vk_structure_type s_type;
    const void*       p_next;
    const char*       p_label_name;
    float             color[4];
} vk_debug_utils_label_ext;

typedef struct vk_debug_utils_object_name_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    vk_object_type    object_type;
    uint64_t          object_handle;
    const char*       p_object_name;
} vk_debug_utils_object_name_info_ext;

typedef struct vk_debug_utils_messenger_callback_data_ext {
    vk_structure_type                                s_type;
    const void*                                      p_next;
    vk_debug_utils_messenger_callback_data_flags_ext flags;
    const char*                                      p_message_id_name;
    int32_t                                          message_id_number;
    const char*                                      p_message;
    uint32_t                                         queue_label_count;
    const vk_debug_utils_label_ext*                  p_queue_labels;
    uint32_t                                         cmd_buf_label_count;
    const vk_debug_utils_label_ext*                  p_cmd_buf_labels;
    uint32_t                                         object_count;
    const vk_debug_utils_object_name_info_ext*       p_objects;
} vk_debug_utils_messenger_callback_data_ext;

typedef vk_bool32(VKAPI_PTR* pfn_vk_debug_utils_messenger_callback_ext)(
    vk_debug_utils_message_severity_flag_bits_ext message_severity, vk_debug_utils_message_type_flags_ext message_types,
    const vk_debug_utils_messenger_callback_data_ext* p_callback_data, void* p_user_data);

typedef struct vk_debug_utils_messenger_create_info_ext {
    vk_structure_type                         s_type;
    const void*                               p_next;
    vk_debug_utils_messenger_create_flags_ext flags;
    vk_debug_utils_message_severity_flags_ext message_severity;
    vk_debug_utils_message_type_flags_ext     message_type;
    pfn_vk_debug_utils_messenger_callback_ext pfn_user_callback;
    void*                                     p_user_data;
} vk_debug_utils_messenger_create_info_ext;

typedef struct vk_debug_utils_object_tag_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    vk_object_type    object_type;
    uint64_t          object_handle;
    uint64_t          tag_name;
    size_t            tag_size;
    const void*       p_tag;
} vk_debug_utils_object_tag_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_set_debug_utils_object_name_ext)(
    vk_device device, const vk_debug_utils_object_name_info_ext* p_name_info);
typedef vk_result(VKAPI_PTR* pfn_vk_set_debug_utils_object_tag_ext)(
    vk_device device, const vk_debug_utils_object_tag_info_ext* p_tag_info);
typedef void(VKAPI_PTR* pfn_vk_queue_begin_debug_utils_label_ext)(vk_queue                        queue,
                                                                  const vk_debug_utils_label_ext* p_label_info);
typedef void(VKAPI_PTR* pfn_vk_queue_end_debug_utils_label_ext)(vk_queue queue);
typedef void(VKAPI_PTR* pfn_vk_queue_insert_debug_utils_label_ext)(vk_queue                        queue,
                                                                   const vk_debug_utils_label_ext* p_label_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_begin_debug_utils_label_ext)(vk_command_buffer               command_buffer,
                                                                const vk_debug_utils_label_ext* p_label_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_end_debug_utils_label_ext)(vk_command_buffer command_buffer);
typedef void(VKAPI_PTR* pfn_vk_cmd_insert_debug_utils_label_ext)(vk_command_buffer               command_buffer,
                                                                 const vk_debug_utils_label_ext* p_label_info);
typedef vk_result(VKAPI_PTR* pfn_vk_create_debug_utils_messenger_ext)(
    vk_instance instance, const vk_debug_utils_messenger_create_info_ext* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_debug_utils_messenger_ext* p_messenger);
typedef void(VKAPI_PTR* pfn_vk_destroy_debug_utils_messenger_ext)(vk_instance                    instance,
                                                                  vk_debug_utils_messenger_ext   messenger,
                                                                  const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_submit_debug_utils_message_ext)(
    vk_instance instance, vk_debug_utils_message_severity_flag_bits_ext message_severity,
    vk_debug_utils_message_type_flags_ext             message_types,
    const vk_debug_utils_messenger_callback_data_ext* p_callback_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_set_debug_utils_object_name_ext(
    vk_device device, const vk_debug_utils_object_name_info_ext* p_name_info) __asm("vkSetDebugUtilsObjectNameEXT");

VKAPI_ATTR vk_result VKAPI_CALL vk_set_debug_utils_object_tag_ext(
    vk_device device, const vk_debug_utils_object_tag_info_ext* p_tag_info) __asm("vkSetDebugUtilsObjectTagEXT");

VKAPI_ATTR void VKAPI_CALL vk_queue_begin_debug_utils_label_ext(
    vk_queue queue, const vk_debug_utils_label_ext* p_label_info) __asm("vkQueueBeginDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL vk_queue_end_debug_utils_label_ext(vk_queue queue) __asm("vkQueueEndDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL vk_queue_insert_debug_utils_label_ext(
    vk_queue queue, const vk_debug_utils_label_ext* p_label_info) __asm("vkQueueInsertDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_begin_debug_utils_label_ext(vk_command_buffer               command_buffer,
                                   const vk_debug_utils_label_ext* p_label_info) __asm("vkCmdBeginDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_end_debug_utils_label_ext(vk_command_buffer command_buffer) __asm("vkCmdEndDebugUtilsLabelEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_insert_debug_utils_label_ext(
    vk_command_buffer               command_buffer,
    const vk_debug_utils_label_ext* p_label_info) __asm("vkCmdInsertDebugUtilsLabelEXT");

VKAPI_ATTR vk_result VKAPI_CALL
vk_create_debug_utils_messenger_ext(vk_instance instance, const vk_debug_utils_messenger_create_info_ext* p_create_info,
                                    const vk_allocation_callbacks* p_allocator,
                                    vk_debug_utils_messenger_ext*  p_messenger) __asm("vkCreateDebugUtilsMessengerEXT");

VKAPI_ATTR void VKAPI_CALL vk_destroy_debug_utils_messenger_ext(
    vk_instance instance, vk_debug_utils_messenger_ext messenger,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroyDebugUtilsMessengerEXT");

VKAPI_ATTR void VKAPI_CALL vk_submit_debug_utils_message_ext(
    vk_instance instance, vk_debug_utils_message_severity_flag_bits_ext message_severity,
    vk_debug_utils_message_type_flags_ext             message_types,
    const vk_debug_utils_messenger_callback_data_ext* p_callback_data) __asm("vkSubmitDebugUtilsMessageEXT");
#endif

#define vk_ext_sampler_filter_minmax 1
#define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION 2
#define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME "VK_EXT_sampler_filter_minmax"
typedef vk_sampler_reduction_mode vk_sampler_reduction_mode_ext;

typedef vk_sampler_reduction_mode_create_info vk_sampler_reduction_mode_create_info_ext;

typedef vk_physical_device_sampler_filter_minmax_properties vk_physical_device_sampler_filter_minmax_properties_ext;

#define vk_amd_gpu_shader_int16 1
#define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION 2
#define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME "VK_AMD_gpu_shader_int16"

#define vk_amd_mixed_attachment_samples 1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION 1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME "VK_AMD_mixed_attachment_samples"

#define vk_amd_shader_fragment_mask 1
#define VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION 1
#define VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME "VK_AMD_shader_fragment_mask"

#define vk_ext_inline_uniform_block 1
#define VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION 1
#define VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME "VK_EXT_inline_uniform_block"
typedef struct vk_physical_device_inline_uniform_block_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         inline_uniform_block;
    vk_bool32         descriptor_binding_inline_uniform_block_update_after_bind;
} vk_physical_device_inline_uniform_block_features_ext;

typedef struct vk_physical_device_inline_uniform_block_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_inline_uniform_block_size;
    uint32_t          max_per_stage_descriptor_inline_uniform_blocks;
    uint32_t          max_per_stage_descriptor_update_after_bind_inline_uniform_blocks;
    uint32_t          max_descriptor_set_inline_uniform_blocks;
    uint32_t          max_descriptor_set_update_after_bind_inline_uniform_blocks;
} vk_physical_device_inline_uniform_block_properties_ext;

typedef struct vk_write_descriptor_set_inline_uniform_block_ext {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          data_size;
    const void*       p_data;
} vk_write_descriptor_set_inline_uniform_block_ext;

typedef struct vk_descriptor_pool_inline_uniform_block_create_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          max_inline_uniform_block_bindings;
} vk_descriptor_pool_inline_uniform_block_create_info_ext;

#define vk_ext_shader_stencil_export 1
#define VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION 1
#define VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME "VK_EXT_shader_stencil_export"

#define vk_ext_sample_locations 1
#define VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION 1
#define VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME "VK_EXT_sample_locations"
typedef struct vk_sample_location_ext {
    float x;
    float y;
} vk_sample_location_ext;

typedef struct vk_sample_locations_info_ext {
    vk_structure_type             s_type;
    const void*                   p_next;
    vk_sample_count_flag_bits     sample_locations_per_pixel;
    vk_extent2d                   sample_location_grid_size;
    uint32_t                      sample_locations_count;
    const vk_sample_location_ext* p_sample_locations;
} vk_sample_locations_info_ext;

typedef struct vk_attachment_sample_locations_ext {
    uint32_t                     attachment_index;
    vk_sample_locations_info_ext sample_locations_info;
} vk_attachment_sample_locations_ext;

typedef struct vk_subpass_sample_locations_ext {
    uint32_t                     subpass_index;
    vk_sample_locations_info_ext sample_locations_info;
} vk_subpass_sample_locations_ext;

typedef struct vk_render_pass_sample_locations_begin_info_ext {
    vk_structure_type                         s_type;
    const void*                               p_next;
    uint32_t                                  attachment_initial_sample_locations_count;
    const vk_attachment_sample_locations_ext* p_attachment_initial_sample_locations;
    uint32_t                                  post_subpass_sample_locations_count;
    const vk_subpass_sample_locations_ext*    p_post_subpass_sample_locations;
} vk_render_pass_sample_locations_begin_info_ext;

typedef struct vk_pipeline_sample_locations_state_create_info_ext {
    vk_structure_type            s_type;
    const void*                  p_next;
    vk_bool32                    sample_locations_enable;
    vk_sample_locations_info_ext sample_locations_info;
} vk_pipeline_sample_locations_state_create_info_ext;

typedef struct vk_physical_device_sample_locations_properties_ext {
    vk_structure_type     s_type;
    void*                 p_next;
    vk_sample_count_flags sample_location_sample_counts;
    vk_extent2d           max_sample_location_grid_size;
    float                 sample_location_coordinate_range[2];
    uint32_t              sample_location_sub_pixel_bits;
    vk_bool32             variable_sample_locations;
} vk_physical_device_sample_locations_properties_ext;

typedef struct vk_multisample_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_extent2d       max_sample_location_grid_size;
} vk_multisample_properties_ext;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_sample_locations_ext)(
    vk_command_buffer command_buffer, const vk_sample_locations_info_ext* p_sample_locations_info);
typedef void(VKAPI_PTR* pfn_vk_get_physical_device_multisample_properties_ext)(
    vk_physical_device physical_device, vk_sample_count_flag_bits samples,
    vk_multisample_properties_ext* p_multisample_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_sample_locations_ext(
    vk_command_buffer                   command_buffer,
    const vk_sample_locations_info_ext* p_sample_locations_info) __asm("vkCmdSetSampleLocationsEXT");

VKAPI_ATTR void VKAPI_CALL vk_get_physical_device_multisample_properties_ext(
    vk_physical_device physical_device, vk_sample_count_flag_bits samples,
    vk_multisample_properties_ext* p_multisample_properties) __asm("vkGetPhysicalDeviceMultisamplePropertiesEXT");
#endif

#define vk_ext_blend_operation_advanced 1
#define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION 2
#define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME "VK_EXT_blend_operation_advanced"

typedef enum vk_blend_overlap_ext {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT     = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT     = 2,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT     = 0x7fffffff
} vk_blend_overlap_ext;
typedef struct vk_physical_device_blend_operation_advanced_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         advanced_blend_coherent_operations;
} vk_physical_device_blend_operation_advanced_features_ext;

typedef struct vk_physical_device_blend_operation_advanced_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          advanced_blend_max_color_attachments;
    vk_bool32         advanced_blend_independent_blend;
    vk_bool32         advanced_blend_non_premultiplied_src_color;
    vk_bool32         advanced_blend_non_premultiplied_dst_color;
    vk_bool32         advanced_blend_correlated_overlap;
    vk_bool32         advanced_blend_all_operations;
} vk_physical_device_blend_operation_advanced_properties_ext;

typedef struct vk_pipeline_color_blend_advanced_state_create_info_ext {
    vk_structure_type    s_type;
    const void*          p_next;
    vk_bool32            src_premultiplied;
    vk_bool32            dst_premultiplied;
    vk_blend_overlap_ext blend_overlap;
} vk_pipeline_color_blend_advanced_state_create_info_ext;

#define vk_nv_fragment_coverage_to_color 1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION 1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME "VK_NV_fragment_coverage_to_color"
typedef vk_flags vk_pipeline_coverage_to_color_state_create_flags_nv;
typedef struct vk_pipeline_coverage_to_color_state_create_info_nv {
    vk_structure_type                                   s_type;
    const void*                                         p_next;
    vk_pipeline_coverage_to_color_state_create_flags_nv flags;
    vk_bool32                                           coverage_to_color_enable;
    uint32_t                                            coverage_to_color_location;
} vk_pipeline_coverage_to_color_state_create_info_nv;

#define vk_nv_framebuffer_mixed_samples 1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION 1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME "VK_NV_framebuffer_mixed_samples"

typedef enum vk_coverage_modulation_mode_nv {
    VK_COVERAGE_MODULATION_MODE_NONE_NV     = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV      = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV    = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV     = 3,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7fffffff
} vk_coverage_modulation_mode_nv;
typedef vk_flags vk_pipeline_coverage_modulation_state_create_flags_nv;
typedef struct vk_pipeline_coverage_modulation_state_create_info_nv {
    vk_structure_type                                     s_type;
    const void*                                           p_next;
    vk_pipeline_coverage_modulation_state_create_flags_nv flags;
    vk_coverage_modulation_mode_nv                        coverage_modulation_mode;
    vk_bool32                                             coverage_modulation_table_enable;
    uint32_t                                              coverage_modulation_table_count;
    const float*                                          p_coverage_modulation_table;
} vk_pipeline_coverage_modulation_state_create_info_nv;

#define vk_nv_fill_rectangle 1
#define VK_NV_FILL_RECTANGLE_SPEC_VERSION 1
#define VK_NV_FILL_RECTANGLE_EXTENSION_NAME "VK_NV_fill_rectangle"

#define vk_nv_shader_sm_builtins 1
#define VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION 1
#define VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME "VK_NV_shader_sm_builtins"
typedef struct vk_physical_device_shader_smbuiltins_properties_nv {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          shader_smcount;
    uint32_t          shader_warps_per_sm;
} vk_physical_device_shader_smbuiltins_properties_nv;

typedef struct vk_physical_device_shader_smbuiltins_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_smbuiltins;
} vk_physical_device_shader_smbuiltins_features_nv;

#define vk_ext_post_depth_coverage 1
#define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION 1
#define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME "VK_EXT_post_depth_coverage"

#define vk_ext_image_drm_format_modifier 1
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION 1
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME "VK_EXT_image_drm_format_modifier"
typedef struct vk_drm_format_modifier_properties_ext {
    uint64_t                drm_format_modifier;
    uint32_t                drm_format_modifier_plane_count;
    vk_format_feature_flags drm_format_modifier_tiling_features;
} vk_drm_format_modifier_properties_ext;

typedef struct vk_drm_format_modifier_properties_list_ext {
    vk_structure_type                      s_type;
    void*                                  p_next;
    uint32_t                               drm_format_modifier_count;
    vk_drm_format_modifier_properties_ext* p_drm_format_modifier_properties;
} vk_drm_format_modifier_properties_list_ext;

typedef struct vk_physical_device_image_drm_format_modifier_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    uint64_t          drm_format_modifier;
    vk_sharing_mode   sharing_mode;
    uint32_t          queue_family_index_count;
    const uint32_t*   p_queue_family_indices;
} vk_physical_device_image_drm_format_modifier_info_ext;

typedef struct vk_image_drm_format_modifier_list_create_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          drm_format_modifier_count;
    const uint64_t*   p_drm_format_modifiers;
} vk_image_drm_format_modifier_list_create_info_ext;

typedef struct vk_image_drm_format_modifier_explicit_create_info_ext {
    vk_structure_type            s_type;
    const void*                  p_next;
    uint64_t                     drm_format_modifier;
    uint32_t                     drm_format_modifier_plane_count;
    const vk_subresource_layout* p_plane_layouts;
} vk_image_drm_format_modifier_explicit_create_info_ext;

typedef struct vk_image_drm_format_modifier_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint64_t          drm_format_modifier;
} vk_image_drm_format_modifier_properties_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_get_image_drm_format_modifier_properties_ext)(
    vk_device device, vk_image image, vk_image_drm_format_modifier_properties_ext* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_image_drm_format_modifier_properties_ext(
    vk_device device, vk_image image,
    vk_image_drm_format_modifier_properties_ext* p_properties) __asm("vkGetImageDrmFormatModifierPropertiesEXT");
#endif

#define vk_ext_validation_cache 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_validation_cache_ext)
#define VK_EXT_VALIDATION_CACHE_SPEC_VERSION 1
#define VK_EXT_VALIDATION_CACHE_EXTENSION_NAME "VK_EXT_validation_cache"

typedef enum vk_validation_cache_header_version_ext {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT      = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7fffffff
} vk_validation_cache_header_version_ext;
typedef vk_flags vk_validation_cache_create_flags_ext;
typedef struct vk_validation_cache_create_info_ext {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_validation_cache_create_flags_ext flags;
    size_t                               initial_data_size;
    const void*                          p_initial_data;
} vk_validation_cache_create_info_ext;

typedef struct vk_shader_module_validation_cache_create_info_ext {
    vk_structure_type       s_type;
    const void*             p_next;
    vk_validation_cache_ext validation_cache;
} vk_shader_module_validation_cache_create_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_create_validation_cache_ext)(
    vk_device device, const vk_validation_cache_create_info_ext* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_validation_cache_ext* p_validation_cache);
typedef void(VKAPI_PTR* pfn_vk_destroy_validation_cache_ext)(vk_device device, vk_validation_cache_ext validation_cache,
                                                             const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_merge_validation_caches_ext)(vk_device device, vk_validation_cache_ext dst_cache,
                                                                 uint32_t                       src_cache_count,
                                                                 const vk_validation_cache_ext* p_src_caches);
typedef vk_result(VKAPI_PTR* pfn_vk_get_validation_cache_data_ext)(vk_device               device,
                                                                   vk_validation_cache_ext validation_cache,
                                                                   size_t* p_data_size, void* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL
vk_create_validation_cache_ext(vk_device device, const vk_validation_cache_create_info_ext* p_create_info,
                               const vk_allocation_callbacks* p_allocator,
                               vk_validation_cache_ext*       p_validation_cache) __asm("vkCreateValidationCacheEXT");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_validation_cache_ext(vk_device device, vk_validation_cache_ext validation_cache,
                                const vk_allocation_callbacks* p_allocator) __asm("vkDestroyValidationCacheEXT");

VKAPI_ATTR vk_result VKAPI_CALL
vk_merge_validation_caches_ext(vk_device device, vk_validation_cache_ext dst_cache, uint32_t src_cache_count,
                               const vk_validation_cache_ext* p_src_caches) __asm("vkMergeValidationCachesEXT");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_validation_cache_data_ext(vk_device               device,
                                                                 vk_validation_cache_ext validation_cache,
                                                                 size_t*                 p_data_size,
                                                                 void* p_data) __asm("vkGetValidationCacheDataEXT");
#endif

#define vk_ext_descriptor_indexing 1
#define VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION 2
#define VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME "VK_EXT_descriptor_indexing"
typedef vk_descriptor_binding_flag_bits vk_descriptor_binding_flag_bits_ext;

typedef vk_descriptor_binding_flags vk_descriptor_binding_flags_ext;

typedef vk_descriptor_set_layout_binding_flags_create_info vk_descriptor_set_layout_binding_flags_create_info_ext;

typedef vk_physical_device_descriptor_indexing_features vk_physical_device_descriptor_indexing_features_ext;

typedef vk_physical_device_descriptor_indexing_properties vk_physical_device_descriptor_indexing_properties_ext;

typedef vk_descriptor_set_variable_descriptor_count_allocate_info
    vk_descriptor_set_variable_descriptor_count_allocate_info_ext;

typedef vk_descriptor_set_variable_descriptor_count_layout_support
    vk_descriptor_set_variable_descriptor_count_layout_support_ext;

#define vk_ext_shader_viewport_index_layer 1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION 1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME "VK_EXT_shader_viewport_index_layer"

#define vk_nv_shading_rate_image 1
#define VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION 3
#define VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME "VK_NV_shading_rate_image"

typedef enum vk_shading_rate_palette_entry_nv {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV              = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV    = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV     = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV     = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV     = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV      = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV                    = 0x7fffffff
} vk_shading_rate_palette_entry_nv;

typedef enum vk_coarse_sample_order_type_nv {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV      = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV       = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV  = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV     = 0x7fffffff
} vk_coarse_sample_order_type_nv;
typedef struct vk_shading_rate_palette_nv {
    uint32_t                                shading_rate_palette_entry_count;
    const vk_shading_rate_palette_entry_nv* p_shading_rate_palette_entries;
} vk_shading_rate_palette_nv;

typedef struct vk_pipeline_viewport_shading_rate_image_state_create_info_nv {
    vk_structure_type                 s_type;
    const void*                       p_next;
    vk_bool32                         shading_rate_image_enable;
    uint32_t                          viewport_count;
    const vk_shading_rate_palette_nv* p_shading_rate_palettes;
} vk_pipeline_viewport_shading_rate_image_state_create_info_nv;

typedef struct vk_physical_device_shading_rate_image_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shading_rate_image;
    vk_bool32         shading_rate_coarse_sample_order;
} vk_physical_device_shading_rate_image_features_nv;

typedef struct vk_physical_device_shading_rate_image_properties_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_extent2d       shading_rate_texel_size;
    uint32_t          shading_rate_palette_size;
    uint32_t          shading_rate_max_coarse_samples;
} vk_physical_device_shading_rate_image_properties_nv;

typedef struct vk_coarse_sample_location_nv {
    uint32_t pixel_x;
    uint32_t pixel_y;
    uint32_t sample;
} vk_coarse_sample_location_nv;

typedef struct vk_coarse_sample_order_custom_nv {
    vk_shading_rate_palette_entry_nv    shading_rate;
    uint32_t                            sample_count;
    uint32_t                            sample_location_count;
    const vk_coarse_sample_location_nv* p_sample_locations;
} vk_coarse_sample_order_custom_nv;

typedef struct vk_pipeline_viewport_coarse_sample_order_state_create_info_nv {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_coarse_sample_order_type_nv          sample_order_type;
    uint32_t                                custom_sample_order_count;
    const vk_coarse_sample_order_custom_nv* p_custom_sample_orders;
} vk_pipeline_viewport_coarse_sample_order_state_create_info_nv;

typedef void(VKAPI_PTR* pfn_vk_cmd_bind_shading_rate_image_nv)(vk_command_buffer command_buffer,
                                                               vk_image_view image_view, vk_image_layout image_layout);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport_shading_rate_palette_nv)(
    vk_command_buffer command_buffer, uint32_t first_viewport, uint32_t viewport_count,
    const vk_shading_rate_palette_nv* p_shading_rate_palettes);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_coarse_sample_order_nv)(
    vk_command_buffer command_buffer, vk_coarse_sample_order_type_nv sample_order_type,
    uint32_t custom_sample_order_count, const vk_coarse_sample_order_custom_nv* p_custom_sample_orders);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL
vk_cmd_bind_shading_rate_image_nv(vk_command_buffer command_buffer, vk_image_view image_view,
                                  vk_image_layout image_layout) __asm("vkCmdBindShadingRateImageNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_viewport_shading_rate_palette_nv(
    vk_command_buffer command_buffer, uint32_t first_viewport, uint32_t viewport_count,
    const vk_shading_rate_palette_nv* p_shading_rate_palettes) __asm("vkCmdSetViewportShadingRatePaletteNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_coarse_sample_order_nv(
    vk_command_buffer command_buffer, vk_coarse_sample_order_type_nv sample_order_type,
    uint32_t                                custom_sample_order_count,
    const vk_coarse_sample_order_custom_nv* p_custom_sample_orders) __asm("vkCmdSetCoarseSampleOrderNV");
#endif

#define vk_nv_ray_tracing 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_acceleration_structure_khr)
typedef vk_acceleration_structure_khr vk_acceleration_structure_nv;

#define VK_NV_RAY_TRACING_SPEC_VERSION 3
#define VK_NV_RAY_TRACING_EXTENSION_NAME "VK_NV_ray_tracing"
#define VK_SHADER_UNUSED_KHR (~0U)
#define VK_SHADER_UNUSED_NV VK_SHADER_UNUSED_KHR

typedef enum vk_ray_tracing_shader_group_type_khr {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR              = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR  = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV               = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV =
        VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7fffffff
} vk_ray_tracing_shader_group_type_khr;
typedef vk_ray_tracing_shader_group_type_khr vk_ray_tracing_shader_group_type_nv;

typedef enum vk_geometry_type_khr {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    VK_GEOMETRY_TYPE_AABBS_KHR     = 1,
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 1000150000,
    VK_GEOMETRY_TYPE_TRIANGLES_NV  = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
    VK_GEOMETRY_TYPE_AABBS_NV      = VK_GEOMETRY_TYPE_AABBS_KHR,
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR  = 0x7fffffff
} vk_geometry_type_khr;
typedef vk_geometry_type_khr vk_geometry_type_nv;

typedef enum vk_acceleration_structure_type_khr {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR    = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV     = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV  = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR     = 0x7fffffff
} vk_acceleration_structure_type_khr;
typedef vk_acceleration_structure_type_khr vk_acceleration_structure_type_nv;

typedef enum vk_copy_acceleration_structure_mode_khr {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR       = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR     = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR   = 2,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV        = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV      = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR    = 0x7fffffff
} vk_copy_acceleration_structure_mode_khr;
typedef vk_copy_acceleration_structure_mode_khr vk_copy_acceleration_structure_mode_nv;

typedef enum vk_acceleration_structure_memory_requirements_type_khr {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR         = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR  = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV =
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV =
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV =
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR = 0x7fffffff
} vk_acceleration_structure_memory_requirements_type_khr;
typedef vk_acceleration_structure_memory_requirements_type_khr vk_acceleration_structure_memory_requirements_type_nv;

typedef enum vk_geometry_flag_bits_khr {
    VK_GEOMETRY_OPAQUE_BIT_KHR                          = 0x00000001,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002,
    VK_GEOMETRY_OPAQUE_BIT_NV                           = VK_GEOMETRY_OPAQUE_BIT_KHR,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV  = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR                  = 0x7fffffff
} vk_geometry_flag_bits_khr;
typedef vk_flags              vk_geometry_flags_khr;
typedef vk_geometry_flags_khr vk_geometry_flags_nv;

typedef vk_geometry_flag_bits_khr vk_geometry_flag_bits_nv;

typedef enum vk_geometry_instance_flag_bits_khr {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR    = 0x00000001,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 0x00000002,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR                    = 0x00000004,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR                 = 0x00000008,
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV =
        VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV    = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7fffffff
} vk_geometry_instance_flag_bits_khr;
typedef vk_flags                       vk_geometry_instance_flags_khr;
typedef vk_geometry_instance_flags_khr vk_geometry_instance_flags_nv;

typedef vk_geometry_instance_flag_bits_khr vk_geometry_instance_flag_bits_nv;

typedef enum vk_build_acceleration_structure_flag_bits_khr {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR      = 0x00000001,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR  = 0x00000002,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR        = 0x00000010,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV       = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV =
        VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV =
        VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV      = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7fffffff
} vk_build_acceleration_structure_flag_bits_khr;
typedef vk_flags                                  vk_build_acceleration_structure_flags_khr;
typedef vk_build_acceleration_structure_flags_khr vk_build_acceleration_structure_flags_nv;

typedef vk_build_acceleration_structure_flag_bits_khr vk_build_acceleration_structure_flag_bits_nv;

typedef struct vk_ray_tracing_shader_group_create_info_nv {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_ray_tracing_shader_group_type_khr type;
    uint32_t                             general_shader;
    uint32_t                             closest_hit_shader;
    uint32_t                             any_hit_shader;
    uint32_t                             intersection_shader;
} vk_ray_tracing_shader_group_create_info_nv;

typedef struct vk_ray_tracing_pipeline_create_info_nv {
    vk_structure_type                                 s_type;
    const void*                                       p_next;
    vk_pipeline_create_flags                          flags;
    uint32_t                                          stage_count;
    const vk_pipeline_shader_stage_create_info*       p_stages;
    uint32_t                                          group_count;
    const vk_ray_tracing_shader_group_create_info_nv* p_groups;
    uint32_t                                          max_recursion_depth;
    vk_pipeline_layout                                layout;
    vk_pipeline                                       base_pipeline_handle;
    int32_t                                           base_pipeline_index;
} vk_ray_tracing_pipeline_create_info_nv;

typedef struct vk_geometry_triangles_nv {
    vk_structure_type s_type;
    const void*       p_next;
    vk_buffer         vertex_data;
    vk_device_size    vertex_offset;
    uint32_t          vertex_count;
    vk_device_size    vertex_stride;
    vk_format         vertex_format;
    vk_buffer         index_data;
    vk_device_size    index_offset;
    uint32_t          index_count;
    vk_index_type     index_type;
    vk_buffer         transform_data;
    vk_device_size    transform_offset;
} vk_geometry_triangles_nv;

typedef struct vk_geometry_aabbnv {
    vk_structure_type s_type;
    const void*       p_next;
    vk_buffer         aabb_data;
    uint32_t          num_aabbs;
    uint32_t          stride;
    vk_device_size    offset;
} vk_geometry_aabbnv;

typedef struct vk_geometry_data_nv {
    vk_geometry_triangles_nv triangles;
    vk_geometry_aabbnv       aabbs;
} vk_geometry_data_nv;

typedef struct vk_geometry_nv {
    vk_structure_type     s_type;
    const void*           p_next;
    vk_geometry_type_khr  geometry_type;
    vk_geometry_data_nv   geometry;
    vk_geometry_flags_khr flags;
} vk_geometry_nv;

typedef struct vk_acceleration_structure_info_nv {
    vk_structure_type                        s_type;
    const void*                              p_next;
    vk_acceleration_structure_type_nv        type;
    vk_build_acceleration_structure_flags_nv flags;
    uint32_t                                 instance_count;
    uint32_t                                 geometry_count;
    const vk_geometry_nv*                    p_geometries;
} vk_acceleration_structure_info_nv;

typedef struct vk_acceleration_structure_create_info_nv {
    vk_structure_type                 s_type;
    const void*                       p_next;
    vk_device_size                    compacted_size;
    vk_acceleration_structure_info_nv info;
} vk_acceleration_structure_create_info_nv;

typedef struct vk_bind_acceleration_structure_memory_info_khr {
    vk_structure_type             s_type;
    const void*                   p_next;
    vk_acceleration_structure_khr acceleration_structure;
    vk_device_memory              memory;
    vk_device_size                memory_offset;
    uint32_t                      device_index_count;
    const uint32_t*               p_device_indices;
} vk_bind_acceleration_structure_memory_info_khr;

typedef vk_bind_acceleration_structure_memory_info_khr vk_bind_acceleration_structure_memory_info_nv;

typedef struct vk_write_descriptor_set_acceleration_structure_khr {
    vk_structure_type                    s_type;
    const void*                          p_next;
    uint32_t                             acceleration_structure_count;
    const vk_acceleration_structure_khr* p_acceleration_structures;
} vk_write_descriptor_set_acceleration_structure_khr;

typedef vk_write_descriptor_set_acceleration_structure_khr vk_write_descriptor_set_acceleration_structure_nv;

typedef struct vk_acceleration_structure_memory_requirements_info_nv {
    vk_structure_type                                     s_type;
    const void*                                           p_next;
    vk_acceleration_structure_memory_requirements_type_nv type;
    vk_acceleration_structure_nv                          acceleration_structure;
} vk_acceleration_structure_memory_requirements_info_nv;

typedef struct vk_physical_device_ray_tracing_properties_nv {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          shader_group_handle_size;
    uint32_t          max_recursion_depth;
    uint32_t          max_shader_group_stride;
    uint32_t          shader_group_base_alignment;
    uint64_t          max_geometry_count;
    uint64_t          max_instance_count;
    uint64_t          max_triangle_count;
    uint32_t          max_descriptor_set_acceleration_structures;
} vk_physical_device_ray_tracing_properties_nv;

typedef struct vk_transform_matrix_khr {
    float matrix[3][4];
} vk_transform_matrix_khr;

typedef vk_transform_matrix_khr vk_transform_matrix_nv;

typedef struct vk_aabb_positions_khr {
    float min_x;
    float min_y;
    float min_z;
    float max_x;
    float max_y;
    float max_z;
} vk_aabb_positions_khr;

typedef vk_aabb_positions_khr vk_aabb_positions_nv;

typedef struct vk_acceleration_structure_instance_khr {
    vk_transform_matrix_khr        transform;
    uint32_t                       instance_custom_index : 24;
    uint32_t                       mask : 8;
    uint32_t                       instance_shader_binding_table_record_offset : 24;
    vk_geometry_instance_flags_khr flags : 8;
    uint64_t                       acceleration_structure_reference;
} vk_acceleration_structure_instance_khr;

typedef vk_acceleration_structure_instance_khr vk_acceleration_structure_instance_nv;

typedef vk_result(VKAPI_PTR* pfn_vk_create_acceleration_structure_nv)(
    vk_device device, const vk_acceleration_structure_create_info_nv* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_acceleration_structure_nv* p_acceleration_structure);
typedef void(VKAPI_PTR* pfn_vk_destroy_acceleration_structure_khr)(vk_device                     device,
                                                                   vk_acceleration_structure_khr acceleration_structure,
                                                                   const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_destroy_acceleration_structure_nv)(vk_device                      device,
                                                                  vk_acceleration_structure_khr  acceleration_structure,
                                                                  const vk_allocation_callbacks* p_allocator);
typedef void(VKAPI_PTR* pfn_vk_get_acceleration_structure_memory_requirements_nv)(
    vk_device device, const vk_acceleration_structure_memory_requirements_info_nv* p_info,
    vk_memory_requirements2khr* p_memory_requirements);
typedef vk_result(VKAPI_PTR* pfn_vk_bind_acceleration_structure_memory_khr)(
    vk_device device, uint32_t bind_info_count, const vk_bind_acceleration_structure_memory_info_khr* p_bind_infos);
typedef vk_result(VKAPI_PTR* pfn_vk_bind_acceleration_structure_memory_nv)(
    vk_device device, uint32_t bind_info_count, const vk_bind_acceleration_structure_memory_info_khr* p_bind_infos);
typedef void(VKAPI_PTR* pfn_vk_cmd_build_acceleration_structure_nv)(
    vk_command_buffer command_buffer, const vk_acceleration_structure_info_nv* p_info, vk_buffer instance_data,
    vk_device_size instance_offset, vk_bool32 update, vk_acceleration_structure_khr dst,
    vk_acceleration_structure_khr src, vk_buffer scratch, vk_device_size scratch_offset);
typedef void(VKAPI_PTR* pfn_vk_cmd_copy_acceleration_structure_nv)(vk_command_buffer             command_buffer,
                                                                   vk_acceleration_structure_khr dst,
                                                                   vk_acceleration_structure_khr src,
                                                                   vk_copy_acceleration_structure_mode_khr mode);
typedef void(VKAPI_PTR* pfn_vk_cmd_trace_rays_nv)(
    vk_command_buffer command_buffer, vk_buffer raygen_shader_binding_table_buffer,
    vk_device_size raygen_shader_binding_offset, vk_buffer miss_shader_binding_table_buffer,
    vk_device_size miss_shader_binding_offset, vk_device_size miss_shader_binding_stride,
    vk_buffer hit_shader_binding_table_buffer, vk_device_size hit_shader_binding_offset,
    vk_device_size hit_shader_binding_stride, vk_buffer callable_shader_binding_table_buffer,
    vk_device_size callable_shader_binding_offset, vk_device_size callable_shader_binding_stride, uint32_t width,
    uint32_t height, uint32_t depth);
typedef vk_result(VKAPI_PTR* pfn_vk_create_ray_tracing_pipelines_nv)(
    vk_device device, vk_pipeline_cache pipeline_cache, uint32_t create_info_count,
    const vk_ray_tracing_pipeline_create_info_nv* p_create_infos, const vk_allocation_callbacks* p_allocator,
    vk_pipeline* p_pipelines);
typedef vk_result(VKAPI_PTR* pfn_vk_get_ray_tracing_shader_group_handles_khr)(vk_device device, vk_pipeline pipeline,
                                                                              uint32_t first_group,
                                                                              uint32_t group_count, size_t data_size,
                                                                              void* p_data);
typedef vk_result(VKAPI_PTR* pfn_vk_get_ray_tracing_shader_group_handles_nv)(vk_device device, vk_pipeline pipeline,
                                                                             uint32_t first_group, uint32_t group_count,
                                                                             size_t data_size, void* p_data);
typedef vk_result(VKAPI_PTR* pfn_vk_get_acceleration_structure_handle_nv)(
    vk_device device, vk_acceleration_structure_khr acceleration_structure, size_t data_size, void* p_data);
typedef void(VKAPI_PTR* pfn_vk_cmd_write_acceleration_structures_properties_khr)(
    vk_command_buffer command_buffer, uint32_t acceleration_structure_count,
    const vk_acceleration_structure_khr* p_acceleration_structures, vk_query_type query_type, vk_query_pool query_pool,
    uint32_t first_query);
typedef void(VKAPI_PTR* pfn_vk_cmd_write_acceleration_structures_properties_nv)(
    vk_command_buffer command_buffer, uint32_t acceleration_structure_count,
    const vk_acceleration_structure_khr* p_acceleration_structures, vk_query_type query_type, vk_query_pool query_pool,
    uint32_t first_query);
typedef vk_result(VKAPI_PTR* pfn_vk_compile_deferred_nv)(vk_device device, vk_pipeline pipeline, uint32_t shader);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_acceleration_structure_nv(
    vk_device device, const vk_acceleration_structure_create_info_nv* p_create_info,
    const vk_allocation_callbacks* p_allocator,
    vk_acceleration_structure_nv*  p_acceleration_structure) __asm("vkCreateAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL vk_destroy_acceleration_structure_khr(
    vk_device device, vk_acceleration_structure_khr acceleration_structure,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroyAccelerationStructureKHR");

VKAPI_ATTR void VKAPI_CALL vk_destroy_acceleration_structure_nv(
    vk_device device, vk_acceleration_structure_khr acceleration_structure,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroyAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL vk_get_acceleration_structure_memory_requirements_nv(
    vk_device device, const vk_acceleration_structure_memory_requirements_info_nv* p_info,
    vk_memory_requirements2khr* p_memory_requirements) __asm("vkGetAccelerationStructureMemoryRequirementsNV");

VKAPI_ATTR vk_result VKAPI_CALL vk_bind_acceleration_structure_memory_khr(
    vk_device device, uint32_t bind_info_count,
    const vk_bind_acceleration_structure_memory_info_khr* p_bind_infos) __asm("vkBindAccelerationStructureMemoryKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_bind_acceleration_structure_memory_nv(
    vk_device device, uint32_t bind_info_count,
    const vk_bind_acceleration_structure_memory_info_khr* p_bind_infos) __asm("vkBindAccelerationStructureMemoryNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_build_acceleration_structure_nv(
    vk_command_buffer command_buffer, const vk_acceleration_structure_info_nv* p_info, vk_buffer instance_data,
    vk_device_size instance_offset, vk_bool32 update, vk_acceleration_structure_khr dst,
    vk_acceleration_structure_khr src, vk_buffer scratch,
    vk_device_size scratch_offset) __asm("vkCmdBuildAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_copy_acceleration_structure_nv(
    vk_command_buffer command_buffer, vk_acceleration_structure_khr dst, vk_acceleration_structure_khr src,
    vk_copy_acceleration_structure_mode_khr mode) __asm("vkCmdCopyAccelerationStructureNV");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_trace_rays_nv(vk_command_buffer command_buffer, vk_buffer raygen_shader_binding_table_buffer,
                     vk_device_size raygen_shader_binding_offset, vk_buffer miss_shader_binding_table_buffer,
                     vk_device_size miss_shader_binding_offset, vk_device_size miss_shader_binding_stride,
                     vk_buffer hit_shader_binding_table_buffer, vk_device_size hit_shader_binding_offset,
                     vk_device_size hit_shader_binding_stride, vk_buffer callable_shader_binding_table_buffer,
                     vk_device_size callable_shader_binding_offset, vk_device_size callable_shader_binding_stride,
                     uint32_t width, uint32_t height, uint32_t depth) __asm("vkCmdTraceRaysNV");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_ray_tracing_pipelines_nv(
    vk_device device, vk_pipeline_cache pipeline_cache, uint32_t create_info_count,
    const vk_ray_tracing_pipeline_create_info_nv* p_create_infos, const vk_allocation_callbacks* p_allocator,
    vk_pipeline* p_pipelines) __asm("vkCreateRayTracingPipelinesNV");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_ray_tracing_shader_group_handles_khr(
    vk_device device, vk_pipeline pipeline, uint32_t first_group, uint32_t group_count, size_t data_size,
    void* p_data) __asm("vkGetRayTracingShaderGroupHandlesKHR");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_ray_tracing_shader_group_handles_nv(
    vk_device device, vk_pipeline pipeline, uint32_t first_group, uint32_t group_count, size_t data_size,
    void* p_data) __asm("vkGetRayTracingShaderGroupHandlesNV");

VKAPI_ATTR vk_result VKAPI_CALL
vk_get_acceleration_structure_handle_nv(vk_device device, vk_acceleration_structure_khr acceleration_structure,
                                        size_t data_size, void* p_data) __asm("vkGetAccelerationStructureHandleNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_write_acceleration_structures_properties_khr(
    vk_command_buffer command_buffer, uint32_t acceleration_structure_count,
    const vk_acceleration_structure_khr* p_acceleration_structures, vk_query_type query_type, vk_query_pool query_pool,
    uint32_t first_query) __asm("vkCmdWriteAccelerationStructuresPropertiesKHR");

VKAPI_ATTR void VKAPI_CALL vk_cmd_write_acceleration_structures_properties_nv(
    vk_command_buffer command_buffer, uint32_t acceleration_structure_count,
    const vk_acceleration_structure_khr* p_acceleration_structures, vk_query_type query_type, vk_query_pool query_pool,
    uint32_t first_query) __asm("vkCmdWriteAccelerationStructuresPropertiesNV");

VKAPI_ATTR vk_result VKAPI_CALL vk_compile_deferred_nv(vk_device device, vk_pipeline pipeline,
                                                       uint32_t shader) __asm("vkCompileDeferredNV");
#endif

#define vk_nv_representative_fragment_test 1
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION 2
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME "VK_NV_representative_fragment_test"
typedef struct vk_physical_device_representative_fragment_test_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         representative_fragment_test;
} vk_physical_device_representative_fragment_test_features_nv;

typedef struct vk_pipeline_representative_fragment_test_state_create_info_nv {
    vk_structure_type s_type;
    const void*       p_next;
    vk_bool32         representative_fragment_test_enable;
} vk_pipeline_representative_fragment_test_state_create_info_nv;

#define vk_ext_filter_cubic 1
#define VK_EXT_FILTER_CUBIC_SPEC_VERSION 3
#define VK_EXT_FILTER_CUBIC_EXTENSION_NAME "VK_EXT_filter_cubic"
typedef struct vk_physical_device_image_view_image_format_info_ext {
    vk_structure_type  s_type;
    void*              p_next;
    vk_image_view_type image_view_type;
} vk_physical_device_image_view_image_format_info_ext;

typedef struct vk_filter_cubic_image_view_image_format_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         filter_cubic;
    vk_bool32         filter_cubic_minmax;
} vk_filter_cubic_image_view_image_format_properties_ext;

#define vk_qcom_render_pass_shader_resolve 1
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION 4
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME "VK_QCOM_render_pass_shader_resolve"

#define vk_ext_global_priority 1
#define VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION 2
#define VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME "VK_EXT_global_priority"

typedef enum vk_queue_global_priority_ext {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT      = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT   = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT     = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7fffffff
} vk_queue_global_priority_ext;
typedef struct vk_device_queue_global_priority_create_info_ext {
    vk_structure_type            s_type;
    const void*                  p_next;
    vk_queue_global_priority_ext global_priority;
} vk_device_queue_global_priority_create_info_ext;

#define vk_ext_external_memory_host 1
#define VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION 1
#define VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME "VK_EXT_external_memory_host"
typedef struct vk_import_memory_host_pointer_info_ext {
    vk_structure_type                        s_type;
    const void*                              p_next;
    vk_external_memory_handle_type_flag_bits handle_type;
    void*                                    p_host_pointer;
} vk_import_memory_host_pointer_info_ext;

typedef struct vk_memory_host_pointer_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          memory_type_bits;
} vk_memory_host_pointer_properties_ext;

typedef struct vk_physical_device_external_memory_host_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_device_size    min_imported_host_pointer_alignment;
} vk_physical_device_external_memory_host_properties_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_get_memory_host_pointer_properties_ext)(
    vk_device device, vk_external_memory_handle_type_flag_bits handle_type, const void* p_host_pointer,
    vk_memory_host_pointer_properties_ext* p_memory_host_pointer_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_memory_host_pointer_properties_ext(
    vk_device device, vk_external_memory_handle_type_flag_bits handle_type, const void* p_host_pointer,
    vk_memory_host_pointer_properties_ext*
        p_memory_host_pointer_properties) __asm("vkGetMemoryHostPointerPropertiesEXT");
#endif

#define vk_amd_buffer_marker 1
#define VK_AMD_BUFFER_MARKER_SPEC_VERSION 1
#define VK_AMD_BUFFER_MARKER_EXTENSION_NAME "VK_AMD_buffer_marker"
typedef void(VKAPI_PTR* pfn_vk_cmd_write_buffer_marker_amd)(vk_command_buffer           command_buffer,
                                                            vk_pipeline_stage_flag_bits pipeline_stage,
                                                            vk_buffer dst_buffer, vk_device_size dst_offset,
                                                            uint32_t marker);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_write_buffer_marker_amd(vk_command_buffer           command_buffer,
                                                          vk_pipeline_stage_flag_bits pipeline_stage,
                                                          vk_buffer dst_buffer, vk_device_size dst_offset,
                                                          uint32_t marker) __asm("vkCmdWriteBufferMarkerAMD");
#endif

#define vk_amd_pipeline_compiler_control 1
#define VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION 1
#define VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME "VK_AMD_pipeline_compiler_control"

typedef enum vk_pipeline_compiler_control_flag_bits_amd {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7fffffff
} vk_pipeline_compiler_control_flag_bits_amd;
typedef vk_flags vk_pipeline_compiler_control_flags_amd;
typedef struct vk_pipeline_compiler_control_create_info_amd {
    vk_structure_type                      s_type;
    const void*                            p_next;
    vk_pipeline_compiler_control_flags_amd compiler_control_flags;
} vk_pipeline_compiler_control_create_info_amd;

#define vk_ext_calibrated_timestamps 1
#define VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION 1
#define VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME "VK_EXT_calibrated_timestamps"

typedef enum vk_time_domain_ext {
    VK_TIME_DOMAIN_DEVICE_EXT                    = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT           = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT       = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    VK_TIME_DOMAIN_MAX_ENUM_EXT                  = 0x7fffffff
} vk_time_domain_ext;
typedef struct vk_calibrated_timestamp_info_ext {
    vk_structure_type  s_type;
    const void*        p_next;
    vk_time_domain_ext time_domain;
} vk_calibrated_timestamp_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_calibrateable_time_domains_ext)(
    vk_physical_device physical_device, uint32_t* p_time_domain_count, vk_time_domain_ext* p_time_domains);
typedef vk_result(VKAPI_PTR* pfn_vk_get_calibrated_timestamps_ext)(
    vk_device device, uint32_t timestamp_count, const vk_calibrated_timestamp_info_ext* p_timestamp_infos,
    uint64_t* p_timestamps, uint64_t* p_max_deviation);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_calibrateable_time_domains_ext(
    vk_physical_device physical_device, uint32_t* p_time_domain_count,
    vk_time_domain_ext* p_time_domains) __asm("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");

VKAPI_ATTR vk_result VKAPI_CALL vk_get_calibrated_timestamps_ext(
    vk_device device, uint32_t timestamp_count, const vk_calibrated_timestamp_info_ext* p_timestamp_infos,
    uint64_t* p_timestamps, uint64_t* p_max_deviation) __asm("vkGetCalibratedTimestampsEXT");
#endif

#define vk_amd_shader_core_properties 1
#define VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION 2
#define VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME "VK_AMD_shader_core_properties"
typedef struct vk_physical_device_shader_core_properties_amd {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          shader_engine_count;
    uint32_t          shader_arrays_per_engine_count;
    uint32_t          compute_units_per_shader_array;
    uint32_t          simd_per_compute_unit;
    uint32_t          wavefronts_per_simd;
    uint32_t          wavefront_size;
    uint32_t          sgprs_per_simd;
    uint32_t          min_sgpr_allocation;
    uint32_t          max_sgpr_allocation;
    uint32_t          sgpr_allocation_granularity;
    uint32_t          vgprs_per_simd;
    uint32_t          min_vgpr_allocation;
    uint32_t          max_vgpr_allocation;
    uint32_t          vgpr_allocation_granularity;
} vk_physical_device_shader_core_properties_amd;

#define vk_amd_memory_overallocation_behavior 1
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION 1
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME "VK_AMD_memory_overallocation_behavior"

typedef enum vk_memory_overallocation_behavior_amd {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD    = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD    = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD   = 0x7fffffff
} vk_memory_overallocation_behavior_amd;
typedef struct vk_device_memory_overallocation_create_info_amd {
    vk_structure_type                     s_type;
    const void*                           p_next;
    vk_memory_overallocation_behavior_amd overallocation_behavior;
} vk_device_memory_overallocation_create_info_amd;

#define vk_ext_vertex_attribute_divisor 1
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 3
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME "VK_EXT_vertex_attribute_divisor"
typedef struct vk_physical_device_vertex_attribute_divisor_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_vertex_attrib_divisor;
} vk_physical_device_vertex_attribute_divisor_properties_ext;

typedef struct vk_vertex_input_binding_divisor_description_ext {
    uint32_t binding;
    uint32_t divisor;
} vk_vertex_input_binding_divisor_description_ext;

typedef struct vk_pipeline_vertex_input_divisor_state_create_info_ext {
    vk_structure_type                                      s_type;
    const void*                                            p_next;
    uint32_t                                               vertex_binding_divisor_count;
    const vk_vertex_input_binding_divisor_description_ext* p_vertex_binding_divisors;
} vk_pipeline_vertex_input_divisor_state_create_info_ext;

typedef struct vk_physical_device_vertex_attribute_divisor_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         vertex_attribute_instance_rate_divisor;
    vk_bool32         vertex_attribute_instance_rate_zero_divisor;
} vk_physical_device_vertex_attribute_divisor_features_ext;

#define vk_ext_pipeline_creation_feedback 1
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION 1
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME "VK_EXT_pipeline_creation_feedback"

typedef enum vk_pipeline_creation_feedback_flag_bits_ext {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT                          = 0x00000001,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 0x00000002,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT     = 0x00000004,
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT                 = 0x7fffffff
} vk_pipeline_creation_feedback_flag_bits_ext;
typedef vk_flags vk_pipeline_creation_feedback_flags_ext;
typedef struct vk_pipeline_creation_feedback_ext {
    vk_pipeline_creation_feedback_flags_ext flags;
    uint64_t                                duration;
} vk_pipeline_creation_feedback_ext;

typedef struct vk_pipeline_creation_feedback_create_info_ext {
    vk_structure_type                  s_type;
    const void*                        p_next;
    vk_pipeline_creation_feedback_ext* p_pipeline_creation_feedback;
    uint32_t                           pipeline_stage_creation_feedback_count;
    vk_pipeline_creation_feedback_ext* p_pipeline_stage_creation_feedbacks;
} vk_pipeline_creation_feedback_create_info_ext;

#define vk_nv_shader_subgroup_partitioned 1
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION 1
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME "VK_NV_shader_subgroup_partitioned"

#define vk_nv_compute_shader_derivatives 1
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME "VK_NV_compute_shader_derivatives"
typedef struct vk_physical_device_compute_shader_derivatives_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         compute_derivative_group_quads;
    vk_bool32         compute_derivative_group_linear;
} vk_physical_device_compute_shader_derivatives_features_nv;

#define vk_nv_mesh_shader 1
#define VK_NV_MESH_SHADER_SPEC_VERSION 1
#define VK_NV_MESH_SHADER_EXTENSION_NAME "VK_NV_mesh_shader"
typedef struct vk_physical_device_mesh_shader_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         task_shader;
    vk_bool32         mesh_shader;
} vk_physical_device_mesh_shader_features_nv;

typedef struct vk_physical_device_mesh_shader_properties_nv {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_draw_mesh_tasks_count;
    uint32_t          max_task_work_group_invocations;
    uint32_t          max_task_work_group_size[3];
    uint32_t          max_task_total_memory_size;
    uint32_t          max_task_output_count;
    uint32_t          max_mesh_work_group_invocations;
    uint32_t          max_mesh_work_group_size[3];
    uint32_t          max_mesh_total_memory_size;
    uint32_t          max_mesh_output_vertices;
    uint32_t          max_mesh_output_primitives;
    uint32_t          max_mesh_multiview_view_count;
    uint32_t          mesh_output_per_vertex_granularity;
    uint32_t          mesh_output_per_primitive_granularity;
} vk_physical_device_mesh_shader_properties_nv;

typedef struct vk_draw_mesh_tasks_indirect_command_nv {
    uint32_t task_count;
    uint32_t first_task;
} vk_draw_mesh_tasks_indirect_command_nv;

typedef void(VKAPI_PTR* pfn_vk_cmd_draw_mesh_tasks_nv)(vk_command_buffer command_buffer, uint32_t task_count,
                                                       uint32_t first_task);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_mesh_tasks_indirect_nv)(vk_command_buffer command_buffer, vk_buffer buffer,
                                                                vk_device_size offset, uint32_t draw_count,
                                                                uint32_t stride);
typedef void(VKAPI_PTR* pfn_vk_cmd_draw_mesh_tasks_indirect_count_nv)(vk_command_buffer command_buffer,
                                                                      vk_buffer buffer, vk_device_size offset,
                                                                      vk_buffer      count_buffer,
                                                                      vk_device_size count_buffer_offset,
                                                                      uint32_t max_draw_count, uint32_t stride);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_mesh_tasks_nv(vk_command_buffer command_buffer, uint32_t task_count,
                                                     uint32_t first_task) __asm("vkCmdDrawMeshTasksNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_mesh_tasks_indirect_nv(vk_command_buffer command_buffer, vk_buffer buffer,
                                                              vk_device_size offset, uint32_t draw_count,
                                                              uint32_t stride) __asm("vkCmdDrawMeshTasksIndirectNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_draw_mesh_tasks_indirect_count_nv(
    vk_command_buffer command_buffer, vk_buffer buffer, vk_device_size offset, vk_buffer count_buffer,
    vk_device_size count_buffer_offset, uint32_t max_draw_count,
    uint32_t stride) __asm("vkCmdDrawMeshTasksIndirectCountNV");
#endif

#define vk_nv_fragment_shader_barycentric 1
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME "VK_NV_fragment_shader_barycentric"
typedef struct vk_physical_device_fragment_shader_barycentric_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         fragment_shader_barycentric;
} vk_physical_device_fragment_shader_barycentric_features_nv;

#define vk_nv_shader_image_footprint 1
#define VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION 2
#define VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME "VK_NV_shader_image_footprint"
typedef struct vk_physical_device_shader_image_footprint_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         image_footprint;
} vk_physical_device_shader_image_footprint_features_nv;

#define vk_nv_scissor_exclusive 1
#define VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION 1
#define VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME "VK_NV_scissor_exclusive"
typedef struct vk_pipeline_viewport_exclusive_scissor_state_create_info_nv {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          exclusive_scissor_count;
    const vk_rect2d*  p_exclusive_scissors;
} vk_pipeline_viewport_exclusive_scissor_state_create_info_nv;

typedef struct vk_physical_device_exclusive_scissor_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         exclusive_scissor;
} vk_physical_device_exclusive_scissor_features_nv;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_exclusive_scissor_nv)(vk_command_buffer command_buffer,
                                                             uint32_t          first_exclusive_scissor,
                                                             uint32_t          exclusive_scissor_count,
                                                             const vk_rect2d*  p_exclusive_scissors);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_exclusive_scissor_nv(
    vk_command_buffer command_buffer, uint32_t first_exclusive_scissor, uint32_t exclusive_scissor_count,
    const vk_rect2d* p_exclusive_scissors) __asm("vkCmdSetExclusiveScissorNV");
#endif

#define vk_nv_device_diagnostic_checkpoints 1
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION 2
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME "VK_NV_device_diagnostic_checkpoints"
typedef struct vk_queue_family_checkpoint_properties_nv {
    vk_structure_type       s_type;
    void*                   p_next;
    vk_pipeline_stage_flags checkpoint_execution_stage_mask;
} vk_queue_family_checkpoint_properties_nv;

typedef struct vk_checkpoint_data_nv {
    vk_structure_type           s_type;
    void*                       p_next;
    vk_pipeline_stage_flag_bits stage;
    void*                       p_checkpoint_marker;
} vk_checkpoint_data_nv;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_checkpoint_nv)(vk_command_buffer command_buffer,
                                                      const void*       p_checkpoint_marker);
typedef void(VKAPI_PTR* pfn_vk_get_queue_checkpoint_data_nv)(vk_queue queue, uint32_t* p_checkpoint_data_count,
                                                             vk_checkpoint_data_nv* p_checkpoint_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_checkpoint_nv(vk_command_buffer command_buffer,
                                                    const void* p_checkpoint_marker) __asm("vkCmdSetCheckpointNV");

VKAPI_ATTR void VKAPI_CALL
vk_get_queue_checkpoint_data_nv(vk_queue queue, uint32_t* p_checkpoint_data_count,
                                vk_checkpoint_data_nv* p_checkpoint_data) __asm("vkGetQueueCheckpointDataNV");
#endif

#define vk_intel_shader_integer_functions2 1
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION 1
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME "VK_INTEL_shader_integer_functions2"
typedef struct vk_physical_device_shader_integer_functions2features_intel {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_integer_functions2;
} vk_physical_device_shader_integer_functions2features_intel;

#define vk_intel_performance_query 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_performance_configuration_intel)
#define VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION 2
#define VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME "VK_INTEL_performance_query"

typedef enum vk_performance_configuration_type_intel {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL                                  = 0x7fffffff
} vk_performance_configuration_type_intel;

typedef enum vk_query_pool_sampling_mode_intel {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL   = 0,
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7fffffff
} vk_query_pool_sampling_mode_intel;

typedef enum vk_performance_override_type_intel {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL    = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL         = 0x7fffffff
} vk_performance_override_type_intel;

typedef enum vk_performance_parameter_type_intel {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL    = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL                 = 0x7fffffff
} vk_performance_parameter_type_intel;

typedef enum vk_performance_value_type_intel {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL   = 0,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL   = 1,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL    = 2,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL     = 3,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL   = 4,
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7fffffff
} vk_performance_value_type_intel;
typedef union vk_performance_value_data_intel {
    uint32_t    value32;
    uint64_t    value64;
    float       value_float;
    vk_bool32   value_bool;
    const char* value_string;
} vk_performance_value_data_intel;

typedef struct vk_performance_value_intel {
    vk_performance_value_type_intel type;
    vk_performance_value_data_intel data;
} vk_performance_value_intel;

typedef struct vk_initialize_performance_api_info_intel {
    vk_structure_type s_type;
    const void*       p_next;
    void*             p_user_data;
} vk_initialize_performance_api_info_intel;

typedef struct vk_query_pool_performance_query_create_info_intel {
    vk_structure_type                 s_type;
    const void*                       p_next;
    vk_query_pool_sampling_mode_intel performance_counters_sampling;
} vk_query_pool_performance_query_create_info_intel;

typedef vk_query_pool_performance_query_create_info_intel vk_query_pool_create_info_intel;

typedef struct vk_performance_marker_info_intel {
    vk_structure_type s_type;
    const void*       p_next;
    uint64_t          marker;
} vk_performance_marker_info_intel;

typedef struct vk_performance_stream_marker_info_intel {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          marker;
} vk_performance_stream_marker_info_intel;

typedef struct vk_performance_override_info_intel {
    vk_structure_type                  s_type;
    const void*                        p_next;
    vk_performance_override_type_intel type;
    vk_bool32                          enable;
    uint64_t                           parameter;
} vk_performance_override_info_intel;

typedef struct vk_performance_configuration_acquire_info_intel {
    vk_structure_type                       s_type;
    const void*                             p_next;
    vk_performance_configuration_type_intel type;
} vk_performance_configuration_acquire_info_intel;

typedef vk_result(VKAPI_PTR* pfn_vk_initialize_performance_api_intel)(
    vk_device device, const vk_initialize_performance_api_info_intel* p_initialize_info);
typedef void(VKAPI_PTR* pfn_vk_uninitialize_performance_api_intel)(vk_device device);
typedef vk_result(VKAPI_PTR* pfn_vk_cmd_set_performance_marker_intel)(
    vk_command_buffer command_buffer, const vk_performance_marker_info_intel* p_marker_info);
typedef vk_result(VKAPI_PTR* pfn_vk_cmd_set_performance_stream_marker_intel)(
    vk_command_buffer command_buffer, const vk_performance_stream_marker_info_intel* p_marker_info);
typedef vk_result(VKAPI_PTR* pfn_vk_cmd_set_performance_override_intel)(
    vk_command_buffer command_buffer, const vk_performance_override_info_intel* p_override_info);
typedef vk_result(VKAPI_PTR* pfn_vk_acquire_performance_configuration_intel)(
    vk_device device, const vk_performance_configuration_acquire_info_intel* p_acquire_info,
    vk_performance_configuration_intel* p_configuration);
typedef vk_result(VKAPI_PTR* pfn_vk_release_performance_configuration_intel)(
    vk_device device, vk_performance_configuration_intel configuration);
typedef vk_result(VKAPI_PTR* pfn_vk_queue_set_performance_configuration_intel)(
    vk_queue queue, vk_performance_configuration_intel configuration);
typedef vk_result(VKAPI_PTR* pfn_vk_get_performance_parameter_intel)(vk_device                           device,
                                                                     vk_performance_parameter_type_intel parameter,
                                                                     vk_performance_value_intel*         p_value);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_initialize_performance_api_intel(
    vk_device                                       device,
    const vk_initialize_performance_api_info_intel* p_initialize_info) __asm("vkInitializePerformanceApiINTEL");

VKAPI_ATTR void VKAPI_CALL
vk_uninitialize_performance_api_intel(vk_device device) __asm("vkUninitializePerformanceApiINTEL");

VKAPI_ATTR vk_result VKAPI_CALL vk_cmd_set_performance_marker_intel(
    vk_command_buffer                       command_buffer,
    const vk_performance_marker_info_intel* p_marker_info) __asm("vkCmdSetPerformanceMarkerINTEL");

VKAPI_ATTR vk_result VKAPI_CALL vk_cmd_set_performance_stream_marker_intel(
    vk_command_buffer                              command_buffer,
    const vk_performance_stream_marker_info_intel* p_marker_info) __asm("vkCmdSetPerformanceStreamMarkerINTEL");

VKAPI_ATTR vk_result VKAPI_CALL vk_cmd_set_performance_override_intel(
    vk_command_buffer                         command_buffer,
    const vk_performance_override_info_intel* p_override_info) __asm("vkCmdSetPerformanceOverrideINTEL");

VKAPI_ATTR vk_result VKAPI_CALL vk_acquire_performance_configuration_intel(
    vk_device device, const vk_performance_configuration_acquire_info_intel* p_acquire_info,
    vk_performance_configuration_intel* p_configuration) __asm("vkAcquirePerformanceConfigurationINTEL");

VKAPI_ATTR vk_result VKAPI_CALL vk_release_performance_configuration_intel(
    vk_device device, vk_performance_configuration_intel configuration) __asm("vkReleasePerformanceConfigurationINTEL");

VKAPI_ATTR vk_result VKAPI_CALL vk_queue_set_performance_configuration_intel(
    vk_queue queue, vk_performance_configuration_intel configuration) __asm("vkQueueSetPerformanceConfigurationINTEL");

VKAPI_ATTR vk_result VKAPI_CALL
vk_get_performance_parameter_intel(vk_device device, vk_performance_parameter_type_intel parameter,
                                   vk_performance_value_intel* p_value) __asm("vkGetPerformanceParameterINTEL");
#endif

#define vk_ext_pci_bus_info 1
#define VK_EXT_PCI_BUS_INFO_SPEC_VERSION 2
#define VK_EXT_PCI_BUS_INFO_EXTENSION_NAME "VK_EXT_pci_bus_info"
typedef struct vk_physical_device_pcibus_info_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          pci_domain;
    uint32_t          pci_bus;
    uint32_t          pci_device;
    uint32_t          pci_function;
} vk_physical_device_pcibus_info_properties_ext;

#define vk_amd_display_native_hdr 1
#define VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION 1
#define VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME "VK_AMD_display_native_hdr"
typedef struct vk_display_native_hdr_surface_capabilities_amd {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         local_dimming_support;
} vk_display_native_hdr_surface_capabilities_amd;

typedef struct vk_swapchain_display_native_hdr_create_info_amd {
    vk_structure_type s_type;
    const void*       p_next;
    vk_bool32         local_dimming_enable;
} vk_swapchain_display_native_hdr_create_info_amd;

typedef void(VKAPI_PTR* pfn_vk_set_local_dimming_amd)(vk_device device, vk_swapchain_khr swap_chain,
                                                      vk_bool32 local_dimming_enable);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_set_local_dimming_amd(vk_device device, vk_swapchain_khr swap_chain,
                                                    vk_bool32 local_dimming_enable) __asm("vkSetLocalDimmingAMD");
#endif

#define vk_ext_fragment_density_map 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME "VK_EXT_fragment_density_map"
typedef struct vk_physical_device_fragment_density_map_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         fragment_density_map;
    vk_bool32         fragment_density_map_dynamic;
    vk_bool32         fragment_density_map_non_subsampled_images;
} vk_physical_device_fragment_density_map_features_ext;

typedef struct vk_physical_device_fragment_density_map_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_extent2d       min_fragment_density_texel_size;
    vk_extent2d       max_fragment_density_texel_size;
    vk_bool32         fragment_density_invocations;
} vk_physical_device_fragment_density_map_properties_ext;

typedef struct vk_render_pass_fragment_density_map_create_info_ext {
    vk_structure_type       s_type;
    const void*             p_next;
    vk_attachment_reference fragment_density_map_attachment;
} vk_render_pass_fragment_density_map_create_info_ext;

#define vk_ext_scalar_block_layout 1
#define VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION 1
#define VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME "VK_EXT_scalar_block_layout"
typedef vk_physical_device_scalar_block_layout_features vk_physical_device_scalar_block_layout_features_ext;

#define vk_google_hlsl_functionality1 1
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION 1
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME "VK_GOOGLE_hlsl_functionality1"

#define vk_google_decorate_string 1
#define VK_GOOGLE_DECORATE_STRING_SPEC_VERSION 1
#define VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME "VK_GOOGLE_decorate_string"

#define vk_ext_subgroup_size_control 1
#define VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION 2
#define VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME "VK_EXT_subgroup_size_control"
typedef struct vk_physical_device_subgroup_size_control_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         subgroup_size_control;
    vk_bool32         compute_full_subgroups;
} vk_physical_device_subgroup_size_control_features_ext;

typedef struct vk_physical_device_subgroup_size_control_properties_ext {
    vk_structure_type     s_type;
    void*                 p_next;
    uint32_t              min_subgroup_size;
    uint32_t              max_subgroup_size;
    uint32_t              max_compute_workgroup_subgroups;
    vk_shader_stage_flags required_subgroup_size_stages;
} vk_physical_device_subgroup_size_control_properties_ext;

typedef struct vk_pipeline_shader_stage_required_subgroup_size_create_info_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          required_subgroup_size;
} vk_pipeline_shader_stage_required_subgroup_size_create_info_ext;

#define vk_amd_shader_core_properties2 1
#define VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION 1
#define VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME "VK_AMD_shader_core_properties2"

typedef enum vk_shader_core_properties_flag_bits_amd {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7fffffff
} vk_shader_core_properties_flag_bits_amd;
typedef vk_flags vk_shader_core_properties_flags_amd;
typedef struct vk_physical_device_shader_core_properties2amd {
    vk_structure_type                   s_type;
    void*                               p_next;
    vk_shader_core_properties_flags_amd shader_core_features;
    uint32_t                            active_compute_unit_count;
} vk_physical_device_shader_core_properties2amd;

#define vk_amd_device_coherent_memory 1
#define VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION 1
#define VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME "VK_AMD_device_coherent_memory"
typedef struct vk_physical_device_coherent_memory_features_amd {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         device_coherent_memory;
} vk_physical_device_coherent_memory_features_amd;

#define vk_ext_memory_budget 1
#define VK_EXT_MEMORY_BUDGET_SPEC_VERSION 1
#define VK_EXT_MEMORY_BUDGET_EXTENSION_NAME "VK_EXT_memory_budget"
typedef struct vk_physical_device_memory_budget_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_device_size    heap_budget[VK_MAX_MEMORY_HEAPS];
    vk_device_size    heap_usage[VK_MAX_MEMORY_HEAPS];
} vk_physical_device_memory_budget_properties_ext;

#define vk_ext_memory_priority 1
#define VK_EXT_MEMORY_PRIORITY_SPEC_VERSION 1
#define VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME "VK_EXT_memory_priority"
typedef struct vk_physical_device_memory_priority_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         memory_priority;
} vk_physical_device_memory_priority_features_ext;

typedef struct vk_memory_priority_allocate_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    float             priority;
} vk_memory_priority_allocate_info_ext;

#define vk_nv_dedicated_allocation_image_aliasing 1
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION 1
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME "VK_NV_dedicated_allocation_image_aliasing"
typedef struct vk_physical_device_dedicated_allocation_image_aliasing_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         dedicated_allocation_image_aliasing;
} vk_physical_device_dedicated_allocation_image_aliasing_features_nv;

#define vk_ext_buffer_device_address 1
#define VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 2
#define VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME "VK_EXT_buffer_device_address"
typedef struct vk_physical_device_buffer_device_address_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         buffer_device_address;
    vk_bool32         buffer_device_address_capture_replay;
    vk_bool32         buffer_device_address_multi_device;
} vk_physical_device_buffer_device_address_features_ext;

typedef vk_physical_device_buffer_device_address_features_ext vk_physical_device_buffer_address_features_ext;

typedef vk_buffer_device_address_info vk_buffer_device_address_info_ext;

typedef struct vk_buffer_device_address_create_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    vk_device_address device_address;
} vk_buffer_device_address_create_info_ext;

typedef vk_device_address(VKAPI_PTR* pfn_vk_get_buffer_device_address_ext)(vk_device                            device,
                                                                           const vk_buffer_device_address_info* p_info);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_device_address VKAPI_CALL vk_get_buffer_device_address_ext(
    vk_device device, const vk_buffer_device_address_info* p_info) __asm("vkGetBufferDeviceAddressEXT");
#endif

#define vk_ext_tooling_info 1
#define VK_EXT_TOOLING_INFO_SPEC_VERSION 1
#define VK_EXT_TOOLING_INFO_EXTENSION_NAME "VK_EXT_tooling_info"

typedef enum vk_tool_purpose_flag_bits_ext {
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT          = 0x00000001,
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT           = 0x00000002,
    VK_TOOL_PURPOSE_TRACING_BIT_EXT             = 0x00000004,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 0x00000008,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT  = 0x00000010,
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT     = 0x00000020,
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT       = 0x00000040,
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT      = 0x7fffffff
} vk_tool_purpose_flag_bits_ext;
typedef vk_flags vk_tool_purpose_flags_ext;
typedef struct vk_physical_device_tool_properties_ext {
    vk_structure_type         s_type;
    void*                     p_next;
    char                      name[VK_MAX_EXTENSION_NAME_SIZE];
    char                      version[VK_MAX_EXTENSION_NAME_SIZE];
    vk_tool_purpose_flags_ext purposes;
    char                      description[VK_MAX_DESCRIPTION_SIZE];
    char                      layer[VK_MAX_EXTENSION_NAME_SIZE];
} vk_physical_device_tool_properties_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_tool_properties_ext)(
    vk_physical_device physical_device, uint32_t* p_tool_count,
    vk_physical_device_tool_properties_ext* p_tool_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_tool_properties_ext(
    vk_physical_device physical_device, uint32_t* p_tool_count,
    vk_physical_device_tool_properties_ext* p_tool_properties) __asm("vkGetPhysicalDeviceToolPropertiesEXT");
#endif

#define vk_ext_separate_stencil_usage 1
#define VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION 1
#define VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME "VK_EXT_separate_stencil_usage"
typedef vk_image_stencil_usage_create_info vk_image_stencil_usage_create_info_ext;

#define vk_ext_validation_features 1
#define VK_EXT_VALIDATION_FEATURES_SPEC_VERSION 4
#define VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME "VK_EXT_validation_features"

typedef enum vk_validation_feature_enable_ext {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT                      = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT                    = 2,
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT                      = 3,
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT        = 4,
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT                          = 0x7fffffff
} vk_validation_feature_enable_ext;

typedef enum vk_validation_feature_disable_ext {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT              = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT          = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT    = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT   = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT      = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT   = 6,
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT         = 0x7fffffff
} vk_validation_feature_disable_ext;
typedef struct vk_validation_features_ext {
    vk_structure_type                        s_type;
    const void*                              p_next;
    uint32_t                                 enabled_validation_feature_count;
    const vk_validation_feature_enable_ext*  p_enabled_validation_features;
    uint32_t                                 disabled_validation_feature_count;
    const vk_validation_feature_disable_ext* p_disabled_validation_features;
} vk_validation_features_ext;

#define vk_nv_cooperative_matrix 1
#define VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION 1
#define VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME "VK_NV_cooperative_matrix"

typedef enum vk_component_type_nv {
    VK_COMPONENT_TYPE_FLOAT16_NV  = 0,
    VK_COMPONENT_TYPE_FLOAT32_NV  = 1,
    VK_COMPONENT_TYPE_FLOAT64_NV  = 2,
    VK_COMPONENT_TYPE_SINT8_NV    = 3,
    VK_COMPONENT_TYPE_SINT16_NV   = 4,
    VK_COMPONENT_TYPE_SINT32_NV   = 5,
    VK_COMPONENT_TYPE_SINT64_NV   = 6,
    VK_COMPONENT_TYPE_UINT8_NV    = 7,
    VK_COMPONENT_TYPE_UINT16_NV   = 8,
    VK_COMPONENT_TYPE_UINT32_NV   = 9,
    VK_COMPONENT_TYPE_UINT64_NV   = 10,
    VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7fffffff
} vk_component_type_nv;

typedef enum vk_scope_nv {
    VK_SCOPE_DEVICE_NV       = 1,
    VK_SCOPE_WORKGROUP_NV    = 2,
    VK_SCOPE_SUBGROUP_NV     = 3,
    VK_SCOPE_QUEUE_FAMILY_NV = 5,
    VK_SCOPE_MAX_ENUM_NV     = 0x7fffffff
} vk_scope_nv;
typedef struct vk_cooperative_matrix_properties_nv {
    vk_structure_type    s_type;
    void*                p_next;
    uint32_t             msize;
    uint32_t             nsize;
    uint32_t             ksize;
    vk_component_type_nv atype;
    vk_component_type_nv btype;
    vk_component_type_nv ctype;
    vk_component_type_nv dtype;
    vk_scope_nv          scope;
} vk_cooperative_matrix_properties_nv;

typedef struct vk_physical_device_cooperative_matrix_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         cooperative_matrix;
    vk_bool32         cooperative_matrix_robust_buffer_access;
} vk_physical_device_cooperative_matrix_features_nv;

typedef struct vk_physical_device_cooperative_matrix_properties_nv {
    vk_structure_type     s_type;
    void*                 p_next;
    vk_shader_stage_flags cooperative_matrix_supported_stages;
} vk_physical_device_cooperative_matrix_properties_nv;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_cooperative_matrix_properties_nv)(
    vk_physical_device physical_device, uint32_t* p_property_count, vk_cooperative_matrix_properties_nv* p_properties);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_cooperative_matrix_properties_nv(
    vk_physical_device physical_device, uint32_t* p_property_count,
    vk_cooperative_matrix_properties_nv* p_properties) __asm("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
#endif

#define vk_nv_coverage_reduction_mode 1
#define VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION 1
#define VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME "VK_NV_coverage_reduction_mode"

typedef enum vk_coverage_reduction_mode_nv {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV    = 0,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7fffffff
} vk_coverage_reduction_mode_nv;
typedef vk_flags vk_pipeline_coverage_reduction_state_create_flags_nv;
typedef struct vk_physical_device_coverage_reduction_mode_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         coverage_reduction_mode;
} vk_physical_device_coverage_reduction_mode_features_nv;

typedef struct vk_pipeline_coverage_reduction_state_create_info_nv {
    vk_structure_type                                    s_type;
    const void*                                          p_next;
    vk_pipeline_coverage_reduction_state_create_flags_nv flags;
    vk_coverage_reduction_mode_nv                        coverage_reduction_mode;
} vk_pipeline_coverage_reduction_state_create_info_nv;

typedef struct vk_framebuffer_mixed_samples_combination_nv {
    vk_structure_type             s_type;
    void*                         p_next;
    vk_coverage_reduction_mode_nv coverage_reduction_mode;
    vk_sample_count_flag_bits     rasterization_samples;
    vk_sample_count_flags         depth_stencil_samples;
    vk_sample_count_flags         color_samples;
} vk_framebuffer_mixed_samples_combination_nv;

typedef vk_result(VKAPI_PTR* pfn_vk_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv)(
    vk_physical_device physical_device, uint32_t* p_combination_count,
    vk_framebuffer_mixed_samples_combination_nv* p_combinations);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(
    vk_physical_device physical_device, uint32_t* p_combination_count,
    vk_framebuffer_mixed_samples_combination_nv*
        p_combinations) __asm("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
#endif

#define vk_ext_fragment_shader_interlock 1
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME "VK_EXT_fragment_shader_interlock"
typedef struct vk_physical_device_fragment_shader_interlock_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         fragment_shader_sample_interlock;
    vk_bool32         fragment_shader_pixel_interlock;
    vk_bool32         fragment_shader_shading_rate_interlock;
} vk_physical_device_fragment_shader_interlock_features_ext;

#define vk_ext_ycbcr_image_arrays 1
#define VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION 1
#define VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME "VK_EXT_ycbcr_image_arrays"
typedef struct vk_physical_device_ycbcr_image_arrays_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         ycbcr_image_arrays;
} vk_physical_device_ycbcr_image_arrays_features_ext;

#define vk_ext_headless_surface 1
#define VK_EXT_HEADLESS_SURFACE_SPEC_VERSION 1
#define VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME "VK_EXT_headless_surface"
typedef vk_flags vk_headless_surface_create_flags_ext;
typedef struct vk_headless_surface_create_info_ext {
    vk_structure_type                    s_type;
    const void*                          p_next;
    vk_headless_surface_create_flags_ext flags;
} vk_headless_surface_create_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_create_headless_surface_ext)(
    vk_instance instance, const vk_headless_surface_create_info_ext* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_surface_khr* p_surface);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL vk_create_headless_surface_ext(
    vk_instance instance, const vk_headless_surface_create_info_ext* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_surface_khr* p_surface) __asm("vkCreateHeadlessSurfaceEXT");
#endif

#define vk_ext_line_rasterization 1
#define VK_EXT_LINE_RASTERIZATION_SPEC_VERSION 1
#define VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME "VK_EXT_line_rasterization"

typedef enum vk_line_rasterization_mode_ext {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT            = 0,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT        = 1,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT          = 2,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT           = 0x7fffffff
} vk_line_rasterization_mode_ext;
typedef struct vk_physical_device_line_rasterization_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         rectangular_lines;
    vk_bool32         bresenham_lines;
    vk_bool32         smooth_lines;
    vk_bool32         stippled_rectangular_lines;
    vk_bool32         stippled_bresenham_lines;
    vk_bool32         stippled_smooth_lines;
} vk_physical_device_line_rasterization_features_ext;

typedef struct vk_physical_device_line_rasterization_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          line_sub_pixel_precision_bits;
} vk_physical_device_line_rasterization_properties_ext;

typedef struct vk_pipeline_rasterization_line_state_create_info_ext {
    vk_structure_type              s_type;
    const void*                    p_next;
    vk_line_rasterization_mode_ext line_rasterization_mode;
    vk_bool32                      stippled_line_enable;
    uint32_t                       line_stipple_factor;
    uint16_t                       line_stipple_pattern;
} vk_pipeline_rasterization_line_state_create_info_ext;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_line_stipple_ext)(vk_command_buffer command_buffer, uint32_t line_stipple_factor,
                                                         uint16_t line_stipple_pattern);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_line_stipple_ext(vk_command_buffer command_buffer, uint32_t line_stipple_factor,
                                                       uint16_t line_stipple_pattern) __asm("vkCmdSetLineStippleEXT");
#endif

#define vk_ext_shader_atomic_float 1
#define VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION 1
#define VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME "VK_EXT_shader_atomic_float"
typedef struct vk_physical_device_shader_atomic_float_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_buffer_float32atomics;
    vk_bool32         shader_buffer_float32atomic_add;
    vk_bool32         shader_buffer_float64atomics;
    vk_bool32         shader_buffer_float64atomic_add;
    vk_bool32         shader_shared_float32atomics;
    vk_bool32         shader_shared_float32atomic_add;
    vk_bool32         shader_shared_float64atomics;
    vk_bool32         shader_shared_float64atomic_add;
    vk_bool32         shader_image_float32atomics;
    vk_bool32         shader_image_float32atomic_add;
    vk_bool32         sparse_image_float32atomics;
    vk_bool32         sparse_image_float32atomic_add;
} vk_physical_device_shader_atomic_float_features_ext;

#define vk_ext_host_query_reset 1
#define VK_EXT_HOST_QUERY_RESET_SPEC_VERSION 1
#define VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME "VK_EXT_host_query_reset"
typedef vk_physical_device_host_query_reset_features vk_physical_device_host_query_reset_features_ext;

typedef void(VKAPI_PTR* pfn_vk_reset_query_pool_ext)(vk_device device, vk_query_pool query_pool, uint32_t first_query,
                                                     uint32_t query_count);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_reset_query_pool_ext(vk_device device, vk_query_pool query_pool, uint32_t first_query,
                                                   uint32_t query_count) __asm("vkResetQueryPoolEXT");
#endif

#define vk_ext_index_type_uint8 1
#define VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION 1
#define VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME "VK_EXT_index_type_uint8"
typedef struct vk_physical_device_index_type_uint8features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         index_type_uint8;
} vk_physical_device_index_type_uint8features_ext;

#define vk_ext_extended_dynamic_state 1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION 1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME "VK_EXT_extended_dynamic_state"
typedef struct vk_physical_device_extended_dynamic_state_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         extended_dynamic_state;
} vk_physical_device_extended_dynamic_state_features_ext;

typedef void(VKAPI_PTR* pfn_vk_cmd_set_cull_mode_ext)(vk_command_buffer command_buffer, vk_cull_mode_flags cull_mode);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_front_face_ext)(vk_command_buffer command_buffer, vk_front_face front_face);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_primitive_topology_ext)(vk_command_buffer     command_buffer,
                                                               vk_primitive_topology primitive_topology);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_viewport_with_count_ext)(vk_command_buffer  command_buffer,
                                                                uint32_t           viewport_count,
                                                                const vk_viewport* p_viewports);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_scissor_with_count_ext)(vk_command_buffer command_buffer, uint32_t scissor_count,
                                                               const vk_rect2d* p_scissors);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_vertex_buffers2ext)(vk_command_buffer command_buffer, uint32_t first_binding,
                                                            uint32_t binding_count, const vk_buffer* p_buffers,
                                                            const vk_device_size* p_offsets,
                                                            const vk_device_size* p_sizes,
                                                            const vk_device_size* p_strides);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_test_enable_ext)(vk_command_buffer command_buffer,
                                                              vk_bool32         depth_test_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_write_enable_ext)(vk_command_buffer command_buffer,
                                                               vk_bool32         depth_write_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_compare_op_ext)(vk_command_buffer command_buffer,
                                                             vk_compare_op     depth_compare_op);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_depth_bounds_test_enable_ext)(vk_command_buffer command_buffer,
                                                                     vk_bool32         depth_bounds_test_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_test_enable_ext)(vk_command_buffer command_buffer,
                                                                vk_bool32         stencil_test_enable);
typedef void(VKAPI_PTR* pfn_vk_cmd_set_stencil_op_ext)(vk_command_buffer     command_buffer,
                                                       vk_stencil_face_flags face_mask, vk_stencil_op fail_op,
                                                       vk_stencil_op pass_op, vk_stencil_op depth_fail_op,
                                                       vk_compare_op compare_op);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_cmd_set_cull_mode_ext(vk_command_buffer  command_buffer,
                                                    vk_cull_mode_flags cull_mode) __asm("vkCmdSetCullModeEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_front_face_ext(vk_command_buffer command_buffer,
                                                     vk_front_face     front_face) __asm("vkCmdSetFrontFaceEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_primitive_topology_ext(
    vk_command_buffer command_buffer, vk_primitive_topology primitive_topology) __asm("vkCmdSetPrimitiveTopologyEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_set_viewport_with_count_ext(vk_command_buffer command_buffer, uint32_t viewport_count,
                                   const vk_viewport* p_viewports) __asm("vkCmdSetViewportWithCountEXT");

VKAPI_ATTR void VKAPI_CALL
vk_cmd_set_scissor_with_count_ext(vk_command_buffer command_buffer, uint32_t scissor_count,
                                  const vk_rect2d* p_scissors) __asm("vkCmdSetScissorWithCountEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_vertex_buffers2ext(
    vk_command_buffer command_buffer, uint32_t first_binding, uint32_t binding_count, const vk_buffer* p_buffers,
    const vk_device_size* p_offsets, const vk_device_size* p_sizes,
    const vk_device_size* p_strides) __asm("vkCmdBindVertexBuffers2EXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_test_enable_ext(
    vk_command_buffer command_buffer, vk_bool32 depth_test_enable) __asm("vkCmdSetDepthTestEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_write_enable_ext(
    vk_command_buffer command_buffer, vk_bool32 depth_write_enable) __asm("vkCmdSetDepthWriteEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_compare_op_ext(
    vk_command_buffer command_buffer, vk_compare_op depth_compare_op) __asm("vkCmdSetDepthCompareOpEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_depth_bounds_test_enable_ext(
    vk_command_buffer command_buffer, vk_bool32 depth_bounds_test_enable) __asm("vkCmdSetDepthBoundsTestEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_test_enable_ext(
    vk_command_buffer command_buffer, vk_bool32 stencil_test_enable) __asm("vkCmdSetStencilTestEnableEXT");

VKAPI_ATTR void VKAPI_CALL vk_cmd_set_stencil_op_ext(vk_command_buffer command_buffer, vk_stencil_face_flags face_mask,
                                                     vk_stencil_op fail_op, vk_stencil_op pass_op,
                                                     vk_stencil_op depth_fail_op,
                                                     vk_compare_op compare_op) __asm("vkCmdSetStencilOpEXT");
#endif

#define vk_ext_shader_demote_to_helper_invocation 1
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION 1
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME "VK_EXT_shader_demote_to_helper_invocation"
typedef struct vk_physical_device_shader_demote_to_helper_invocation_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         shader_demote_to_helper_invocation;
} vk_physical_device_shader_demote_to_helper_invocation_features_ext;

#define vk_nv_device_generated_commands 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_indirect_commands_layout_nv)
#define VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 3
#define VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME "VK_NV_device_generated_commands"

typedef enum vk_indirect_commands_token_type_nv {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV  = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV   = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV  = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV  = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV          = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV    = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV      = 0x7fffffff
} vk_indirect_commands_token_type_nv;

typedef enum vk_indirect_state_flag_bits_nv {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001,
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7fffffff
} vk_indirect_state_flag_bits_nv;
typedef vk_flags vk_indirect_state_flags_nv;

typedef enum vk_indirect_commands_layout_usage_flag_bits_nv {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV   = 0x00000002,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV      = 0x7fffffff
} vk_indirect_commands_layout_usage_flag_bits_nv;
typedef vk_flags vk_indirect_commands_layout_usage_flags_nv;
typedef struct vk_physical_device_device_generated_commands_properties_nv {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_graphics_shader_group_count;
    uint32_t          max_indirect_sequence_count;
    uint32_t          max_indirect_commands_token_count;
    uint32_t          max_indirect_commands_stream_count;
    uint32_t          max_indirect_commands_token_offset;
    uint32_t          max_indirect_commands_stream_stride;
    uint32_t          min_sequences_count_buffer_offset_alignment;
    uint32_t          min_sequences_index_buffer_offset_alignment;
    uint32_t          min_indirect_commands_buffer_offset_alignment;
} vk_physical_device_device_generated_commands_properties_nv;

typedef struct vk_physical_device_device_generated_commands_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         device_generated_commands;
} vk_physical_device_device_generated_commands_features_nv;

typedef struct vk_graphics_shader_group_create_info_nv {
    vk_structure_type                                 s_type;
    const void*                                       p_next;
    uint32_t                                          stage_count;
    const vk_pipeline_shader_stage_create_info*       p_stages;
    const vk_pipeline_vertex_input_state_create_info* p_vertex_input_state;
    const vk_pipeline_tessellation_state_create_info* p_tessellation_state;
} vk_graphics_shader_group_create_info_nv;

typedef struct vk_graphics_pipeline_shader_groups_create_info_nv {
    vk_structure_type                              s_type;
    const void*                                    p_next;
    uint32_t                                       group_count;
    const vk_graphics_shader_group_create_info_nv* p_groups;
    uint32_t                                       pipeline_count;
    const vk_pipeline*                             p_pipelines;
} vk_graphics_pipeline_shader_groups_create_info_nv;

typedef struct vk_bind_shader_group_indirect_command_nv {
    uint32_t group_index;
} vk_bind_shader_group_indirect_command_nv;

typedef struct vk_bind_index_buffer_indirect_command_nv {
    vk_device_address buffer_address;
    uint32_t          size;
    vk_index_type     index_type;
} vk_bind_index_buffer_indirect_command_nv;

typedef struct vk_bind_vertex_buffer_indirect_command_nv {
    vk_device_address buffer_address;
    uint32_t          size;
    uint32_t          stride;
} vk_bind_vertex_buffer_indirect_command_nv;

typedef struct vk_set_state_flags_indirect_command_nv {
    uint32_t data;
} vk_set_state_flags_indirect_command_nv;

typedef struct vk_indirect_commands_stream_nv {
    vk_buffer      buffer;
    vk_device_size offset;
} vk_indirect_commands_stream_nv;

typedef struct vk_indirect_commands_layout_token_nv {
    vk_structure_type                  s_type;
    const void*                        p_next;
    vk_indirect_commands_token_type_nv token_type;
    uint32_t                           stream;
    uint32_t                           offset;
    uint32_t                           vertex_binding_unit;
    vk_bool32                          vertex_dynamic_stride;
    vk_pipeline_layout                 pushconstant_pipeline_layout;
    vk_shader_stage_flags              pushconstant_shader_stage_flags;
    uint32_t                           pushconstant_offset;
    uint32_t                           pushconstant_size;
    vk_indirect_state_flags_nv         indirect_state_flags;
    uint32_t                           index_type_count;
    const vk_index_type*               p_index_types;
    const uint32_t*                    p_index_type_values;
} vk_indirect_commands_layout_token_nv;

typedef struct vk_indirect_commands_layout_create_info_nv {
    vk_structure_type                           s_type;
    const void*                                 p_next;
    vk_indirect_commands_layout_usage_flags_nv  flags;
    vk_pipeline_bind_point                      pipeline_bind_point;
    uint32_t                                    token_count;
    const vk_indirect_commands_layout_token_nv* p_tokens;
    uint32_t                                    stream_count;
    const uint32_t*                             p_stream_strides;
} vk_indirect_commands_layout_create_info_nv;

typedef struct vk_generated_commands_info_nv {
    vk_structure_type                     s_type;
    const void*                           p_next;
    vk_pipeline_bind_point                pipeline_bind_point;
    vk_pipeline                           pipeline;
    vk_indirect_commands_layout_nv        indirect_commands_layout;
    uint32_t                              stream_count;
    const vk_indirect_commands_stream_nv* p_streams;
    uint32_t                              sequences_count;
    vk_buffer                             preprocess_buffer;
    vk_device_size                        preprocess_offset;
    vk_device_size                        preprocess_size;
    vk_buffer                             sequences_count_buffer;
    vk_device_size                        sequences_count_offset;
    vk_buffer                             sequences_index_buffer;
    vk_device_size                        sequences_index_offset;
} vk_generated_commands_info_nv;

typedef struct vk_generated_commands_memory_requirements_info_nv {
    vk_structure_type              s_type;
    const void*                    p_next;
    vk_pipeline_bind_point         pipeline_bind_point;
    vk_pipeline                    pipeline;
    vk_indirect_commands_layout_nv indirect_commands_layout;
    uint32_t                       max_sequences_count;
} vk_generated_commands_memory_requirements_info_nv;

typedef void(VKAPI_PTR* pfn_vk_get_generated_commands_memory_requirements_nv)(
    vk_device device, const vk_generated_commands_memory_requirements_info_nv* p_info,
    vk_memory_requirements2* p_memory_requirements);
typedef void(VKAPI_PTR* pfn_vk_cmd_preprocess_generated_commands_nv)(
    vk_command_buffer command_buffer, const vk_generated_commands_info_nv* p_generated_commands_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_execute_generated_commands_nv)(
    vk_command_buffer command_buffer, vk_bool32 is_preprocessed,
    const vk_generated_commands_info_nv* p_generated_commands_info);
typedef void(VKAPI_PTR* pfn_vk_cmd_bind_pipeline_shader_group_nv)(vk_command_buffer      command_buffer,
                                                                  vk_pipeline_bind_point pipeline_bind_point,
                                                                  vk_pipeline pipeline, uint32_t group_index);
typedef vk_result(VKAPI_PTR* pfn_vk_create_indirect_commands_layout_nv)(
    vk_device device, const vk_indirect_commands_layout_create_info_nv* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_indirect_commands_layout_nv* p_indirect_commands_layout);
typedef void(VKAPI_PTR* pfn_vk_destroy_indirect_commands_layout_nv)(
    vk_device device, vk_indirect_commands_layout_nv indirect_commands_layout,
    const vk_allocation_callbacks* p_allocator);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR void VKAPI_CALL vk_get_generated_commands_memory_requirements_nv(
    vk_device device, const vk_generated_commands_memory_requirements_info_nv* p_info,
    vk_memory_requirements2* p_memory_requirements) __asm("vkGetGeneratedCommandsMemoryRequirementsNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_preprocess_generated_commands_nv(
    vk_command_buffer                    command_buffer,
    const vk_generated_commands_info_nv* p_generated_commands_info) __asm("vkCmdPreprocessGeneratedCommandsNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_execute_generated_commands_nv(
    vk_command_buffer command_buffer, vk_bool32 is_preprocessed,
    const vk_generated_commands_info_nv* p_generated_commands_info) __asm("vkCmdExecuteGeneratedCommandsNV");

VKAPI_ATTR void VKAPI_CALL vk_cmd_bind_pipeline_shader_group_nv(
    vk_command_buffer command_buffer, vk_pipeline_bind_point pipeline_bind_point, vk_pipeline pipeline,
    uint32_t group_index) __asm("vkCmdBindPipelineShaderGroupNV");

VKAPI_ATTR vk_result VKAPI_CALL vk_create_indirect_commands_layout_nv(
    vk_device device, const vk_indirect_commands_layout_create_info_nv* p_create_info,
    const vk_allocation_callbacks*  p_allocator,
    vk_indirect_commands_layout_nv* p_indirect_commands_layout) __asm("vkCreateIndirectCommandsLayoutNV");

VKAPI_ATTR void VKAPI_CALL vk_destroy_indirect_commands_layout_nv(
    vk_device device, vk_indirect_commands_layout_nv indirect_commands_layout,
    const vk_allocation_callbacks* p_allocator) __asm("vkDestroyIndirectCommandsLayoutNV");
#endif

#define vk_ext_texel_buffer_alignment 1
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION 1
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME "VK_EXT_texel_buffer_alignment"
typedef struct vk_physical_device_texel_buffer_alignment_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         texel_buffer_alignment;
} vk_physical_device_texel_buffer_alignment_features_ext;

typedef struct vk_physical_device_texel_buffer_alignment_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_device_size    storage_texel_buffer_offset_alignment_bytes;
    vk_bool32         storage_texel_buffer_offset_single_texel_alignment;
    vk_device_size    uniform_texel_buffer_offset_alignment_bytes;
    vk_bool32         uniform_texel_buffer_offset_single_texel_alignment;
} vk_physical_device_texel_buffer_alignment_properties_ext;

#define vk_qcom_render_pass_transform 1
#define VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION 1
#define VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME "VK_QCOM_render_pass_transform"
typedef struct vk_render_pass_transform_begin_info_qcom {
    vk_structure_type                  s_type;
    void*                              p_next;
    vk_surface_transform_flag_bits_khr transform;
} vk_render_pass_transform_begin_info_qcom;

typedef struct vk_command_buffer_inheritance_render_pass_transform_info_qcom {
    vk_structure_type                  s_type;
    void*                              p_next;
    vk_surface_transform_flag_bits_khr transform;
    vk_rect2d                          render_area;
} vk_command_buffer_inheritance_render_pass_transform_info_qcom;

#define vk_ext_robustness2 1
#define VK_EXT_ROBUSTNESS_2_SPEC_VERSION 1
#define VK_EXT_ROBUSTNESS_2_EXTENSION_NAME "VK_EXT_robustness2"
typedef struct vk_physical_device_robustness2features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         robust_buffer_access2;
    vk_bool32         robust_image_access2;
    vk_bool32         null_descriptor;
} vk_physical_device_robustness2features_ext;

typedef struct vk_physical_device_robustness2properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_device_size    robust_storage_buffer_access_size_alignment;
    vk_device_size    robust_uniform_buffer_access_size_alignment;
} vk_physical_device_robustness2properties_ext;

#define vk_ext_custom_border_color 1
#define VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION 12
#define VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME "VK_EXT_custom_border_color"
typedef struct vk_sampler_custom_border_color_create_info_ext {
    vk_structure_type    s_type;
    const void*          p_next;
    vk_clear_color_value custom_border_color;
    vk_format            format;
} vk_sampler_custom_border_color_create_info_ext;

typedef struct vk_physical_device_custom_border_color_properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    uint32_t          max_custom_border_color_samplers;
} vk_physical_device_custom_border_color_properties_ext;

typedef struct vk_physical_device_custom_border_color_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         custom_border_colors;
    vk_bool32         custom_border_color_without_format;
} vk_physical_device_custom_border_color_features_ext;

#define vk_google_user_type 1
#define VK_GOOGLE_USER_TYPE_SPEC_VERSION 1
#define VK_GOOGLE_USER_TYPE_EXTENSION_NAME "VK_GOOGLE_user_type"

#define vk_ext_private_data 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(vk_private_data_slot_ext)
#define VK_EXT_PRIVATE_DATA_SPEC_VERSION 1
#define VK_EXT_PRIVATE_DATA_EXTENSION_NAME "VK_EXT_private_data"

typedef enum vk_private_data_slot_create_flag_bits_ext {
    VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7fffffff
} vk_private_data_slot_create_flag_bits_ext;
typedef vk_flags vk_private_data_slot_create_flags_ext;
typedef struct vk_physical_device_private_data_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         private_data;
} vk_physical_device_private_data_features_ext;

typedef struct vk_device_private_data_create_info_ext {
    vk_structure_type s_type;
    const void*       p_next;
    uint32_t          private_data_slot_request_count;
} vk_device_private_data_create_info_ext;

typedef struct vk_private_data_slot_create_info_ext {
    vk_structure_type                     s_type;
    const void*                           p_next;
    vk_private_data_slot_create_flags_ext flags;
} vk_private_data_slot_create_info_ext;

typedef vk_result(VKAPI_PTR* pfn_vk_create_private_data_slot_ext)(
    vk_device device, const vk_private_data_slot_create_info_ext* p_create_info,
    const vk_allocation_callbacks* p_allocator, vk_private_data_slot_ext* p_private_data_slot);
typedef void(VKAPI_PTR* pfn_vk_destroy_private_data_slot_ext)(vk_device                      device,
                                                              vk_private_data_slot_ext       private_data_slot,
                                                              const vk_allocation_callbacks* p_allocator);
typedef vk_result(VKAPI_PTR* pfn_vk_set_private_data_ext)(vk_device device, vk_object_type object_type,
                                                          uint64_t                 object_handle,
                                                          vk_private_data_slot_ext private_data_slot, uint64_t data);
typedef void(VKAPI_PTR* pfn_vk_get_private_data_ext)(vk_device device, vk_object_type object_type,
                                                     uint64_t object_handle, vk_private_data_slot_ext private_data_slot,
                                                     uint64_t* p_data);

#ifndef VK_NO_PROTOTYPES
VKAPI_ATTR vk_result VKAPI_CALL
vk_create_private_data_slot_ext(vk_device device, const vk_private_data_slot_create_info_ext* p_create_info,
                                const vk_allocation_callbacks* p_allocator,
                                vk_private_data_slot_ext*      p_private_data_slot) __asm("vkCreatePrivateDataSlotEXT");

VKAPI_ATTR void VKAPI_CALL
vk_destroy_private_data_slot_ext(vk_device device, vk_private_data_slot_ext private_data_slot,
                                 const vk_allocation_callbacks* p_allocator) __asm("vkDestroyPrivateDataSlotEXT");

VKAPI_ATTR vk_result VKAPI_CALL vk_set_private_data_ext(vk_device device, vk_object_type object_type,
                                                        uint64_t                 object_handle,
                                                        vk_private_data_slot_ext private_data_slot,
                                                        uint64_t                 data) __asm("vkSetPrivateDataEXT");

VKAPI_ATTR void VKAPI_CALL vk_get_private_data_ext(vk_device device, vk_object_type object_type, uint64_t object_handle,
                                                   vk_private_data_slot_ext private_data_slot,
                                                   uint64_t*                p_data) __asm("vkGetPrivateDataEXT");
#endif

#define vk_ext_pipeline_creation_cache_control 1
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION 3
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME "VK_EXT_pipeline_creation_cache_control"
typedef struct vk_physical_device_pipeline_creation_cache_control_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         pipeline_creation_cache_control;
} vk_physical_device_pipeline_creation_cache_control_features_ext;

#define vk_nv_device_diagnostics_config 1
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION 1
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME "VK_NV_device_diagnostics_config"

typedef enum vk_device_diagnostics_config_flag_bits_nv {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV     = 0x00000001,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV     = 0x00000002,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004,
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV               = 0x7fffffff
} vk_device_diagnostics_config_flag_bits_nv;
typedef vk_flags vk_device_diagnostics_config_flags_nv;
typedef struct vk_physical_device_diagnostics_config_features_nv {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         diagnostics_config;
} vk_physical_device_diagnostics_config_features_nv;

typedef struct vk_device_diagnostics_config_create_info_nv {
    vk_structure_type                     s_type;
    const void*                           p_next;
    vk_device_diagnostics_config_flags_nv flags;
} vk_device_diagnostics_config_create_info_nv;

#define vk_qcom_render_pass_store_ops 1
#define vk_qcom_render_pass_store_ops_spec_version 2
#define vk_qcom_render_pass_store_ops_extension_name "VK_QCOM_render_pass_store_ops"

#define vk_ext_fragment_density_map2 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME "VK_EXT_fragment_density_map2"
typedef struct vk_physical_device_fragment_density_map2features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         fragment_density_map_deferred;
} vk_physical_device_fragment_density_map2features_ext;

typedef struct vk_physical_device_fragment_density_map2properties_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         subsampled_loads;
    vk_bool32         subsampled_coarse_reconstruction_early_access;
    uint32_t          max_subsampled_array_layers;
    uint32_t          max_descriptor_set_subsampled_samplers;
} vk_physical_device_fragment_density_map2properties_ext;

#define vk_ext_image_robustness 1
#define VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION 1
#define VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME "VK_EXT_image_robustness"
typedef struct vk_physical_device_image_robustness_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         robust_image_access;
} vk_physical_device_image_robustness_features_ext;

#define vk_ext_4444_formats 1
#define VK_EXT_4444_FORMATS_SPEC_VERSION 1
#define VK_EXT_4444_FORMATS_EXTENSION_NAME "VK_EXT_4444_formats"
typedef struct vk_physical_device4444formats_features_ext {
    vk_structure_type s_type;
    void*             p_next;
    vk_bool32         format_a4r4g4b4;
    vk_bool32         format_a4b4g4r4;
} vk_physical_device4444formats_features_ext;

#ifdef __cplusplus
}
#endif

#endif
